let request = require('request-promise');
let moment = require('moment');
var fs = require('fs');
var pdfMakePrinter = require('pdfmake');
let Exercise = require('../models/exercises');
let MskExercise = require('../models/recommended_exercises');
let MskResult = require('../models/msk_result');
let Questionnaire = require('../models/questionnaires');
const Organisation = require('../models/organisations');
const Faq = require('../models/faqs');
const NotificationQueue = require('../models/notification_queue');
const Notification = require('../models/notifications');
let ReportExercises = require('../models/report_recommended_exercises');
let User = require('../models/users');
let Result = require('../models/results');
let Score = require('../models/score_master');
let Referral = require('../models/referrals');
const Lookup = require('../models/lookup');
let util = require('../utils');
let userController = require('./users');
const mongoose = require('mongoose');
//const redis = require('redis')
//const { defaultCoreCipherList } = require('constants');
const ObjectId = mongoose.Types.ObjectId;
const clioMskDescription = {
  "HEALTH": "",
  "WELLNESS": "wellness",
  "FITNESS": "fitness",
  "PERFORMANCE": "performance"
};
const bmiDescription = {
  "UNDERWEIGHT": "Based on the height and weight information you provided, your current BMI indicates that you are Underweight.",
  "NORMAL": "Your current BMI is within the Normal category for adults of your height.",
  "OVERWEIGHT": " Based on your current height and weight, your current BMI categoy is Overweight.",
  "OBESE": " Based on your current height and weight, your current BMI categoy is Obese."
};
const bmiFeatures = {
  "UNDERWEIGHT": "Recommended daily calorie intake in the US is approximately 2,500 for men and 2,000 for women.\nPortion size is a key driver of energy intake, and larger-than-appropriate portion sizes likely increases the risk of weight gain.\nReduce and even eliminate saturated and trans fat from your diet. Increase unsaturated fat such as fat found in healthy oils, plant-based foods and omega-3.\nIncrease the amount of fruits, vegetables and whole grains in your diet.\nExercise is one of the key ways to actively reduce your BMI. Follow your healthcare provider's recommendations or the Centers for Disease Control (CDC) general guidelines.",
  "NORMAL": "Recommended daily calorie intake in the US is approximately 2,500 for men and 2,000 for women.\nPortion size is a key driver of energy intake, and larger-than-appropriate portion sizes likely increases the risk of weight gain.\nReduce and even eliminate saturated and trans fat from your diet. Increase unsaturated fat such as fat found in healthy oils, plant-based foods and omega-3.\nIncrease the amount of fruits, vegetables and whole grains in your diet.\nExercise is one of the key ways to actively reduce your BMI. Follow your healthcare provider's recommendations or the Centers for Disease Control (CDC) general guidelines.",
  "OVERWEIGHT": "Recommended daily calorie intake in the US is approximately 2,500 for men and 2,000 for women.\nPortion size is a key driver of energy intake, and larger-than-appropriate portion sizes likely increases the risk of weight gain.\nReduce and even eliminate saturated and trans fat from your diet. Increase unsaturated fat such as fat found in healthy oils, plant-based foods and omega-3.\nIncrease the amount of fruits, vegetables and whole grains in your diet.\nExercise is one of the key ways to actively reduce your BMI. Follow your healthcare provider's recommendations or the Centers for Disease Control (CDC) general guidelines.",
  "OBESE": "Recommended daily calorie intake in the US is approximately 2,500 for men and 2,000 for women.\nPortion size is a key driver of energy intake, and larger-than-appropriate portion sizes likely increases the risk of weight gain.\nReduce and even eliminate saturated and trans fat from your diet. Increase unsaturated fat such as fat found in healthy oils, plant-based foods and omega-3.\nIncrease the amount of fruits, vegetables and whole grains in your diet.\nExercise is one of the key ways to actively reduce your BMI. Follow your healthcare provider's recommendations or the Centers for Disease Control (CDC) general guidelines."
};
const mpDescription = {
  "SYMMETRY": "Great job! You passed all movements and are cleared to proceed with improving your physical fitness.\nWhile training, please remember quality over quantity, and to re-check your Moveprint again in 30 days to stay on top of your game",
  // "PAIN FLOW": "Because these tests caused you pain, it is important that you seek a more thorough assessment from a health care professional. We also recommend that you avoid any physical activity until this pain improves.",
  "PAIN FLOW": "As these tests caused you pain, it is important that you seek a more thorough assessment from a health care professional. We also recommend that you avoid any physical activity until this pain improves.",
  "Pain TOE TOUCH": "Because the Toe Touch test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider.",
  "Pain UPPER BODY MOBILITY": "Because Upper Body Mobility test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider.",
  "Pain SQUAT": "Because the Squat test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider.",
  "Pain ROTATION": "Because the Rotation test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider.",
  "Pain BALANCE & REACH": "Because the Balance and Reach test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider.",
  "SPINE CLEARING": "Because the Spine Clearing caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider. ",
  "SHOULDER CLEARING": "Because the Shoulder Clearing Test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\n\nWe also recommend that you avoid physical activity that will aggravate this pain. In the meantime, complete your daily flow while you seek help from a health care provider. ",
  "TOE TOUCH": "Good news! We have identified that your greatest opportunity for improving movement is to focus on your toe touch.\nWe have selected a specific exercise flow to help improve your toe touch to get you on a path to feeling and moving your best.\nIn the meantime, temporarily steer clear of the movements that are incompatible with your toe toe such as deadlifting, kettlebell swinging, high impact running, jumping and extended periods of forward bending.",
  "UPPER BODY MOBILITY": "Good news! We have identified that your greatest opportunity for improving movement is to focus on upper body mobility.\nWe have selected a specific exercise flow to help improve your upper body mobility to get you on a path to feeling and moving your best.\nIn the meantime, temporarily steer clear of the movements that are incompatible with your upper body mobility such as general pushing and pressing exercises, overhead Loads and ballistic rotational activities from your routine.",
  "ROTATION": "Good news! We have identified that your greatest opportunity for improving movement is to focus on your rotation.\nWe have selected a specific exercise flow to help improve your rotation to get you on a path to feeling and moving your best.\nIn the meantime, temporarily steer clear of the movements that are incompatible with your rotation such as medicine ball side throws, cable rotations, single-arm snatches,single-arm rows, and agility drills from your routine.",
  "SQUAT": "Good news! We have identified that your greatest opportunity for improving movement is to focus on your squat.\nWe have selected a specific exercise flow to help improve your squat to get you on a path to feeling and moving your best.\nIn the meantime, temporarily steer clear movements that are incompatible with your squat such as squatting activities with weight, high impact jumping and plyometrics and hill walking.",
  "BALANCE & REACH": "Good news! We have identified that your greatest opportunity for improving movement is to focus on your balance.\nWe have selected a specific exercise flow to help improve your toe touch to get you on a path to feeling and moveing your best.\nIn the meantime, temporarily steer clear of the poor movements that are incompatible with your ability to balance such as single leg exercises, sporting activities with high agility demands and caution during daily chores requiring balancing."
};
const mpFeatures = {
  "SYMMETRY": "",
  "PAIN FLOW": "",
  "Pain TOE TOUCH": "Deadlifting\nLunging\nSplit squats\nRunning\nStep-ups",
  "Pain UPPER BODY MOBILITY": "Pushing overhead\nPressing overhead\nBench pressing\nRowing\nSnatching\nThrowing",
  "Pain SQUAT": "Squatting\nDeadlifting\nOlympic lifts\nJumping",
  "Pain ROTATION": "Medicine ball side throws\nCable rotations\nSingle arm snatches\nSingle arm rows\nAgility drills",
  "Pain BALANCE & REACH": "Single leg deadlifting\nJumping\nLanding",
  "SPINE CLEARING": "",
  "SHOULDER CLEARING": "Pushing overhead\nPressing overhead\nBench pressing\nRowing\nSnatching\nThrowing",
  "TOE TOUCH": "Deadlifts\nSplit Squats\nRunning and Step-ups",
  "UPPER BODY MOBILITY": "Overhead Pressing\nBench Pressing\nRowing and Snatching",
  "SQUAT": "Squatting Activities\nHip Hinging or Deadlifting\nOlympic Lifts and Plyometrics",
  "ROTATION": "Medicine Ball Throws\nCable Rotations\nSingle-Arm Snatches",
  "BALANCE & REACH": "Balancing\nSingle Leg Deadlifting\nSingle Limb Plyometrics"
};
const promskDescription = {
  "HEALTH": "This person likely has an underlying health issue that needs to be identified and treated by a licensed healthcare provider in order to resolve symptoms and improve their health and wellness. It is unlikely that they will advance beyond this category without professional medical intervention.",
  "WELLNESS": "This person needs to be under the supervision of a fitness, healthcare or nutritional specialist while focusing on improving their movement quality. It is unlikely that they will advance beyond this category without a professional intervention.",
  "FITNESS": "This person needs to avoid contraindicated exercises, and focus on improving their movement quality and progressing with individualized fitness goals. Working with a fitness professional will help this person make efficient progress.",
  "PERFORMANCE": "This person has passed Moveprint. Based on these results, they should continue to perform activities and exercise regimens, while continuing to monitor their health and wellness. If they wish to increase their activity level, we recommend they seek a fitness, performance or strength and conditioning professional for advanced testing and performance programming.",
  "BEHAVIORAL HEALTH": "This person may need to seek treatment from a qualified behavioral health specialist such as a licensed clinical psychologist or counselor. Advise them to set up a consultation with a behavioral health provider as soon as possible. If they are not sure where to go or how to access this type of professional, they should contact their primary care provider."
};
const promskFeatures = {
  "HEALTH": "Advise this person to seek a healthcare provider for a thorough musculoskeletal assessment and diagnosis to effectively resolve related symptoms and improve wellness.\nEnsure that the person completes their recommended daily flow exercises to improve movement quality.\nTemporarily reduce physical activity or use cautionary discretion when prescribing exercise to avoid exacerbating pain symptoms. Continuing to participate in physical activity while in the health category may increase the person's risk of developing a more serious musculoskeletal problem.",
  "WELLNESS": "Encourage the person to complete their recommended daily flow exercises.\nSet short-term and long-term fitness goals while taking note of the specific activities they should avoid.\nDiscuss nutritional wellness and, if needed, connect with a nutritional professional to help improve dietary needs and behaviors.",
  "FITNESS": "Complete their recommended daily flows and regularly recheck to ensure you are continuing to progress and do not have any set-backs.\nConnect with a fitness professional and discuss setting short-term and long-term fitness goals while taking note of the specific activities they should avoid.",
  "PERFORMANCE": "Consider educating this person about the other areas of wellness:\nPhysical\nEmotional\nSocial\nSpiritual\nIntellectual",
  "BEHAVIORAL HEALTH": "Advise this person to seek a consultation with a behavioral health provider as soon as possible."
};

const proClientSessionsCompleteDescription = "Your client has completed their movement flow program and ready to retest Moveprint. Encourage them to retest to see how much improvement they have made and continue to monitor their health and wellness."

async function getHealthImage(category) {
  if (category === "WELLNESS") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><g id="Group_2489" data-name="Group 2489" transform="translate(-2739 510)"><g id="Group_2485" data-name="Group 2485" transform="translate(2357 -1062)"><rect id="Rectangle_1515" data-name="Rectangle 1515" width="25" height="25" transform="translate(382 552)" fill="#fda200"/><g id="Group_2484" data-name="Group 2484" transform="translate(0 -1)"><text id="W" transform="translate(382 555)" fill="#fff" font-size="14" font-family="SukhumvitSet-Text, Sukhumvit Set"><tspan x="6.347" y="15">W</tspan></text></g> </g> </g></svg>',
      width: 10,
      alignment: 'center'
    }
  } else if (category === "HEALTH") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><g id="Group_2488" data-name="Group 2488" transform="translate(-2739 541)"><rect id="Rectangle_1510" data-name="Rectangle 1510" width="25" height="25" transform="translate(2739 -541)" fill="#dc0031"/><text id="H" transform="translate(2747 -539)" fill="#fff" font-size="14" font-family="SukhumvitSet-Text, Sukhumvit Set"><tspan x="0" y="15">H</tspan></text></g></svg>',
      width: 10,
      alignment: 'center'
    }
  } else if (category === "FITNESS") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><g id="Group_2486" data-name="Group 2486" transform="translate(-2681 541)"><rect id="Rectangle_1516" data-name="Rectangle 1516" width="25" height="25" transform="translate(2681 -541)" fill="#ffd200"/><text id="F" transform="translate(2690 -539)" fill="#fff" font-size="14" font-family="SukhumvitSet-Text, Sukhumvit Set"><tspan x="0" y="15">F</tspan></text></g></svg>',
      width: 10,
      alignment: 'center'
    }
  } else if (category === "BEHAVIORAL HEALTH") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><g id="Group_2488" data-name="Group 2488" transform="translate(-2739 541)"><rect id="Rectangle_1510" data-name="Rectangle 1510" width="25" height="25" transform="translate(2739 -541)" fill="#dc0031"/><text id="H" transform="translate(2747 -539)" fill="#fff" font-size="14" font-family="SukhumvitSet-Text, Sukhumvit Set"><tspan x="0" y="15">H</tspan></text></g></svg>',
      width: 10,
      alignment: 'center'
    }
  }
  else if (category === "PERFORMANCE") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><g id="Group_2487" data-name="Group 2487" transform="translate(-2712 541)"><rect id="Rectangle_1517" data-name="Rectangle 1517" width="25" height="25" transform="translate(2712 -541)" fill="#6fb93c"/><text id="P" transform="translate(2721 -539)" fill="#fff" font-size="14" font-family="SukhumvitSet-Text, Sukhumvit Set"><tspan x="0" y="15">P</tspan></text></g></svg>',
      width: 10,
      alignment: 'center'
    }
  }


}

async function getmskCategoryImage(category) {
  if (category === "WELLNESS") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="1165" height="142" viewBox="0 0 1165 142">   <g id="Group_2932" data-name="Group 2932" transform="translate(-14212 1852)">     <rect id="Rectangle_1861" data-name="Rectangle 1861" width="294" height="127" transform="translate(14212 -1845)" fill="none"/>     <rect id="Rectangle_1862" data-name="Rectangle 1862" width="294" height="142" transform="translate(14502 -1852)" fill="none"/>     <rect id="Rectangle_1863" data-name="Rectangle 1863" width="295" height="142" transform="translate(14792 -1852)" fill="none"/>     <rect id="Rectangle_1864" data-name="Rectangle 1864" width="297" height="142" transform="translate(15080 -1852)" fill="none"/>     <g id="Polygon_9" data-name="Polygon 9" transform="translate(14385 -1755) rotate(180)" fill="#f9f9f9">       <path d="M 59.14243698120117 52.5 L 0.8575639724731445 52.5 L 30 1.015029668807983 L 59.14243698120117 52.5 Z" stroke="none"/>       <path d="M 30 2.030059814453125 L 1.715126037597656 52 L 58.28487396240234 52 L 30 2.030059814453125 M 30 0 L 60 53 L 0 53 L 30 0 Z" stroke="none" fill="#f9f9f9"/>     </g>     <rect id="Rectangle_1865" data-name="Rectangle 1865" width="290" height="142" transform="translate(14212 -1852)" fill="#fff"/>     <rect id="Rectangle_1866" data-name="Rectangle 1866" width="290" height="142" transform="translate(14502 -1852)" fill="#fbc698"/>     <rect id="Rectangle_1867" data-name="Rectangle 1867" width="288" height="142" transform="translate(14792 -1852)" fill="#fff"/>     <rect id="Rectangle_1868" data-name="Rectangle 1868" width="297" height="142" transform="translate(15080 -1852)" fill="#fff"/>     <text id="HEALTH" transform="translate(14356 -1771)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-56.32" y="0">HEALTH</tspan></text>     <text id="WELLNESS" transform="translate(14643 -1771)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-76.944" y="0">WELLNESS</tspan></text>     <text id="FITNESS" transform="translate(14933 -1771)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-58.144" y="0">FITNESS</tspan></text>     <text id="PERFORMANCE" transform="translate(15229 -1771)" fill="#192226" font-size="33" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-112.53" y="0">PERFORMANCE</tspan></text>     <rect id="Rectangle_1869" data-name="Rectangle 1869" width="294" height="142" transform="translate(14212 -1852)" fill="none"/>     <rect id="Rectangle_1870" data-name="Rectangle 1870" width="294" height="142" transform="translate(14502 -1852)" fill="none"/>     <rect id="Rectangle_1871" data-name="Rectangle 1871" width="295" height="142" transform="translate(14792 -1852)" fill="none"/>     <rect id="Rectangle_1872" data-name="Rectangle 1872" width="297" height="142" transform="translate(15080 -1852)" fill="none"/>     <g id="Rectangle_1873" data-name="Rectangle 1873" transform="translate(14496 -1852)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1874" data-name="Rectangle 1874" transform="translate(14786 -1852)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1875" data-name="Rectangle 1875" transform="translate(15076 -1852)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="11" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="10" height="141" fill="none"/>     </g>   </g> </svg>',
      width: 200,
      alignment: 'left'
    }
  } else if (category === "HEALTH") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="1165" height="142" viewBox="0 0 1165 142">   <g id="Group_2931" data-name="Group 2931" transform="translate(-14212 2079)">     <rect id="Rectangle_1861" data-name="Rectangle 1861" width="294" height="128" transform="translate(14212 -2072)" fill="none"/>     <rect id="Rectangle_1862" data-name="Rectangle 1862" width="294" height="142" transform="translate(14502 -2079)" fill="none"/>     <rect id="Rectangle_1863" data-name="Rectangle 1863" width="295" height="142" transform="translate(14792 -2079)" fill="none"/>     <rect id="Rectangle_1864" data-name="Rectangle 1864" width="297" height="128" transform="translate(15080 -2072)" fill="none"/>     <g id="Polygon_9" data-name="Polygon 9" transform="translate(14385 -1981) rotate(180)" fill="#f9f9f9">       <path d="M 59.15024185180664 53.5 L 0.8497577905654907 53.5 L 30 1.029564023017883 L 59.15024185180664 53.5 Z" stroke="none"/>       <path d="M 30 2.059127807617188 L 1.699516296386719 53 L 58.30048370361328 53 L 30 2.059127807617188 M 30 0 L 60 54 L 0 54 L 30 0 Z" stroke="none" fill="#f9f9f9"/>     </g>     <rect id="Rectangle_1865" data-name="Rectangle 1865" width="290" height="142" transform="translate(14212 -2079)" fill="#ee93a1"/>     <rect id="Rectangle_1866" data-name="Rectangle 1866" width="290" height="142" transform="translate(14502 -2079)" fill="#fff"/>     <rect id="Rectangle_1867" data-name="Rectangle 1867" width="288" height="142" transform="translate(14792 -2079)" fill="#fff"/>     <rect id="Rectangle_1868" data-name="Rectangle 1868" width="297" height="142" transform="translate(15080 -2079)" fill="#fff"/>     <text id="HEALTH" transform="translate(14356 -1998)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-56.32" y="0">HEALTH</tspan></text>     <text id="WELLNESS" transform="translate(14643 -1998)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-76.944" y="0">WELLNESS</tspan></text>     <text id="FITNESS" transform="translate(14933 -1998)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-58.144" y="0">FITNESS</tspan></text>     <text id="PERFORMANCE" transform="translate(15229 -1998)" fill="#192226" font-size="33" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-112.53" y="0">PERFORMANCE</tspan></text>     <rect id="Rectangle_1869" data-name="Rectangle 1869" width="294" height="142" transform="translate(14212 -2079)" fill="none"/>     <rect id="Rectangle_1870" data-name="Rectangle 1870" width="294" height="142" transform="translate(14502 -2079)" fill="none"/>     <rect id="Rectangle_1871" data-name="Rectangle 1871" width="295" height="142" transform="translate(14792 -2079)" fill="none"/>     <rect id="Rectangle_1872" data-name="Rectangle 1872" width="297" height="142" transform="translate(15080 -2079)" fill="none"/>     <g id="Rectangle_1873" data-name="Rectangle 1873" transform="translate(14496 -2079)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1874" data-name="Rectangle 1874" transform="translate(14786 -2079)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1875" data-name="Rectangle 1875" transform="translate(15076 -2079)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="11" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="10" height="141" fill="none"/>     </g>   </g> </svg>',
      width: 200,
      alignment: 'left'
    }
  } else if (category === "FITNESS") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="1165" height="142" viewBox="0 0 1165 142">   <g id="Group_2933" data-name="Group 2933" transform="translate(-14212 1626)">     <rect id="Rectangle_1861" data-name="Rectangle 1861" width="294" height="128" transform="translate(14212 -1619)" fill="none"/>     <rect id="Rectangle_1862" data-name="Rectangle 1862" width="294" height="142" transform="translate(14502 -1626)" fill="none"/>     <rect id="Rectangle_1863" data-name="Rectangle 1863" width="295" height="142" transform="translate(14792 -1626)" fill="none"/>     <rect id="Rectangle_1864" data-name="Rectangle 1864" width="297" height="142" transform="translate(15080 -1626)" fill="none"/>     <rect id="Rectangle_1865" data-name="Rectangle 1865" width="290" height="142" transform="translate(14212 -1626)" fill="#fff"/>     <rect id="Rectangle_1866" data-name="Rectangle 1866" width="290" height="142" transform="translate(14502 -1626)" fill="#fff"/>     <rect id="Rectangle_1867" data-name="Rectangle 1867" width="288" height="142" transform="translate(14792 -1626)" fill="#feda86"/>     <rect id="Rectangle_1868" data-name="Rectangle 1868" width="297" height="142" transform="translate(15080 -1626)" fill="#fff"/>     <text id="HEALTH" transform="translate(14356 -1545)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-56.32" y="0">HEALTH</tspan></text>     <text id="WELLNESS" transform="translate(14643 -1545)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-76.944" y="0">WELLNESS</tspan></text>     <text id="FITNESS" transform="translate(14933 -1545)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-58.144" y="0">FITNESS</tspan></text>     <text id="PERFORMANCE" transform="translate(15229 -1545)" fill="#192226" font-size="33" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-112.53" y="0">PERFORMANCE</tspan></text>     <rect id="Rectangle_1869" data-name="Rectangle 1869" width="294" height="142" transform="translate(14212 -1626)" fill="none"/>     <rect id="Rectangle_1870" data-name="Rectangle 1870" width="294" height="142" transform="translate(14502 -1626)" fill="none"/>     <rect id="Rectangle_1871" data-name="Rectangle 1871" width="295" height="142" transform="translate(14792 -1626)" fill="none"/>     <rect id="Rectangle_1872" data-name="Rectangle 1872" width="297" height="142" transform="translate(15080 -1626)" fill="none"/>     <g id="Rectangle_1873" data-name="Rectangle 1873" transform="translate(14496 -1626)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1874" data-name="Rectangle 1874" transform="translate(14786 -1626)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1875" data-name="Rectangle 1875" transform="translate(15076 -1626)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="11" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="10" height="141" fill="none"/>     </g>   </g> </svg>',
      width: 200,
      alignment: 'left'
    }
  } else if (category === "BEHAVIORAL HEALTH") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="1165" height="142" viewBox="0 0 1165 142">   <g id="Group_2931" data-name="Group 2931" transform="translate(-14212 2079)">     <rect id="Rectangle_1861" data-name="Rectangle 1861" width="294" height="128" transform="translate(14212 -2072)" fill="none"/>     <rect id="Rectangle_1862" data-name="Rectangle 1862" width="294" height="142" transform="translate(14502 -2079)" fill="none"/>     <rect id="Rectangle_1863" data-name="Rectangle 1863" width="295" height="142" transform="translate(14792 -2079)" fill="none"/>     <rect id="Rectangle_1864" data-name="Rectangle 1864" width="297" height="128" transform="translate(15080 -2072)" fill="none"/>     <g id="Polygon_9" data-name="Polygon 9" transform="translate(14385 -1981) rotate(180)" fill="#f9f9f9">       <path d="M 59.15024185180664 53.5 L 0.8497577905654907 53.5 L 30 1.029564023017883 L 59.15024185180664 53.5 Z" stroke="none"/>       <path d="M 30 2.059127807617188 L 1.699516296386719 53 L 58.30048370361328 53 L 30 2.059127807617188 M 30 0 L 60 54 L 0 54 L 30 0 Z" stroke="none" fill="#f9f9f9"/>     </g>     <rect id="Rectangle_1865" data-name="Rectangle 1865" width="290" height="142" transform="translate(14212 -2079)" fill="#ee93a1"/>     <rect id="Rectangle_1866" data-name="Rectangle 1866" width="290" height="142" transform="translate(14502 -2079)" fill="#fff"/>     <rect id="Rectangle_1867" data-name="Rectangle 1867" width="288" height="142" transform="translate(14792 -2079)" fill="#fff"/>     <rect id="Rectangle_1868" data-name="Rectangle 1868" width="297" height="142" transform="translate(15080 -2079)" fill="#fff"/>     <text id="HEALTH" transform="translate(14356 -1998)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-56.32" y="0">HEALTH</tspan></text>     <text id="WELLNESS" transform="translate(14643 -1998)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-76.944" y="0">WELLNESS</tspan></text>     <text id="FITNESS" transform="translate(14933 -1998)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-58.144" y="0">FITNESS</tspan></text>     <text id="PERFORMANCE" transform="translate(15229 -1998)" fill="#192226" font-size="33" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-112.53" y="0">PERFORMANCE</tspan></text>     <rect id="Rectangle_1869" data-name="Rectangle 1869" width="294" height="142" transform="translate(14212 -2079)" fill="none"/>     <rect id="Rectangle_1870" data-name="Rectangle 1870" width="294" height="142" transform="translate(14502 -2079)" fill="none"/>     <rect id="Rectangle_1871" data-name="Rectangle 1871" width="295" height="142" transform="translate(14792 -2079)" fill="none"/>     <rect id="Rectangle_1872" data-name="Rectangle 1872" width="297" height="142" transform="translate(15080 -2079)" fill="none"/>     <g id="Rectangle_1873" data-name="Rectangle 1873" transform="translate(14496 -2079)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1874" data-name="Rectangle 1874" transform="translate(14786 -2079)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="141" fill="none"/>     </g>     <g id="Rectangle_1875" data-name="Rectangle 1875" transform="translate(15076 -2079)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="11" height="142" stroke="none"/>       <rect x="0.5" y="0.5" width="10" height="141" fill="none"/>     </g>   </g> </svg>',
      width: 200,
      alignment: 'left'
    }
  } else if (category === "PERFORMANCE") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="1165" height="144" viewBox="0 0 1165 144">   <g id="Group_2934" data-name="Group 2934" transform="translate(-14212 1402)">     <rect id="Rectangle_1861" data-name="Rectangle 1861" width="294" height="130" transform="translate(14212 -1395)" fill="none"/>     <rect id="Rectangle_1862" data-name="Rectangle 1862" width="294" height="144" transform="translate(14502 -1402)" fill="none"/>     <rect id="Rectangle_1863" data-name="Rectangle 1863" width="295" height="144" transform="translate(14792 -1402)" fill="none"/>     <rect id="Rectangle_1864" data-name="Rectangle 1864" width="297" height="144" transform="translate(15080 -1402)" fill="none"/>     <g id="Polygon_9" data-name="Polygon 9" transform="translate(14385 -1303) rotate(180)" fill="#f9f9f9">       <path d="M 59.15024185180664 53.5 L 0.8497577905654907 53.5 L 30 1.029565930366516 L 59.15024185180664 53.5 Z" stroke="none"/>       <path d="M 30 2.059131622314453 L 1.699516296386719 53 L 58.30048370361328 53 L 30 2.059131622314453 M 30 3.814697265625e-06 L 60 54 L 0 54 L 30 3.814697265625e-06 Z" stroke="none" fill="#f9f9f9"/>     </g>     <rect id="Rectangle_1865" data-name="Rectangle 1865" width="290" height="144" transform="translate(14212 -1402)" fill="#fff"/>     <rect id="Rectangle_1866" data-name="Rectangle 1866" width="290" height="144" transform="translate(14502 -1402)" fill="#fff"/>     <rect id="Rectangle_1867" data-name="Rectangle 1867" width="288" height="144" transform="translate(14792 -1402)" fill="#fff"/>     <rect id="Rectangle_1868" data-name="Rectangle 1868" width="297" height="144" transform="translate(15080 -1402)" fill="#bed6a7"/>     <text id="HEALTH" transform="translate(14356 -1320)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-56.32" y="0">HEALTH</tspan></text>     <text id="WELLNESS" transform="translate(14643 -1320)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-76.944" y="0">WELLNESS</tspan></text>     <text id="FITNESS" transform="translate(14933 -1320)" fill="#192226" font-size="32" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-58.144" y="0">FITNESS</tspan></text>     <text id="PERFORMANCE" transform="translate(15229 -1320)" fill="#192226" font-size="33" font-family="SukhumvitSet-Bold, Sukhumvit Set" font-weight="700"><tspan x="-112.53" y="0">PERFORMANCE</tspan></text>     <rect id="Rectangle_1869" data-name="Rectangle 1869" width="294" height="144" transform="translate(14212 -1402)" fill="none"/>     <rect id="Rectangle_1870" data-name="Rectangle 1870" width="294" height="144" transform="translate(14502 -1402)" fill="none"/>     <rect id="Rectangle_1871" data-name="Rectangle 1871" width="295" height="144" transform="translate(14792 -1402)" fill="none"/>     <rect id="Rectangle_1872" data-name="Rectangle 1872" width="297" height="144" transform="translate(15080 -1402)" fill="none"/>     <g id="Rectangle_1873" data-name="Rectangle 1873" transform="translate(14496 -1402)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="144" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="143" fill="none"/>     </g>     <g id="Rectangle_1874" data-name="Rectangle 1874" transform="translate(14786 -1402)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="10" height="144" stroke="none"/>       <rect x="0.5" y="0.5" width="9" height="143" fill="none"/>     </g>     <g id="Rectangle_1875" data-name="Rectangle 1875" transform="translate(15076 -1402)" fill="#f9f9f9" stroke="#f9f9f9" stroke-width="1">       <rect width="11" height="144" stroke="none"/>       <rect x="0.5" y="0.5" width="10" height="143" fill="none"/>     </g>   </g> </svg>',
      width: 200,
      alignment: 'left'
    }
  }


}

async function getFocusImage(focus) {
  if (focus === "TOE TOUCH") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="77" viewBox="0 0 78 77"> 					<g id="Group_2462" data-name="Group 2462" transform="translate(-36 -349)"> 						<g id="Group_2454" data-name="Group 2454"> 							<g id="Group_2449" data-name="Group 2449"> 								<rect id="Rectangle_4" data-name="Rectangle 4" width="78" height="77" 									transform="translate(36 349)" fill="#fff" /> 							</g> 						</g> 						<g id="Group_2461" data-name="Group 2461" transform="translate(55.738 366)"> 							<g id="Group_479" data-name="Group 479" transform="translate(0 0)"> 								<path id="Path_617" data-name="Path 617" 									d="M8.214,3.046a56.792,56.792,0,0,1,7.167,0c7.972.989,14.021,3.354,14.964,4,3.286,1.839,5.958,7.389,6.112,8.386s.359.778.247,1.617c.751,1.126,3.464.222,5.152,1.4,1.231.962,2.587,2.483,2.083,5.92-.482,4.251-4.385,4.092-5.207,4.111-1.072.016-2.631-1.151-2.905-1.151a11.507,11.507,0,0,1-2.412,0s-.31,2.631-.493,3.344.639,2.118.329,3.892-1.694,4.919-2.028,6.906-.767,4.549-.767,4.549-.323,3.037-.274,3.344a3.606,3.606,0,0,1,.164,1.041,11.493,11.493,0,0,1-1.277,1.768,1.271,1.271,0,0,1-.247.493.681.681,0,0,1-.74,0c-.2.288-.576,0-.576,0a.541.541,0,0,1-.74,0,.818.818,0,0,1-.987,0l-5.714-.329s-3.042-.123-3.289-.781.263-1.584.164-2.343A16.974,16.974,0,0,0,16,45.059c-.839-2.587-2.3-6.618-2.343-9.291S13.118,31.7,13.2,30.3a8.621,8.621,0,0,0-.5-2.976,19.035,19.035,0,0,1-6.468-9.866C1.7,10.257,2.545,5.752,4.737,4.07V3.789l.909-.353ZM19.109,32.671c-.036.776.225,6.479.274,7.619.09,4.98,1.954,7.227,2.8,8.14,1.516,1.335,5.865,2.96,5.865,2.96l.274-.2.11-1.022s-.019.17-.255,0c-.348-.274.129-1.006.129-1.006L28.63,47.7l-.173-.145s-.058.2-.11.384-.521.493-.521.493-.458.419-.795.274-.219-1.178-.219-1.178l1.425-3.152s.217-.713.411-1.343a26.706,26.706,0,0,0,0-3.974,20.533,20.533,0,0,1,.137-5.618c.266-1.033-.1-4.865,0-5.673S30.1,21.684,30.1,21.684s.556-2.562.255-2.856c-.019-.069-.195-.321-.995-.14-1.326.3-6.331-1.8-6.331-1.8s-6.186-2.146-7.126-1.973c-.266.211-.277.882-.3,1.206.474,1.927,2.99,7.575,3.015,8.934S19,27.8,19,29,19.145,31.893,19.109,32.671Z" 									transform="translate(-0.078 -2.935)" fill="#000" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_618" data-name="Path 618" 									d="M304.183,554.3a10.33,10.33,0,0,1,.274,3.508c-.274,1.288-2.357,4.083-2.357,5.7" 									transform="translate(-268.763 -539.116)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_619" data-name="Path 619" 									d="M490.9,488.3a12.472,12.472,0,0,1,1.315,2.357,8.24,8.24,0,0,0-.575,3.015" 									transform="translate(-461.619 -474.925)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_620" data-name="Path 620" 									d="M577.147,1760.9a4.711,4.711,0,0,0-.236,1.478" 									transform="translate(-548.908 -1712.648)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_621" data-name="Path 621" 									d="M304.183,554.3a10.33,10.33,0,0,1,.274,3.508c-.274,1.288-2.357,4.083-2.357,5.7" 									transform="translate(-268.763 -539.116)" fill="none" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_622" data-name="Path 622" 									d="M490.9,488.3a12.472,12.472,0,0,1,1.315,2.357,8.24,8.24,0,0,0-.575,3.015" 									transform="translate(-461.619 -474.925)" fill="none" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_624" data-name="Path 624" 									d="M918.923,73.044c-.287.178-.375.844-.438,1.162.249,1.971-.348,7.586-.48,8.94s.066,2.777-.071,3.967-1,2.8-1.129,3.567-.52,6.462-.6,7.6c-.479,4.956,1.113,7.021,1.842,8.024,1.354,1.5,5.486,2.242,5.486,2.242l.93.894a1.252,1.252,0,0,1-.3.461.672.672,0,0,1-.734-.085c-.236.26-.573-.066-.573-.066a.539.539,0,0,1-.735-.085,2.746,2.746,0,0,1-.981.436l-5.637-.049s-3.007-.2-3.177-.88.441-1.543.433-2.308a16.942,16.942,0,0,0-.463-4.236c-.537-2.667-1.526-6.84-1.261-9.5a46.615,46.615,0,0,1,1-5.39,8.661,8.661,0,0,0-.159-3.016,34.328,34.328,0,0,1-2.842-10.264c-4.911-10.278,3.326-13.1,3.326-13.1" 									transform="translate(-907.5 -60.382)" fill="#000" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_623" data-name="Path 623" 									d="M577.147,1760.9a4.711,4.711,0,0,0-.236,1.478" 									transform="translate(-548.908 -1712.648)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 							</g> 						</g> 					</g> 				</svg>',
      height: 20,
      width: 20
    }
  } else if (focus === "UPPER BODY MOBILITY") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="77" viewBox="0 0 78 77"> 					<g id="Group_2452" data-name="Group 2452" transform="translate(-36 -431)"> 						<rect id="Rectangle_6" data-name="Rectangle 6" width="78" height="77" 							transform="translate(36 431)" fill="#fff" /> 						<g id="Layer_3" transform="translate(56.621 445)"> 							<g id="Group_481" data-name="Group 481" transform="translate(0 0)"> 								<path id="Path_961" data-name="Path 961" 									d="M126.315,65.129s2.038,9.513,2.038,11.857a20.763,20.763,0,0,1-1.559,8.727,1.751,1.751,0,0,1-1.853.945c-1.092-.123-4.186-2.614-4.186-2.614s1.166,3.032,1.019,4.112a2.335,2.335,0,0,1-.651,1.485l-.331.54a.807.807,0,0,1,.147.479c.331.184.258.687.258.687H99.017a.55.55,0,0,1-.074-.5,2.1,2.1,0,0,1,.368-.5.523.523,0,0,1-.147-.405.513.513,0,0,1,.221-.331,6.734,6.734,0,0,1-.835-1.633,4.145,4.145,0,0,1-.074-1.019l-.074-12s-.172-1.142-.295-3.2c-.012-1.866.147-3.412.147-3.412a2.993,2.993,0,0,0-.037-1.056,11.319,11.319,0,0,0-.8-2,13.7,13.7,0,0,1-1.448-3.056c-.454-1.583-1.3-5.892-1.6-7.242s-1.976-7.033-2.185-7.745-.761-3.019.184-4.5a6.243,6.243,0,0,1,1.387-1.019A6.475,6.475,0,0,1,97.8,41.1a10.155,10.155,0,0,1,4.075,2.369l2.332,2.3a2.327,2.327,0,0,1,.295-.835c1.473-2.983,5.487-2.8,5.487-2.8a5.464,5.464,0,0,1,5.413,4.259,10.192,10.192,0,0,1-.147,3.388s.417-.516.687-.331.295.54.184.982-.945,2.332-.945,2.332-.356,1.3-.761,1.35a.519.519,0,0,1-.54-.295,10.055,10.055,0,0,0-.331,2.038,3.573,3.573,0,0,0,.368,1.89,2.507,2.507,0,0,0,1.092.835s.1-.184.442-.184,8.506,3.5,9.488,4.333A5.31,5.31,0,0,1,126.315,65.129Z" 									transform="translate(-91.706 -40.855)" fill="#000" /> 								<path id="Path_962" data-name="Path 962" 									d="M97.96,90.573a.751.751,0,0,1-.086-.663,2.907,2.907,0,0,1,.307-.454.624.624,0,0,1-.1-.417.7.7,0,0,1,.16-.331,6.061,6.061,0,0,1-.786-1.571,5.142,5.142,0,0,1-.074-1.056L97.309,74.1c-.025-.123-.184-1.264-.295-3.2v-.012c-.012-1.866.147-3.425.147-3.437v-.012a2.674,2.674,0,0,0-.037-.994,10.227,10.227,0,0,0-.712-1.8c-.025-.061-.049-.11-.074-.16-.049-.1-.135-.245-.245-.43A10.942,10.942,0,0,1,94.879,61.4c-.331-1.166-.859-3.719-1.252-5.6-.135-.687-.258-1.289-.344-1.657-.184-.822-.945-3.51-2.136-7.586L91.1,46.41c-.209-.687-.8-3.081.2-4.64v-.012a6.049,6.049,0,0,1,1.436-1.068,6.481,6.481,0,0,1,4.149-.638,10.141,10.141,0,0,1,4.149,2.406l2.111,2.087a3.037,3.037,0,0,1,.245-.589,5.141,5.141,0,0,1,3.4-2.6,8.054,8.054,0,0,1,2.234-.282,6.247,6.247,0,0,1,2.406.491,5.279,5.279,0,0,1,3.179,3.891v.012a10.22,10.22,0,0,1-.049,2.97.51.51,0,0,1,.528-.025c.307.2.381.589.245,1.154-.1.43-.871,2.173-.945,2.344-.1.331-.43,1.387-.9,1.448a.668.668,0,0,1-.479-.11,9.8,9.8,0,0,0-.245,1.694,3.389,3.389,0,0,0,.344,1.8,2.155,2.155,0,0,0,.908.712.709.709,0,0,1,.479-.147c.282,0,3.2,1.252,4.578,1.866a41.394,41.394,0,0,1,5.02,2.5,5.521,5.521,0,0,1,1.436,2.516h0c.086.393,2.038,9.562,2.038,11.894a20.824,20.824,0,0,1-1.583,8.8l-.012.012-.037.049a1.876,1.876,0,0,1-1.988.982c-.871-.1-2.9-1.6-3.805-2.3a11.694,11.694,0,0,1,.822,3.645,2.564,2.564,0,0,1-.687,1.571l-.258.43a1.17,1.17,0,0,1,.11.393.942.942,0,0,1,.258.8l-.025.135H98Zm21.922-.7-.086-.049.012-.1a.588.588,0,0,0-.11-.356l-.074-.086.38-.638.012-.025.025-.012a2.225,2.225,0,0,0,.589-1.387c.135-1.031-.994-4-1.007-4.026l-.221-.565.479.381c.847.675,3.24,2.479,4.1,2.578a1.568,1.568,0,0,0,1.682-.847l.012-.012a20.376,20.376,0,0,0,1.547-8.641c0-2.3-1.988-11.6-2.038-11.82a5.234,5.234,0,0,0-1.326-2.344,35.875,35.875,0,0,0-4.873-2.418c-2.283-1.006-4.3-1.829-4.517-1.866a.357.357,0,0,0-.282.1l-.049.135-.16-.061A2.589,2.589,0,0,1,112.8,56.9a3.768,3.768,0,0,1-.381-1.976,10.234,10.234,0,0,1,.331-2.074l.123-.466.184.442a.33.33,0,0,0,.368.2c.16-.025.442-.589.626-1.227l.012-.025c0-.012.822-1.878.933-2.3.037-.16.16-.626-.11-.81-.1-.061-.344.135-.479.295l-.466.565.184-.712a9.509,9.509,0,0,0,.147-3.314,5.236,5.236,0,0,0-1.215-2.43,5.112,5.112,0,0,0-1.755-1.215,6.119,6.119,0,0,0-2.283-.479h0a7.836,7.836,0,0,0-2.148.282,4.727,4.727,0,0,0-3.191,2.43V44.1a2.227,2.227,0,0,0-.27.773l-.037.344-2.565-2.541a10.108,10.108,0,0,0-3.989-2.32,6.346,6.346,0,0,0-3.916.6,5.926,5.926,0,0,0-1.326.97c-.908,1.448-.356,3.707-.16,4.37l.049.147c1.215,4.136,1.952,6.775,2.136,7.61.074.368.2.97.344,1.657.393,1.878.921,4.431,1.252,5.573a10.736,10.736,0,0,0,1.191,2.578c.11.184.209.344.258.454a.818.818,0,0,1,.074.147,10.131,10.131,0,0,1,.736,1.878,3.119,3.119,0,0,1,.037,1.117c-.012.11-.16,1.608-.147,3.388.123,2.025.295,3.167.295,3.179v.012l.074,12.017v.025a4.534,4.534,0,0,0,.074.97,6.5,6.5,0,0,0,.81,1.571l.1.147-.147.086a.451.451,0,0,0-.147.221.364.364,0,0,0,.1.258l.11.11-.11.11a1.665,1.665,0,0,0-.331.454.335.335,0,0,0,.012.27h21.885A.585.585,0,0,0,119.882,89.873Z" 									transform="translate(-90.734 -39.933)" fill="none" /> 								<g id="Layer_3-2" data-name="Layer_3"> 									<g id="Group_481-2" data-name="Group 481" transform="translate(0 0)"> 										<path id="Path_961-2" data-name="Path 961" 											d="M126.315,65.129s2.038,9.513,2.038,11.857a20.763,20.763,0,0,1-1.559,8.727,1.751,1.751,0,0,1-1.853.945c-1.092-.123-4.186-2.614-4.186-2.614s1.166,3.032,1.019,4.112a2.335,2.335,0,0,1-.651,1.485l-.331.54a.807.807,0,0,1,.147.479c.331.184.258.687.258.687H99.017a.55.55,0,0,1-.074-.5,2.1,2.1,0,0,1,.368-.5.523.523,0,0,1-.147-.405.513.513,0,0,1,.221-.331,6.734,6.734,0,0,1-.835-1.632,4.144,4.144,0,0,1-.074-1.019l-.074-12s-.172-1.142-.295-3.2c-.012-1.866.147-3.412.147-3.412a2.994,2.994,0,0,0-.037-1.056,11.319,11.319,0,0,0-.8-2,13.7,13.7,0,0,1-1.448-3.056c-.454-1.583-1.3-5.892-1.6-7.242s-1.976-7.033-2.185-7.745-.761-3.019.184-4.5a6.243,6.243,0,0,1,1.387-1.019A6.475,6.475,0,0,1,97.8,41.1a10.155,10.155,0,0,1,4.075,2.369l2.332,2.3a2.327,2.327,0,0,1,.295-.835c1.473-2.983,5.487-2.8,5.487-2.8a5.464,5.464,0,0,1,5.413,4.259,10.191,10.191,0,0,1-.147,3.388s.417-.516.687-.331.295.54.184.982-.945,2.332-.945,2.332-.356,1.3-.761,1.35a.519.519,0,0,1-.54-.295,10.056,10.056,0,0,0-.331,2.038,3.573,3.573,0,0,0,.368,1.89,2.507,2.507,0,0,0,1.092.835s.1-.184.442-.184,8.506,3.5,9.488,4.333A5.31,5.31,0,0,1,126.315,65.129Z" 											transform="translate(-91.706 -40.855)" fill="#000" /> 										<path id="Path_962-2" data-name="Path 962" 											d="M97.96,90.573a.751.751,0,0,1-.086-.663,2.909,2.909,0,0,1,.307-.454.624.624,0,0,1-.1-.417.7.7,0,0,1,.16-.331,6.061,6.061,0,0,1-.786-1.571,5.142,5.142,0,0,1-.074-1.056L97.309,74.1c-.025-.123-.184-1.264-.295-3.2v-.012c-.012-1.866.147-3.425.147-3.437v-.012a2.674,2.674,0,0,0-.037-.994,10.227,10.227,0,0,0-.712-1.8c-.025-.061-.049-.11-.074-.16-.049-.1-.135-.245-.245-.43A10.942,10.942,0,0,1,94.879,61.4c-.331-1.166-.859-3.719-1.252-5.6-.135-.687-.258-1.289-.344-1.657-.184-.822-.945-3.51-2.136-7.586L91.1,46.41c-.209-.687-.8-3.081.2-4.64v-.012a6.048,6.048,0,0,1,1.436-1.068,6.481,6.481,0,0,1,4.149-.638,10.141,10.141,0,0,1,4.149,2.406l2.111,2.087a3.038,3.038,0,0,1,.245-.589,5.141,5.141,0,0,1,3.4-2.6,8.054,8.054,0,0,1,2.234-.282,6.247,6.247,0,0,1,2.406.491,5.279,5.279,0,0,1,3.179,3.891v.012a10.219,10.219,0,0,1-.049,2.97.51.51,0,0,1,.528-.025c.307.2.381.589.245,1.154-.1.43-.871,2.173-.945,2.344-.1.331-.43,1.387-.9,1.448a.668.668,0,0,1-.479-.11,9.8,9.8,0,0,0-.245,1.694,3.389,3.389,0,0,0,.344,1.8,2.155,2.155,0,0,0,.908.712.709.709,0,0,1,.479-.147c.282,0,3.2,1.252,4.578,1.866a41.393,41.393,0,0,1,5.02,2.5,5.521,5.521,0,0,1,1.436,2.516h0c.086.393,2.038,9.562,2.038,11.894a20.824,20.824,0,0,1-1.583,8.8l-.012.012-.037.049a1.876,1.876,0,0,1-1.988.982c-.871-.1-2.9-1.6-3.805-2.3a11.694,11.694,0,0,1,.822,3.645,2.564,2.564,0,0,1-.687,1.571l-.258.43a1.17,1.17,0,0,1,.11.393.942.942,0,0,1,.258.8l-.025.135H98Zm21.922-.7-.086-.049.012-.1a.588.588,0,0,0-.11-.356l-.074-.086.381-.638.012-.025.025-.012a2.225,2.225,0,0,0,.589-1.387c.135-1.031-.994-4-1.007-4.026l-.221-.565.479.381c.847.675,3.24,2.479,4.1,2.578a1.568,1.568,0,0,0,1.682-.847l.012-.012a20.376,20.376,0,0,0,1.547-8.641c0-2.3-1.988-11.6-2.038-11.82a5.234,5.234,0,0,0-1.326-2.344,35.877,35.877,0,0,0-4.873-2.418c-2.283-1.006-4.3-1.829-4.517-1.866a.357.357,0,0,0-.282.1l-.049.135-.16-.061A2.59,2.59,0,0,1,112.8,56.9a3.768,3.768,0,0,1-.381-1.976,10.233,10.233,0,0,1,.331-2.074l.123-.466.184.442a.33.33,0,0,0,.368.2c.16-.025.442-.589.626-1.227l.012-.025c0-.012.822-1.878.933-2.3.037-.16.16-.626-.11-.81-.1-.061-.344.135-.479.295l-.466.565.184-.712a9.509,9.509,0,0,0,.147-3.314,5.236,5.236,0,0,0-1.215-2.43,5.111,5.111,0,0,0-1.755-1.215,6.119,6.119,0,0,0-2.283-.479h0a7.836,7.836,0,0,0-2.148.282,4.727,4.727,0,0,0-3.191,2.43V44.1a2.227,2.227,0,0,0-.27.773l-.037.344-2.565-2.541a10.108,10.108,0,0,0-3.989-2.32,6.346,6.346,0,0,0-3.916.6,5.926,5.926,0,0,0-1.326.97c-.908,1.448-.356,3.707-.16,4.37l.049.147c1.215,4.136,1.952,6.775,2.136,7.61.074.368.2.97.344,1.657.393,1.878.921,4.431,1.252,5.573a10.735,10.735,0,0,0,1.191,2.578c.11.184.209.344.258.454a.818.818,0,0,1,.074.147,10.131,10.131,0,0,1,.736,1.878,3.119,3.119,0,0,1,.037,1.117c-.012.11-.16,1.608-.147,3.388.123,2.025.295,3.167.295,3.179v.012l.074,12.017v.025a4.533,4.533,0,0,0,.074.97,6.5,6.5,0,0,0,.81,1.571l.1.147-.147.086a.451.451,0,0,0-.147.221.364.364,0,0,0,.1.258l.11.11-.11.11a1.665,1.665,0,0,0-.331.454.335.335,0,0,0,.012.27h21.885A.585.585,0,0,0,119.882,89.873Z" 											transform="translate(-90.734 -39.933)" fill="none" /> 									</g> 									<g id="Group_482" data-name="Group 482" transform="translate(4.599 3.838)"> 										<path id="Path_963" data-name="Path 963" 											d="M140.131,90.078a3.427,3.427,0,0,1-.565-1.142l-.258-1.3a3.093,3.093,0,0,1-.528-.344c-.16-.135-.295-.749-.626-2.786-.061-.393-.123-.736-.147-.871a7.254,7.254,0,0,0-1.362-2.884c-.086-.1-.295-.331-.577-.651a36.279,36.279,0,0,0-2.995-3.191h0a26.184,26.184,0,0,1-4.1-4.051,5.046,5.046,0,0,1-.773-1.6l.245-.061a4.688,4.688,0,0,0,.724,1.5,25.931,25.931,0,0,0,4.038,3.989,34.762,34.762,0,0,1,3.056,3.253c.27.307.491.552.577.651a7.532,7.532,0,0,1,1.436,3.007c.025.147.074.466.147.884a18.876,18.876,0,0,0,.54,2.627,3.744,3.744,0,0,0,.54.344l.049.025.282,1.424a3.344,3.344,0,0,0,.491,1.006,1.035,1.035,0,0,0,.761.344.523.523,0,0,0,.466-.331l.1-.258.135.245c.012.012.2.331.847.233a2,2,0,0,0,.491-.773l.049-.11.11.037c.147.049.614.16.761-.049a2.1,2.1,0,0,0,.233-.908v-.147l.147.037c.012.012.393.086.528-.184a4.289,4.289,0,0,0-.123-1.608V86.42a6.618,6.618,0,0,0-.209-1.24,2.647,2.647,0,0,0-.589-.749l-.025-.012L144,84.395a5.465,5.465,0,0,0-1.51-2.05h0a3.03,3.03,0,0,1-.773-1.191.435.435,0,0,1-.049-.11,4.773,4.773,0,0,0-1.313-1.817v-.012c-1.092-1.252-4.21-6.665-4.345-6.9l.221-.123c.025.061,3.24,5.609,4.308,6.849a5,5,0,0,1,1.362,1.9l.037.11a2.513,2.513,0,0,0,.675,1.068,5.647,5.647,0,0,1,1.6,2.136,2.889,2.889,0,0,1,.626.835,7.66,7.66,0,0,1,.221,1.3,4.29,4.29,0,0,1,.1,1.768.648.648,0,0,1-.663.344,2.168,2.168,0,0,1-.27.921c-.233.319-.712.233-.945.172a1.9,1.9,0,0,1-.577.81l-.012.012h-.012a1.169,1.169,0,0,1-.994-.2.718.718,0,0,1-.6.331A1.161,1.161,0,0,1,140.131,90.078Zm-1.191-2.921Z" 											transform="translate(-128.2 -71.2)" fill="#000" /> 									</g> 									<g id="Group_483" data-name="Group 483" transform="translate(15.321 24.471)"> 										<path id="Path_964" data-name="Path 964" 											d="M223.711,253.563c-1.645-1.632-2.909-3.118-3.265-3.547a8.763,8.763,0,0,0-1.4-1.289,13.325,13.325,0,0,1-1.215-1.056,6.487,6.487,0,0,1-1.706-2.467l-.049-.2c-.135-.6-.356-1.6-.466-2.259a4.735,4.735,0,0,1,0-1.424l.012-.037.037-.025a1.872,1.872,0,0,1,.614-.393,1.4,1.4,0,0,1,.307-.025.735.735,0,0,1,.356-.626,1.036,1.036,0,0,1,.7-.209,1.086,1.086,0,0,1,.761-.614,1.418,1.418,0,0,1,.7.111.729.729,0,0,1,.577-.209c.528,0,.835.147.933.442.221.6.491,1.9.552,2.172a1.488,1.488,0,0,1,.491.552,18.268,18.268,0,0,1,.258,2.639,3.175,3.175,0,0,0,.319,1.178c.049.049.172.147.319.282.54.479,1.559,1.387,1.841,1.632a23.438,23.438,0,0,0,5.229,2.97h.012l.012.012a8.717,8.717,0,0,1,2.676,3.179,17.848,17.848,0,0,1,1.068,2.173l-.233.1c-.012-.037-1.583-3.94-3.621-5.217a23.887,23.887,0,0,1-5.278-3.007h-.012c-.282-.245-1.3-1.141-1.841-1.632-.16-.135-.27-.245-.319-.282-.245-.209-.381-1.154-.405-1.338v-.012a21.514,21.514,0,0,0-.233-2.553,1.383,1.383,0,0,0-.442-.479l-.049-.025v-.037a22.156,22.156,0,0,0-.552-2.2c-.025-.074-.1-.282-.7-.282-.331,0-.405.135-.417.16l-.049.16-.147-.1a.967.967,0,0,0-.638-.123c-.38.037-.6.552-.6.552l-.049.111-.11-.037a.736.736,0,0,0-.589.16.532.532,0,0,0-.246.54l.061.221-.221-.061a.7.7,0,0,0-.344,0,1.519,1.519,0,0,0-.479.307,4.475,4.475,0,0,0,.012,1.3c.11.65.331,1.645.466,2.234l.049.2a6.1,6.1,0,0,0,1.633,2.332,14.85,14.85,0,0,0,1.191,1.031,8.683,8.683,0,0,1,1.436,1.326c.344.43,1.608,1.9,3.24,3.523a28.506,28.506,0,0,0,5.45,4.419l-.123.221A28.236,28.236,0,0,1,223.711,253.563Z" 											transform="translate(-215.556 -239.3)" fill="#000" /> 									</g> 								</g> 							</g> 							<g id="Group_482-2" data-name="Group 482" transform="translate(4.599 3.838)"> 								<path id="Path_963-2" data-name="Path 963" 									d="M140.131,90.078a3.427,3.427,0,0,1-.565-1.142l-.258-1.3a3.092,3.092,0,0,1-.528-.344c-.16-.135-.295-.749-.626-2.786-.061-.393-.123-.736-.147-.871a7.255,7.255,0,0,0-1.362-2.884c-.086-.1-.295-.331-.577-.651a36.283,36.283,0,0,0-2.995-3.191h0a26.184,26.184,0,0,1-4.1-4.051,5.046,5.046,0,0,1-.773-1.6l.246-.061a4.687,4.687,0,0,0,.724,1.5,25.932,25.932,0,0,0,4.038,3.989,34.759,34.759,0,0,1,3.056,3.253c.27.307.491.552.577.651a7.531,7.531,0,0,1,1.436,3.007c.025.147.074.466.147.884a18.873,18.873,0,0,0,.54,2.627,3.743,3.743,0,0,0,.54.344l.049.025.282,1.424a3.344,3.344,0,0,0,.491,1.007,1.036,1.036,0,0,0,.761.344.523.523,0,0,0,.466-.331l.1-.258.135.245c.012.012.2.331.847.233a2,2,0,0,0,.491-.773l.049-.11.11.037c.147.049.614.16.761-.049a2.1,2.1,0,0,0,.233-.908v-.147l.147.037c.012.012.393.086.528-.184a4.289,4.289,0,0,0-.123-1.608V86.42a6.619,6.619,0,0,0-.209-1.24,2.647,2.647,0,0,0-.589-.749l-.025-.012L144,84.395a5.465,5.465,0,0,0-1.51-2.05h0a3.029,3.029,0,0,1-.773-1.191.435.435,0,0,1-.049-.11,4.773,4.773,0,0,0-1.313-1.817v-.012c-1.092-1.252-4.21-6.665-4.345-6.9l.221-.123c.025.061,3.24,5.609,4.308,6.849a5,5,0,0,1,1.362,1.9l.037.11a2.513,2.513,0,0,0,.675,1.068,5.647,5.647,0,0,1,1.6,2.136,2.89,2.89,0,0,1,.626.835,7.659,7.659,0,0,1,.221,1.3,4.29,4.29,0,0,1,.1,1.768.648.648,0,0,1-.663.344,2.168,2.168,0,0,1-.27.921c-.233.319-.712.233-.945.172a1.9,1.9,0,0,1-.577.81l-.012.012h-.012a1.169,1.169,0,0,1-.994-.2.718.718,0,0,1-.6.331A1.161,1.161,0,0,1,140.131,90.078Zm-1.191-2.921Z" 									transform="translate(-128.2 -71.2)" fill="#000" /> 							</g> 							<g id="Group_483-2" data-name="Group 483" transform="translate(15.321 24.471)"> 								<path id="Path_964-2" data-name="Path 964" 									d="M223.711,253.563c-1.645-1.632-2.909-3.118-3.265-3.547a8.764,8.764,0,0,0-1.4-1.289,13.324,13.324,0,0,1-1.215-1.056,6.487,6.487,0,0,1-1.706-2.467l-.049-.2c-.135-.6-.356-1.6-.466-2.259a4.735,4.735,0,0,1,0-1.424l.012-.037.037-.025a1.872,1.872,0,0,1,.614-.393,1.4,1.4,0,0,1,.307-.025.735.735,0,0,1,.356-.626,1.036,1.036,0,0,1,.7-.209,1.086,1.086,0,0,1,.761-.614,1.418,1.418,0,0,1,.7.11.729.729,0,0,1,.577-.209c.528,0,.835.147.933.442.221.6.491,1.9.552,2.172a1.488,1.488,0,0,1,.491.552,18.271,18.271,0,0,1,.258,2.639,3.175,3.175,0,0,0,.319,1.178c.049.049.172.147.319.282.54.479,1.559,1.387,1.841,1.633a23.438,23.438,0,0,0,5.229,2.97h.012l.012.012a8.716,8.716,0,0,1,2.676,3.179,17.842,17.842,0,0,1,1.068,2.173l-.233.1c-.012-.037-1.583-3.94-3.621-5.217a23.887,23.887,0,0,1-5.278-3.007h-.012c-.282-.245-1.3-1.141-1.841-1.632-.16-.135-.27-.245-.319-.282-.245-.209-.381-1.154-.405-1.338v-.012a21.515,21.515,0,0,0-.233-2.553,1.383,1.383,0,0,0-.442-.479l-.049-.025v-.037a22.153,22.153,0,0,0-.552-2.2c-.025-.074-.1-.282-.7-.282-.331,0-.405.135-.417.16l-.049.16-.147-.1a.967.967,0,0,0-.638-.123c-.38.037-.6.552-.6.552l-.049.11-.11-.037a.736.736,0,0,0-.589.16.532.532,0,0,0-.246.54l.061.221-.221-.061a.7.7,0,0,0-.344,0,1.519,1.519,0,0,0-.479.307,4.474,4.474,0,0,0,.012,1.3c.11.65.331,1.645.466,2.234l.049.2a6.1,6.1,0,0,0,1.633,2.332,14.853,14.853,0,0,0,1.191,1.031,8.685,8.685,0,0,1,1.436,1.326c.344.43,1.608,1.9,3.24,3.523a28.5,28.5,0,0,0,5.45,4.419l-.123.221A28.241,28.241,0,0,1,223.711,253.563Z" 									transform="translate(-215.556 -239.3)" fill="#000" /> 							</g> 						</g> 					</g> </svg> 	',
      height: 20,
      width: 20
    }
  } else if (focus === "ROTATION") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewBox="0 0 78 78"> 					<g id="Group_2453" data-name="Group 2453" transform="translate(-36 -513)"> 						<rect id="Rectangle_8" data-name="Rectangle 8" width="78" height="78" 							transform="translate(36 513)" fill="#fff" /> 						<g id="Group_3" data-name="Group 3" transform="translate(67.712 520.805)"> 							<g id="Group_202" data-name="Group 202"> 								<path id="Path_645" data-name="Path 645" 									d="M12.835,24.873c-.309-1.343.693-7.73.448-9.628-.245-2.378-1.866-4.617-2.143-5.2a5.215,5.215,0,0,1-.309-1.631,11.35,11.35,0,0,0,.757-3.934C11.417,1.928,10,1,8.56,1,7.835,1,5.489,1,5.766,5.041a9.714,9.714,0,0,0,.714,3.828A5.841,5.841,0,0,1,6.9,11.183c-.032.533-3.455,4.585-3.657,5.726a8.168,8.168,0,0,0,.171,3.071c.171.864.064,6.9.064,6.9S1.6,32.742,1.448,32.913,1,33.36,1,33.606a8.349,8.349,0,0,0,.2,1.066s.16.7.245.928a3.524,3.524,0,0,0,.693.725s.586.384.885.331c.128-.011-.085-.48-.085-.48s.149-.16.256-.064.917,4.585.917,4.585a41.662,41.662,0,0,1,.9,4.606c.139,1.578-.437,2.73-.277,4.073a50.657,50.657,0,0,0,1.621,5.619,10.342,10.342,0,0,1,.522,2,7.746,7.746,0,0,0-.139,1.343,8.332,8.332,0,0,0,.107,1.7,22.679,22.679,0,0,0,.309,2.346c.256.64,1.813,1.13,2.41,1.034s1.45-.32,1.514-.928-1.418-3.241-1.418-3.241S8.432,56.6,8.314,56.125s.544-4.276.522-5.427S8.57,45.825,8.73,45.43s.65,1.557.65,1.557A25.026,25.026,0,0,0,10,52.062c.064.96.139,2.069.139,2.069a5.5,5.5,0,0,0-.448,1.482,6.966,6.966,0,0,0,0,1.418c.1.341.277.821.309,1.066s-.085.533.107.9a1.734,1.734,0,0,0,1.759.928c1.3-.053,1.663-.7,1.621-1.173a24.263,24.263,0,0,0-1.109-2.623,10.354,10.354,0,0,1-.618-2.069c0-.512,1.013-4.062,1.141-4.8.352-2.943-.469-4.489-.522-5.48s1.375-5,1.375-5,1.5-5.033,1.5-7.73S13.145,26.217,12.835,24.873Z" 									transform="translate(-0.893 -0.893)" fill="#000" /> 								<path id="Path_646" data-name="Path 646" 									d="M8.509,62.631c-.714,0-2.1-.469-2.356-1.109a5.473,5.473,0,0,1-.213-1.461,5.317,5.317,0,0,0-.1-.9,4.5,4.5,0,0,1-.107-1.237c0-.181,0-.352-.011-.48a4.033,4.033,0,0,1,.085-.949c.021-.149.043-.277.053-.405a9.312,9.312,0,0,0-.512-1.951,49.088,49.088,0,0,1-1.631-5.651,6.715,6.715,0,0,1,.128-1.962A8.438,8.438,0,0,0,4,44.409a41.058,41.058,0,0,0-.9-4.585c-.288-1.621-.778-4.222-.885-4.532a.18.18,0,0,0-.053.021c.107.245.128.405.075.49a.117.117,0,0,1-.107.064,1.864,1.864,0,0,1-.949-.341l-.011-.011a3.4,3.4,0,0,1-.725-.768A9.064,9.064,0,0,1,.213,33.8,7.844,7.844,0,0,1,0,32.712c0-.256.245-.512.416-.693l.064-.064c.128-.192,1.269-3.679,2-5.982.011-.341.1-6.046-.064-6.867a8.058,8.058,0,0,1-.181-3.113,15.719,15.719,0,0,1,2.282-3.647A13.347,13.347,0,0,0,5.9,10.279a5.64,5.64,0,0,0-.405-2.26,9.671,9.671,0,0,1-.725-3.87,4.421,4.421,0,0,1,.81-3.38A2.7,2.7,0,0,1,7.666,0c1.813,0,2.985,1.343,3.145,3.583a11.239,11.239,0,0,1-.757,3.956,5.119,5.119,0,0,0,.3,1.567,5.071,5.071,0,0,0,.309.533,12.07,12.07,0,0,1,1.845,4.7,32.534,32.534,0,0,1-.245,4.969,24.185,24.185,0,0,0-.2,4.638,6.95,6.95,0,0,0,.832,1.7,9.079,9.079,0,0,1,1.61,4.51c0,2.676-1.493,7.709-1.5,7.762s-1.418,4-1.375,4.969a5.96,5.96,0,0,0,.192,1.045,11.3,11.3,0,0,1,.32,4.457c-.053.309-.256,1.1-.469,1.93A26.945,26.945,0,0,0,11,53.173a6.9,6.9,0,0,0,.48,1.642c.064.181.117.32.139.395.032.107.171.405.341.768a9.884,9.884,0,0,1,.768,1.877,1,1,0,0,1-.245.736A1.937,1.937,0,0,1,11,59.144a1.835,1.835,0,0,1-1.855-.992,1.282,1.282,0,0,1-.117-.7,1.72,1.72,0,0,0,0-.235,4.648,4.648,0,0,0-.192-.682c-.043-.128-.085-.256-.117-.373a2.7,2.7,0,0,1-.021-.938c.011-.171.021-.341.021-.5a5.179,5.179,0,0,1,.448-1.5l-.16-2.037A25.434,25.434,0,0,1,8.391,46.1a9.082,9.082,0,0,0-.469-1.439A35.207,35.207,0,0,0,8,48.311c.032.629.053,1.162.064,1.493a27.91,27.91,0,0,1-.288,2.943,17.519,17.519,0,0,0-.235,2.463c.107.458,1.322,3.06,1.343,3.081.149.267,1.493,2.676,1.429,3.295-.064.522-.618.874-1.61,1.024A.623.623,0,0,1,8.509,62.631ZM2.228,35.079a.191.191,0,0,1,.139.053c.043.032.139.107.949,4.649a41.062,41.062,0,0,1,.9,4.617,8.345,8.345,0,0,1-.149,2.175,6.677,6.677,0,0,0-.128,1.9,50.217,50.217,0,0,0,1.621,5.6,9.492,9.492,0,0,1,.522,2.047,3.18,3.18,0,0,1-.064.426,4.395,4.395,0,0,0-.075.906c.011.139.011.32.011.5a3.947,3.947,0,0,0,.1,1.162,4.774,4.774,0,0,1,.107.949,5.3,5.3,0,0,0,.2,1.4c.224.565,1.7,1.056,2.3.97s1.365-.32,1.429-.842a12.634,12.634,0,0,0-1.4-3.177c-.053-.117-1.237-2.655-1.354-3.135a14.568,14.568,0,0,1,.224-2.538,28,28,0,0,0,.288-2.911c-.011-.331-.032-.864-.064-1.493A23.077,23.077,0,0,1,7.752,44.5c.043-.117.128-.128.16-.117.075,0,.277.021.693,1.685v.021a25.3,25.3,0,0,0,.618,5.043v.011l.139,2.1-.011.021a5.559,5.559,0,0,0-.437,1.439c0,.171-.011.341-.021.512a2.81,2.81,0,0,0,.021.864c.032.107.075.235.117.363a4.846,4.846,0,0,1,.2.725,1.114,1.114,0,0,1,0,.267,1.036,1.036,0,0,0,.1.6,1.639,1.639,0,0,0,1.663.874,1.739,1.739,0,0,0,1.322-.48.775.775,0,0,0,.192-.576,11.5,11.5,0,0,0-.746-1.813,7.248,7.248,0,0,1-.352-.789c-.021-.075-.075-.213-.139-.384a6.97,6.97,0,0,1-.49-1.717,26.211,26.211,0,0,1,.672-2.911c.213-.832.416-1.61.469-1.909a11.081,11.081,0,0,0-.32-4.372,6.311,6.311,0,0,1-.2-1.088c-.043-1.013,1.333-4.883,1.386-5.043.011-.043,1.493-5.043,1.493-7.688a8.916,8.916,0,0,0-1.578-4.4,7.379,7.379,0,0,1-.853-1.749,24.061,24.061,0,0,1,.2-4.7,32.128,32.128,0,0,0,.245-4.926,12,12,0,0,0-1.813-4.617c-.139-.245-.256-.426-.309-.554a5.4,5.4,0,0,1-.32-1.663V7.506l.011-.021A11.393,11.393,0,0,0,10.62,3.6C10.385.544,8.477.213,7.666.213A2.548,2.548,0,0,0,5.726.906a4.238,4.238,0,0,0-.746,3.231,9.466,9.466,0,0,0,.714,3.8,5.976,5.976,0,0,1,.426,2.356,10.058,10.058,0,0,1-1.407,2.175,16.955,16.955,0,0,0-2.25,3.561,8.067,8.067,0,0,0,.171,3.028c.171.864.075,6.675.075,6.92v.032C2.26,27.392.81,31.913.65,32.083l-.064.064c-.16.16-.373.395-.373.565a8.167,8.167,0,0,0,.2,1.045c0,.011.16.7.235.917a3.11,3.11,0,0,0,.65.672,1.922,1.922,0,0,0,.746.309,1.857,1.857,0,0,0-.117-.341L1.9,35.25l.053-.053A.471.471,0,0,1,2.228,35.079Z" 									fill="#000" /> 							</g> 							<g id="Group_203" data-name="Group 203" transform="translate(0.117 0.107)"> 								<path id="Path_647" data-name="Path 647" 									d="M12.925,24.873c-.309-1.343.693-7.73.458-9.628-.245-2.378-1.855-4.617-2.132-5.2a5.215,5.215,0,0,1-.309-1.631A11.35,11.35,0,0,0,11.7,4.476C11.528,1.938,10.11,1,8.66,1,7.935,1,5.589,1,5.866,5.03a9.5,9.5,0,0,0,.725,3.838,5.841,5.841,0,0,1,.416,2.314c-.032.533-3.455,4.585-3.657,5.726a8.168,8.168,0,0,0,.171,3.071c.171.864.064,6.9.064,6.9S1.7,32.742,1.548,32.913s-.448.448-.448.693a8.349,8.349,0,0,0,.2,1.066s.16.7.245.928a3.524,3.524,0,0,0,.693.725s.586.384.874.331c.128-.011-.085-.48-.085-.48s.149-.16.256-.064.906,4.585.906,4.585a41.662,41.662,0,0,1,.9,4.606c.139,1.578-.437,2.73-.277,4.073a50.657,50.657,0,0,0,1.621,5.619,9.722,9.722,0,0,1,.512,2A7.745,7.745,0,0,0,6.8,58.342a8.332,8.332,0,0,0,.107,1.7,22.68,22.68,0,0,0,.309,2.346c.256.64,1.813,1.13,2.41,1.034s1.45-.32,1.514-.928-1.407-3.241-1.407-3.241S8.5,56.6,8.393,56.125s.544-4.276.522-5.427a51.328,51.328,0,0,1-.1-5.267c.16-.405.65,1.557.65,1.557a25.026,25.026,0,0,0,.618,5.075c.064.96.139,2.069.139,2.069a5.5,5.5,0,0,0-.448,1.482,6.966,6.966,0,0,0,0,1.418c.1.341.277.821.309,1.066s-.085.533.107.9a1.717,1.717,0,0,0,1.759.928c1.3-.053,1.663-.7,1.621-1.173a26.644,26.644,0,0,0-1.1-2.623,10.354,10.354,0,0,1-.618-2.069c0-.522,1.013-4.062,1.141-4.8.363-2.943-.469-4.489-.512-5.48s1.386-5,1.386-5,1.5-5.033,1.5-7.73C15.356,28.36,13.234,26.217,12.925,24.873Z" 									transform="translate(-1.1 -1)" fill="#000" /> 							</g> 							<g id="Group_204" data-name="Group 204" transform="translate(1.898 14.085)"> 								<path id="Path_648" data-name="Path 648" 									d="M18.216,153.276l-.032-.1c.149-.053.384-.171.405-.256a.594.594,0,0,0-.1-.363c-.043-.075-.075-.1-.085-.1-.075-.011-.245-.075-.352-.107a.234.234,0,0,1-.085-.032c-.107-.032-.171-.256-.171-.437a4.612,4.612,0,0,1,.213-1.1c.021-.053.053-.139.1-.245a6.1,6.1,0,0,0,.469-1.418c0-.128-.011-.267-.021-.395a1.383,1.383,0,0,1,.032-.64c.032-.085.3-.469.789-1.2.8-1.194,2.015-2.986,2.751-4.276a15.07,15.07,0,0,0,1.514-4.51l.011-.021a20.073,20.073,0,0,0,1.653-4.382l.011-.021a9.863,9.863,0,0,0,.565-1.578l.107.032a9.163,9.163,0,0,1-.576,1.589,20.375,20.375,0,0,1-1.653,4.393,14.966,14.966,0,0,1-1.525,4.542c-.736,1.29-1.951,3.092-2.762,4.276-.416.618-.746,1.109-.778,1.194a1.311,1.311,0,0,0-.021.586c.011.128.021.267.021.405a5.665,5.665,0,0,1-.48,1.461c-.043.1-.075.181-.1.234a4.235,4.235,0,0,0-.2,1.066.513.513,0,0,0,.1.341.769.769,0,0,0,.085.032c.107.032.267.1.341.107.053.011.1.053.149.139a.692.692,0,0,1,.107.459C18.642,153.1,18.29,153.244,18.216,153.276Z" 									transform="translate(-17.8 -132.1)" fill="#000" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 							<g id="Group_205" data-name="Group 205" transform="translate(2.538 12.432)"> 								<path id="Path_649" data-name="Path 649" 									d="M23.907,130.163l-.107-.032.97-3.412a8.437,8.437,0,0,1,.6-1.407,4.041,4.041,0,0,0,.5-1.311c.011-.256.1-.81.192-1.439a22.031,22.031,0,0,0,.3-2.538V116.6h.107v3.423a22.447,22.447,0,0,1-.3,2.548A14.136,14.136,0,0,0,25.986,124a4.109,4.109,0,0,1-.512,1.354,9.824,9.824,0,0,0-.6,1.4Z" 									transform="translate(-23.8 -116.6)" fill="#000" stroke="#670f89" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 							<g id="Group_206" data-name="Group 206" transform="translate(6.76 32.232)"> 								<path id="Path_650" data-name="Path 650" 									d="M64.53,314.626l-.107-.021a24.1,24.1,0,0,0,.522-2.783,24.709,24.709,0,0,0-.618-3.892c-.373-1.919-.8-4.094-.928-5.619l.107-.011c.128,1.525.554,3.7.928,5.609a26.127,26.127,0,0,1,.618,3.924A24.453,24.453,0,0,1,64.53,314.626Z" 									transform="translate(-63.4 -302.3)" fill="#000" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 							<g id="Group_207" data-name="Group 207" transform="translate(5.971 9.03)"> 								<path id="Path_651" data-name="Path 651" 									d="M56.086,86.186,56,86.1a5.643,5.643,0,0,1,2.366-1.331,4.444,4.444,0,0,1,2.995.665l-.062.1a4.39,4.39,0,0,0-2.9-.653A5.565,5.565,0,0,0,56.086,86.186Z" 									transform="translate(-56.34 -84.695)" fill="#000" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 						</g> 					</g> 				</svg>',
      height: 20,
      width: 20
    }
  } else if (focus === "SQUAT") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewBox="0 0 78 78"> 					<g id="Group_2450" data-name="Group 2450" transform="translate(-36 -595)"> 						<rect id="Rectangle_10" data-name="Rectangle 10" width="78" height="78" 							transform="translate(36 595)" fill="#fff" /> 						<g id="Group_1" data-name="Group 1" transform="translate(-247 94.192)"> 							<path id="Path_917" data-name="Path 917" 								d="M134.764,569.914a3.876,3.876,0,0,0,1.947-1.373s-1.145-8.288,5.38-8.288,6.044,5.083,6.044,6,1.465,2.724,1.465,3.457-1.373.55-1.373.55a6.71,6.71,0,0,1-.046,1.122c-.046.16-.366.229-.366.229s.252.32.183.481c-.046.161-.481.229-.481.229s-.114,1.282-.664,1.534-3.159-.526-3.732-.412a10.056,10.056,0,0,0-2.06,1.259s3.572,3.206.458,9.617a4.832,4.832,0,0,1,2.061,2.953c1.969,2.129-.343,8.059-5.633,12.158a50.86,50.86,0,0,0-1.465,8.288s1.854.756,2.266.893c.412.16,1.145-.069,1.466,0s.183.641.183.641.344-.068.458.092c.344.641-.481,1.053-.481,1.053a.738.738,0,0,1-.778.664c.046.206-.55.184-.55.184a2.134,2.134,0,0,1-.893.274c.137,1.282-1.351,1.649-1.351,1.649a14.858,14.858,0,0,1-2.633.16c-.618-.115-1.351-1.855-1.351-1.855h-5.655c-.87,0-.847-1.763-.847-1.763a7.8,7.8,0,0,1,.229-2.335,29.855,29.855,0,0,1,2.038-4.282,12.167,12.167,0,0,1-7.12,2.748c-7.556,0-9.021-7.922-9.021-9a22.608,22.608,0,0,1,3.068-10.44S123.065,572.89,134.764,569.914Z" 								transform="translate(191.114 -46.266)" fill="#000" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_918" data-name="Path 918" 								d="M147.469,593.943c.39,7.464-1.1,9.845-1.6,11.631-.87,6.159-.046,13.12-.87,18.569" 								transform="translate(178.891 -58.916)" fill="#000" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_919" data-name="Path 919" d="M129.525,610.009s9.662-5.495,11.952-5.838" 								transform="translate(184.696 -62.757)" fill="#000" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_920" data-name="Path 920" 								d="M142.885,622.831c-1.168,1.649-4.671,3.778-4.671,3.778" 								transform="translate(181.434 -69.761)" fill="#000" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_921" data-name="Path 921" 								d="M156.829,598.818s-1.672,6.309-2.646,7.754a21.444,21.444,0,0,1-.975,7.386" 								transform="translate(175.806 -60.776)" fill="#000" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 						</g> 					</g> 				</svg> 		',
      height: 20,
      width: 20
    }
  } else if (focus === "BALANCE & REACH") {
    return {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewBox="0 0 78 78"> 					<g id="Group_2463" data-name="Group 2463" transform="translate(-36 -677)"> 						<g id="Group_2451" data-name="Group 2451"> 							<rect id="Rectangle_12" data-name="Rectangle 12" width="78" height="78" 								transform="translate(36 677)" fill="#fff" /> 						</g> 						<g id="Group_2460" data-name="Group 2460" transform="translate(10.377 -2.001)"> 							<g id="Group_2459" data-name="Group 2459" transform="translate(44.624 687.001)"> 								<path id="Path_952" data-name="Path 952" d="M138.214,625.209" 									transform="translate(-127.581 -566.52)" fill="#000" stroke="#fff" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_953" data-name="Path 953" d="M153.208,608.328" 									transform="translate(-129.632 -554.706)" fill="#000" stroke="#fff" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<g id="Group_183" data-name="Group 183"> 									<path id="Path_605" data-name="Path 605" 										d="M4,9.832a6.622,6.622,0,0,0,2.009-4.7S5.537.5,9.645.5a3.758,3.758,0,0,1,4.041,4.191,3.146,3.146,0,0,1-.491,1.482c-.156.278.179,1.968-.045,2.2s-.893.046-.893.046-.2.648-.29,1.019c-.089.394-.915,1-1.228,1.111-.313.139-1.049-.394-1.317-.3A1.69,1.69,0,0,0,8.6,11.476c.045.417,3.237,4.492,3.885,6.622.647,2.153.246,2.755.246,2.755a27.667,27.667,0,0,1,.536,10.35c3.505,3.056,5.894,9.169,5.894,9.169A14.645,14.645,0,0,1,22.014,45c1.942,2.941,3.684,7.2,6.207,9.586.2.278.134-.347.491-.255.38.093.826.973.826.973s3.595,2.153,3.974,2.246.714-.139,1.183.255.982,1.76-.536,1.945A35.7,35.7,0,0,1,28.8,59.5s-4.264.579-4.666-.347c-.29-.672.447-1.69.447-1.69s.223-1.667.29-2.454a34.21,34.21,0,0,0-3.193-3.936,5.186,5.186,0,0,1-3.1-3.473A6.4,6.4,0,0,0,17.1,44.634l-1.317.463a7.051,7.051,0,0,1,.246,1.945c-.134.347-.893.3-.893.3l-1.674,1.991S8.93,54.66,8.506,55.053a2.79,2.79,0,0,0-.737,1.575c0,.3,1.384,1.436,1.384,1.436s2.7,1.042,3.237,1.227c.8.232.96.486,1.027.857.089.973-.045,1-.4,1.227a25.9,25.9,0,0,1-5.85.463s-3.394-.232-4.041-.3a1.126,1.126,0,0,1-.982-1.019c-.022-.394.58-1.065.58-1.065s.424-1.968.58-2.339.826-.255.826-.255S8.1,50.237,7.814,49.4c-.357.093-1.206.37-1.273.046S3.483,38.034,3.483,38.034a8.382,8.382,0,0,1-1.674-4.955A16.794,16.794,0,0,1,2.5,30.37S1.228,27.892,1.027,27.2a4.536,4.536,0,0,1,0-1.575C1,25.276.491,19.765.491,18.584A10.08,10.08,0,0,1,.937,14.3,13.955,13.955,0,0,1,4,9.832Z" 										transform="translate(-0.431 -0.5)" fill="#000" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_606" data-name="Path 606" d="M16.4,40.8s3.3,1.786,4.577,1.563" 										transform="translate(-12.835 -31.803)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_607" data-name="Path 607" 										d="M14.164,73c.045.982-1.317,4.376-1.317,4.376s-.491,3.639-1.183,4.13c.915.982,2.5,5.269,2.5,5.269s1,1.384,2.009,2.7a7.047,7.047,0,0,1,2.121,1.273,3.936,3.936,0,0,1,.4,1.317s.737.625.737.759c0,.156-.268.447-.268.447a1.282,1.282,0,0,1,.045.558c-.134.268-.714.179-.714.179a1.1,1.1,0,0,1-.826.313,1.141,1.141,0,0,1-.915.246s-.826.223-1.049,0a17.848,17.848,0,0,1-1.518-2.679c-.067-.268-.2-.915-.2-.915L9.9,85.614" 										transform="translate(-7.786 -55.866)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_608" data-name="Path 608" 										d="M1.4,88.885a17.131,17.131,0,0,1,4.912.536" 										transform="translate(-1.184 -68.409)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_609" data-name="Path 609" 										d="M75,187.261a15.158,15.158,0,0,0,4.22-1.161" 										transform="translate(-58.351 -143.094)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<line id="Line_3" data-name="Line 3" y1="1.965" x2="7.278" 										transform="translate(7.406 46.923)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_610" data-name="Path 610" 										d="M58.3,154.9c1.474,2.768,2.411,8.573,2.411,8.573" 										transform="translate(-45.38 -118.932)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_611" data-name="Path 611" 										d="M154.4,234.545v2.992l.737,3.885h13.954v-2.009l-2.009-4.912Z" 										transform="translate(-120.024 -180.061)" fill="#000" stroke="#fff" 										stroke-miterlimit="10" stroke-width="0.2" /> 								</g> 							</g> 						</g> 					</g> 				</svg> 	',
      height: 20,
      width: 20
    }
  }


}

function scoreCalculation(categoryResults) {
  var Output = [
    [{ text: 'S.NO', style: 'label', alignment: 'center' }, { text: 'NAME', style: 'label' }, { text: 'MSK DATE', style: 'label' }, { text: 'DEPT/GROUP', style: 'label', alignment: 'left' }, { text: 'CATEGORY', style: 'label', alignment: 'center' }, { text: 'PAIN', style: 'label', alignment: 'center' }, { text: 'BMI', style: 'label', alignment: 'center' }, { text: 'MOVEPRINT FOCUS', style: 'label' }],

  ];
  let i = 1;
  for (let cat in categoryResults) {
    let row = categoryResults[cat];
    Output.push([{ text: i, alignment: 'center' },
    row.name,
    row.mskdate,
    row.group,
    row.mskCategory,
    { text: row.pain, alignment: 'center' },
    { text: (row.bmi === NaN ? 0 : parseInt(row.bmi)), alignment: 'center' },
    row.focusArea]);
    i++;
  }
  return Output;
}

function mskTableResults(categoryResults) {
  var Output = [
    [{ text: 'NAME OF USER', alignment: 'left', style: 'small', border: [false, false, true, true], color: '#414141' }, { text: 'ORGANIZATION', style: 'small', color: '#414141', alignment: 'left' }, { text: 'CATEGORY', style: 'small', color: '#414141', alignment: 'center' }, { text: 'MOVEMENT PAIN', style: 'small', color: '#414141', alignment: 'center' }, { text: 'FOCUS', color: '#414141', style: 'small', alignment: 'center' }],

  ];
  let i = 1;
  for (let cat in categoryResults) {
    let row = categoryResults[cat];
    let categoryColor = '#ebebeb';
    let cellColor = '';
    let painColor = '';
    if (i % 2 === 0) {
      cellColor = '#ffffff';
    } else {
      cellColor = '#f5f5f5';
    }
    if (row.mskCategory === "HEALTH") {
      categoryColor = '#EE93A1';
    } else if (row.mskCategory === "WELLNESS") {
      categoryColor = '#FBC698';
    } else if (row.mskCategory === "FITNESS") {
      categoryColor = '#FCD783';
    } else if (row.mskCategory === "PERFORMANCE") {
      categoryColor = '#BED6A7';
    } else if (row.mskCategory === "BEHAVIORAL HEALTH") {
      categoryColor = '#EE93A1';
      row.mskCategory = 'B-HEALTH'
    }

    if (row.pain === 'Y') {
      painColor = '#EE93A1';
    } else {
      painColor = cellColor;
    }

    if (row.focusArea === 'UPPER BODY MOBILITY') {
      row.focusArea = 'UB MOBILITY';
    } else if (row.focusArea === 'BALANCE & REACH') {
      row.focusArea = 'BALANCE';
    } else if (row.focusArea === 'SPINE CLEARING') {
      row.focusArea = 'SPINE';
    } else if (row.focusArea === 'SHOULDER CLEARING') {
      row.focusArea = 'CLEARANCE';
    }
    Output.push([
      { text: row.name.toUpperCase(), fontSize: 7, bold: true, fillColor: cellColor, alignment: 'left' },
      { text: row.group.toUpperCase(), fontSize: 7, fillColor: cellColor, color: '#959595', alignment: 'left' },
      { text: row.mskCategory, fontSize: 7, border: [true, true, true, false], fillColor: categoryColor, bold: true, alignment: 'center' },
      { text: row.pain, fontSize: 7, fillColor: painColor, bold: true, alignment: 'center' },
      { text: row.focusArea, fontSize: 7, bold: true, fillColor: cellColor, alignment: 'center' }]);
    i++;
  }
  return Output;
}

function getStatus(value, color) {
  if (value) {
    return '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="77" viewBox="0 0 78 77"> 					<g id="Group_2447" data-name="Group 2447" transform="translate(-119 -349)"> 						<rect id="Rectangle_3" data-name="Rectangle 3" width="78" height="77" 							transform="translate(119 349)" fill="' + color + '"></rect> 						<g id="Group_1797" data-name="Group 1797"> 							<path id="Path_6201" data-name="Path 6201" 								d="M-1048.079,372.024a29.212,29.212,0,0,1-29.179-29.176,29.214,29.214,0,0,1,29.179-29.179,29.212,29.212,0,0,1,29.177,29.179A29.21,29.21,0,0,1-1048.079,372.024Zm0-54.16a25.013,25.013,0,0,0-24.983,24.983,25.013,25.013,0,0,0,24.983,24.983,25.013,25.013,0,0,0,24.983-24.983A25.013,25.013,0,0,0-1048.079,317.864Z" 								transform="translate(1205.258 45.237)" fill="#fff"></path> 							<path id="Path_6217" data-name="Path 6217" 								d="M367.192,299.68,352.631,325.6l-6.385-8.078H339.3l14.37,17.548,17.487-31.138Z" 								transform="translate(-198.354 70.673)" fill="#fff"></path> 						</g> 					</g> 				</svg>';
  } else {
    return '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="77" viewBox="0 0 78 77"> 					<g id="Group_2447" data-name="Group 2448" transform="translate(-119 -431)"> 						<rect id="Rectangle_3" data-name="Rectangle 3" width="78" height="77" 							transform="translate(119 431)" fill="' + color + '"></rect> 						<g id="Group_1797" data-name="Group 1795" transform="translate(-94 81)"> 							<rect id="Rectangle_409" data-name="Rectangle 409" width="36.215" height="5.149" 								transform="translate(241.324 373.528) rotate(45)" fill="#fff"></rect> 							<rect id="Rectangle_410" data-name="Rectangle 410" width="36.215" height="5.149" 								transform="translate(237.682 399.135) rotate(-45)" fill="#fff"></rect> 							<path id="Path_6217" data-name="Path 6200" 								d="M-1009.544,372a29.086,29.086,0,0,1-20.632-8.532,28.988,28.988,0,0,1-8.545-20.632,28.984,28.984,0,0,1,8.545-20.632,29.21,29.21,0,0,1,41.263,0,28.984,28.984,0,0,1,8.545,20.632,28.988,28.988,0,0,1-8.545,20.632A29.087,29.087,0,0,1-1009.544,372Zm0-54.135a24.9,24.9,0,0,0-17.664,7.306,24.815,24.815,0,0,0-7.319,17.664,24.819,24.819,0,0,0,7.319,17.664,25.007,25.007,0,0,0,35.328,0,24.818,24.818,0,0,0,7.319-17.664,24.814,24.814,0,0,0-7.319-17.664A24.9,24.9,0,0,0-1009.544,317.867Z" 								transform="translate(1261.784 45.246)" fill="#fff"></path> 						</g> 					</g> 				</svg>';
  }

}

function generateDonutChart(p1, p2, p3, p4) {

  let offset1 = 0;
  let offset2 = Math.abs(100 - p1) == 0 ? 0.01 : Math.abs(100 - p1);
  let offset3 = Math.abs(100 - (p1 + p2)) == 0 ? 0.01 : Math.abs(100 - (p1 + p2));
  let offset4 = Math.abs(100 - (p1 + p2 + p3)) == 0 ? 0.01 : Math.abs(100 - (p1 + p2 + p3));
  console.log('percentage ', offset1, offset2, offset3, offset4);

  p1 = (p1 === 0 ? 0.01 : p1);
  p2 = (p2 === 0 ? 0.01 : p2);
  p3 = (p3 === 0 ? 0.01 : p3);
  p4 = (p4 === 0 ? 0.01 : p4);

  console.log('after setting offsets ', p1, p2, p3, p4);

  let x1 = p1;
  let y1 = (100 - p1 == 0) ? 0.01 : (100 - p1);
  let x2 = p2;
  let y2 = (100 - p2 == 0) ? 0.01 : (100 - p2);
  let x3 = p3;
  let y3 = (100 - p3 == 0) ? 0.01 : (100 - p3);
  let x4 = p4;
  let y4 = (100 - p4 == 0) ? 0.01 : (100 - p4);

  let svg = ' <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200%" height="200%" viewBox="0 0 42 42" class="donut">' +
    '<circle class="donut-hole" cx="21" cy="21" r="15.91549430918954" fill="#fff"></circle>' +
    '<circle class="donut-ring" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d2d3d4" stroke-width="3"></circle>' +
    '<circle class="donut-segment" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#EE93A1" stroke-width="7" stroke-dasharray="' + x1 + ' ' + y1 + '" stroke-dashoffset="' + offset1 + '"></circle>' +
    '<circle class="donut-segment" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#BED6A7" stroke-width="7" stroke-dasharray="' + x2 + ' ' + y2 + '" stroke-dashoffset="' + offset2 + '"></circle>' +
    '<circle class="donut-segment" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#FBC698" stroke-width="7" stroke-dasharray="' + x3 + ' ' + y3 + '" stroke-dashoffset="' + offset3 + '"></circle>' +
    '<circle class="donut-segment" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#FCD783" stroke-width="7" stroke-dasharray="' + x4 + ' ' + y4 + '" stroke-dashoffset="' + offset4 + '"></circle>' +

    '<text id="MSK" fill="#414141" font-size="6" font-family="HelveticaNeue-Bold, Helvetica Neue" font-weight="700"><tspan x="15" y="23">MSK</tspan></text>' +
    '</svg>';

  return svg;
}

async function correctiveExercises(movementscore, week) {
  var rec_exercisetitle = '';
  var breathing_exercises = [];
  let flag, mobilityflag, pain;
  flag = mobilityflag = pain = 0;
  for (var exercise of movementscore) {
    if (exercise.pain === "true") {
      pain = await pain + 1;
    }
    if ((exercise.pain === "yes" && exercise.title === "BREATHING TEST")) {
      flag = await flag + 1;
    }
    if ((exercise.pain === "yes" && exercise.title === "MOBILITY TEST")) {
      mobilityflag = await mobilityflag + 1;
    }
  }

  if (flag === 1) {
    let breathingExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "recommended_exercises.week": week, "title": "BREATHING" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
    breathing_exercises = breathing_exercises.concat(breathingExercises);
    console.log('breathing');
  }
  rec_exercisetitle = util.recommendedExerciseFocusArea(movementscore);
  rec_exercisetitle = rec_exercisetitle.replace('TEST', '').trim();

  if (pain === 5) {
    rec_exercisetitle = "PAIN FLOW";
    painAll = true;
  } else if (pain < 5) {
    rec_exercisetitle = "PAIN FLOW";
  }

  let focusExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "recommended_exercises.week": week, "title": rec_exercisetitle } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
  breathing_exercises = breathing_exercises.concat(focusExercises);
  if (mobilityflag === 1) {
    let mobilityExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "recommended_exercises.week": week, "title": "MOBILITY" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
    breathing_exercises = breathing_exercises.concat(mobilityExercises);
    console.log('in mobility');
  }

  var finalresult = [];
  for (var i = 0; i < breathing_exercises.length; i++) {
    finalresult.push(breathing_exercises[i].recommended_exercises);
  }
  return finalresult;
}
async function improvementCorrectiveExercises(movementscore, premovementscore, currentFocusarea, previousFocusarea, previousRecommendedExercises) {
  var rec_exercisetitle = '';
  var previouspain = false;
  var currentpain = false;
  var breathing_exercises = [];
  let flag, mobilityflag, pain, clearanceflag;
  flag = mobilityflag = pain = clearanceflag = 0;
  console.log('cur focus', currentFocusarea, 'pf', 'm', previousFocusarea, 'pr rec', previousRecommendedExercises.length)

  for (let exercise of movementscore) {
    if (exercise.pain === "true") {
      pain = pain + 1;
    }
    if ((exercise.pain === "yes" && exercise.groupid === 6)) {
      clearanceflag = clearanceflag + 1;
    }
    if ((exercise.pain === "yes" && exercise.title === "BREATHING TEST")) {
      flag = flag + 1;
    }
    if ((exercise.pain === "yes" && exercise.title === "MOBILITY TEST")) {
      mobilityflag = mobilityflag + 1;
    }
  }
  if (premovementscore.length > 0) {
    if (!["SHOULDER CLEARING", "SPINE CLEARING"].includes(previousFocusarea)) {
      if ((pain > 0) && (pain <= 5)) {
        previouspain = true;
      }
    } else if (["SHOULDER CLEARING", "SPINE CLEARING"].includes(previousFocusarea)) {
      previouspain = true;
    }
  }
  var finalresult = [];
  if (flag === 1) {
    let breathingExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "title": "BREATHING" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
    for (let i = 0; i < breathingExercises.length; i++) {
      breathingExercises[i].recommended_exercises.image = "";
      finalresult.push(breathingExercises[i].recommended_exercises);
    }
    // breathing_exercises = breathing_exercises.concat(breathingExercises);

  }

  rec_exercisetitle = util.recommendedExerciseFocusArea(movementscore);
  rec_exercisetitle = rec_exercisetitle.replace('TEST', '').trim();
  console.log('por', rec_exercisetitle)
  if (!["SHOULDER CLEARING", "SPINE CLEARING"].includes(currentFocusarea)) {
    if ((pain > 0)) {
      rec_exercisetitle = "PAIN FLOW";
      currentpain = true;
    }
  } else if (["SHOULDER CLEARING", "SPINE CLEARING"].includes(currentFocusarea)) {
    currentpain = true;
  }
  console.log('pain ', previouspain, currentpain);
  if (previousRecommendedExercises.length === 0) {
    previousRecommendedExercises.push({ "week": "1" });
  }
  if (((previousRecommendedExercises.length > 0) && (!["1", "2"].includes(previousRecommendedExercises[0].week))) && (currentFocusarea === previousFocusarea) && (currentpain === previouspain)) {
    console.log('in ', rec_exercisetitle);
    finalresult = [];
    previousRecommendedExercises.filter(r => {
      if (r.week === "12") {
        r.week = "7";
        finalresult.push(r);
      } else if (r.week === "7") {
        finalresult.push(r);
      }
    })
    return { finalresult, "s": 7 };
  } else {
    console.log(rec_exercisetitle);
    let focusExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "title": rec_exercisetitle } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
    // breathing_exercises = breathing_exercises.concat(focusExercises);
    for (let i = 0; i < focusExercises.length; i++) {
      focusExercises[i].recommended_exercises.image = "";
      finalresult.push(focusExercises[i].recommended_exercises);
    }
    // console.log(focusExercises);
    if (clearanceflag === 1 && rec_exercisetitle === "SPINE CLEARING") {
      let clearanceExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "title": "SHOULDER CLEARING" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
      //breathing_exercises = breathing_exercises.concat(mobilityExercises);
      console.log('in shoulder clearing');
      for (let i = 0; i < clearanceExercises.length; i++) {
        clearanceExercises[i].recommended_exercises.image = "";
        finalresult.push(clearanceExercises[i].recommended_exercises);
      }
    }
    if (mobilityflag === 1) {
      let mobilityExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "title": "MOBILITY" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
      // breathing_exercises = breathing_exercises.concat(mobilityExercises);
      console.log('in mobility');
      for (let i = 0; i < mobilityExercises.length; i++) {
        mobilityExercises[i].recommended_exercises.image = "";
        finalresult.push(mobilityExercises[i].recommended_exercises);
      }
    }

    // for (let i = 0; i < breathing_exercises.length; i++) {
    //   finalresult.push(breathing_exercises[i].recommended_exercises);
    // }
    return { finalresult, "s": 12 };
  }
}
let organisationIds = [];
async function organisationIdList(org_id) {

  let parentOrganisations = await Organisation.find({ parentOrgId: org_id }, { _id: 1 }).exec();
  if (parentOrganisations.length > 0) {

    for (let i = 0; i < parentOrganisations.length; i++) {
      console.log(parentOrganisations[i]._id);
      (organisationIds.indexOf(ObjectId(parentOrganisations[i]._id).valueOf().toString()) === -1) ? organisationIds.push(ObjectId(parentOrganisations[i]._id).valueOf().toString()) : console.log("This item already exists");
      await organisationIdList(ObjectId(parentOrganisations[i]._id).valueOf().toString());
    }
  } else {
    (organisationIds.indexOf(org_id) === -1) ? organisationIds.push(org_id) : console.log("This item already exists");
  }
  return organisationIds;
}

async function organisationHierarchy(req, parentid, organisationName) {
  let childs = [];
  if (parentid != "NA") {
    let orgId = await Organisation.find({ parentOrgId: parentid }, { _id: 1, organisationName: 1, createdAt: 1 }).exec();
    if (orgId.length > 0) {
      for (let i = 0; i < orgId.length; i++) {
        let s = await organisationHierarchy(req, ObjectId(orgId[i]._id).valueOf().toString(), orgId[i].organisationName);
        childs.push(s);
      }
      if (req.body.orglist.includes(parentid)) {
        return { "value": parentid, "children": childs, "text": organisationName, "checked": true };
      } else {
        return { "value": parentid, "children": childs, "text": organisationName, "checked": false };
      }
    } else {
      if (req.body.orglist.includes(parentid)) {
        return { "value": parentid, "children": [], "text": organisationName, "checked": true };
      } else {
        return { "value": parentid, "children": [], "text": organisationName, "checked": false };
      }
    }
  } else {
    return organisationList;
  }
}
async function creationOrganisationHierarchy(req, parentid, organisationName, createdAt) {
  let childs = [];
  if (parentid != "NA") {
    let orgId = await Organisation.find({ parentOrgId: parentid }, { _id: 1, organisationName: 1, createdAt: 1 }).exec();
    if (orgId.length > 0) {
      for (let i = 0; i < orgId.length; i++) {
        let s = await creationOrganisationHierarchy(req, ObjectId(orgId[i]._id).valueOf().toString(), orgId[i].organisationName, orgId[i].createdAt);
        childs.push(s);
      }
      if (req.body.orglist.includes(parentid)) {
        return { "value": parentid, "children": childs, "text": organisationName, "createdAt": createdAt, "checked": true };
      } else {
        return { "value": parentid, "children": childs, "text": organisationName, "createdAt": createdAt, "checked": false };
      }
    } else {
      if (req.body.orglist.includes(parentid)) {
        return { "value": parentid, "children": [], "text": organisationName, "createdAt": createdAt, "checked": true };
      } else {
        return { "value": parentid, "children": [], "text": organisationName, "createdAt": createdAt, "checked": false };
      }
    }
  } else {
    return organisationList;
  }
}

// create and connect redis client to local instance.
// const client = redis.createClient(6379);

// echo redis errors to the console
// client.on('error', (err) => {
//     console.log("Error " + err)
// });

module.exports = {

  getMovementExercises: async (req, res) => {
    let status = 200;
    Exercise.find({}, (err, exercises) => {
      if (err) {
        status = 209;
        return res.status(status).json({
          status: status,
          exercises: 'No Exercises found'
        })
      } else {
        status = 200;
        return res.status(status).json({
          status: status,
          exercises: exercises
        })
      }
    });
    // // key to store results in Redis store
    // const exercisesRedisKey = 'exercises';

    // // Try fetching the result from Redis first in case we have it cached
    // return client.get(exercisesRedisKey, (err, exercises) => {

    //   // If that key exists in Redis store
    //   if (exercises) {

    //     return res.status(200).json({
    //       status: 200,
    //       source: 'cache',
    //       exercises: JSON.parse(exercises)
    //     })
    //   } else { // Key does not exist in Redis store

    //     // Fetch directly from remote api
    //     Exercise.find({}, (err, exercises) => {
    //       if (err) {
    //         status = 209;
    //         return res.status(status).json({
    //           status: status,
    //           exercises: 'No Exercises found'
    //         })
    //       } else {
    //         // Save the  API response in Redis store,  data expire time in 3600 seconds, it means one hour
    //         client.setex(exercisesRedisKey, 3600, JSON.stringify(exercises))

    //         // Send JSON response to client
    //         return res.status(200).json({
    //           status: 200,
    //           exercises: exercises
    //         })
    //       }
    //     });
    //   }
    // });
  },
  listMovementExercises: async (req, res) => {
    let status = 200;
    console.log('mp exercises', req.body)
    //let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    let user = await User.aggregate([{ $match: { _id: ObjectId(req.body.userid) } }, {
      $project: {
        roles: {
          $filter: {
            input: '$roles',
            as: 'role',
            cond:
            {
              $and: [
                { $eq: ['$$role.role_id', "1"] },
                { $eq: ['$$role.org_id', ObjectId(req.body.id)] }
              ]
            }
          }
        },
        _id: 0
      }
    }]).exec();
    console.log('mp', user[0].roles[0].isMovementDone)
    if (user.length > 0) {
      let referralCode = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { code: 1, isMskEnabled: 1, configurations: 1, _id: 0 }).exec();
      Exercise.find({}, (err, exercises) => {
        if (err) {
          status = 209;
          res.status(status).json({
            status: status,
            exercises: 'No Exercises found'
          })
        } else {
          status = 200;
          res.status(status).json({
            status: status,
            message: "Moveprint configurations",
            exercises: exercises,
            isMovementDone: user[0].roles[0].isMovementDone,
            configuration: { "referralCode": referralCode.code, isMskEnabled: referralCode.isMskEnabled, mskConfigurations: referralCode.configurations.mskConfigurations, moveprintConfigurations: referralCode.configurations.moveprintConfigurations }
          })
        }
      });
    } else {
      return res.status(209).json({
        status: 209,
        exercises: 'User not found'
      })
    }

  },
  particularOrganisatonHeirarchy: async (req, res) => {
    let organisationList = [];
    if (req.body.createdAt != undefined)
      organisationList = await creationOrganisationHierarchy(req, req.body.id, req.body.organisationName, req.body.createdAt);
    else
      organisationList = await organisationHierarchy(req, req.body.id, req.body.organisationName);
    return res.status(200).json({
      status: 200,
      message: "organization List",
      organisations: [organisationList]
    })
  },
  getFaqs: (req, res) => {
    let status = 200;
    Faq.find({}, (err, faqs) => {
      if (err) {
        res.status(209).json({
          status: 209,
          faqs: err
        })
      }
      else {
        status = 200;
        res.status(status).json({
          status: status,
          faqs: faqs
        })
      }
    });

  },
  movementExerciseById: (req, res) => {
    let status = 200;
    Exercise.findOne({ exercise_id: req.params.exercise_id }, (err, exercise) => {
      if (exercise === null) {
        status = 200;
        res.status(status).json({
          status: status,
          exercises: 'Exercises not found'
        })
      }
      else {
        status = 200;
        res.status(status).json({
          status: status,
          exercises: exercise
        })
      }
    });

  },
  nextMovementExercise: (req, res) => {
    let { exerciseId, score } = req.body;
    let result = {};
    Exercise.findOne({ exercise_id: exerciseId }, (err, exercise) => {
      if (err) {
        result.status = 209;
        result.exercises = err;
        res.status(result.status).send(result);
      } else if (exercise === null) {
        result.status = 200;
        result.exercises = 'No exercise with this id';
        res.status(result.status).send(result);
      }
      else {
        result.status = 200;
        if (score === exercise.pass_score) {
          let nextExerciseId = exercise.yes_navigation_id;
          Exercise.findOne({ exercise_id: nextExerciseId }, function (err, newExercise) {
            if (newExercise === null || err) {
              result.status = 209;
              result.exercises = 'Next exercise not available';
              res.status(result.status).send(result);
            } else {
              result.status = 200;
              result.exercises = newExercise;
              res.status(result.status).send(result);
            }
          })
        } else if (score === exercise.fail_score) {
          let nextExerciseId = exercise.no_navigation_id;
          Exercise.findOne({ exercise_id: nextExerciseId }, function (err, newExercise) {
            if (newExercise === null || err) {
              result.status = 209;
              result.exercises = 'Next exercise not available';
              res.status(result.status).send(result);
            } else {
              result.status = 200;
              result.exercises = newExercise;
              res.status(result.status).send(result);
            }
          })
        } else {
          result.status = 209;
          result.exercises = 'Please provide valid score';
          res.status(result.status).send(result);
        }
      }
    });
  },
  updateMovementExercise: (req, res) => {
    let exercise = req.body;
    let message = '';
    let status = 200;
    Exercise.updateOne({ exercise_id: req.params.exercise_id }, exercise).then(updated => {
      if (updated) {
        status = 200;
        message = updated;
      } else {
        status = 210;
        message = 'No exercise found';
      }
      res.status(status).json({
        status: status,
        message: message
      })
    }).catch(err => {
      status = 500;
      res.status(status).json({
        status: status,
        message: err
      })
    })
  },
  jwPlayerUrl: (req, res) => {
    let hostedId = req.body.hostedid;
    let exerciseVideoUrl = util.generatevideourl(hostedId);
    request.get({
      uri: exerciseVideoUrl
    }, ((err, response, body) => {
      if (err) {
        return res.status(400).json({
          status: 400,
          message: err
        })
      } else {
        return res.status(200).json({
          status: 200,
          exercisecontent: JSON.parse(body)
        })
      }
    })
    );
  },
  calculateMovementScore: async (req, res) => {
    let resultVideos = {
      "TOE TOUCH": "uMkVZ9JN",
      "UPPER BODY MOBILITY": "Fhkqj62Y",
      "ROTATION": "h9UPUHxp",
      "SQUAT": "nUJuy4tk",
      "BALANCE & REACH": "UTqnCXQ3",
      "SYMMETRY": "ATplVchh",
      "PAIN FLOW": "hNv77IWq",
      "SHOULDER CLEARING": "",
      "SPINE CLEARING": ""
    }
    let exercisedetails = req.body;
    let focusarea_description = '';
    let focusarea_features = '';
    let resultHostid = '';
    let passAll = false;
    let painResult = false;
    let previousMovementScore = [];
    let organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { settings: 1, categoryDescription: 1, isMskEnabled: 1, _id: 0 }).exec();
    //let userId = await User.findOne({ _id: ObjectId(req.body.userid) }, { email: 1 }).exec();
    exercisedetails.email = req.body.email;
    let userReferral = await User.aggregate([{ $match: { _id: ObjectId(req.body.userid) } }, {
      $project: {
        roles: {
          $filter: {
            input: '$roles',
            as: 'role',
            cond:
            {
              $and: [
                { $eq: ['$$role.role_id', "1"] },
                { $eq: ['$$role.org_id', ObjectId(req.body.id)] }
              ]
            }
          }
        },
        _id: 0
      }
    }]).exec();
    console.log('score input', userReferral.length, exercisedetails.email, req.body.email)
    let userIds = [];
    let deviceIds = [];
    let proDetails = [];
    //let proUser = await User.findOne({  _id: ObjectId(userReferral[0].roles[0].pro_id),roles: { $elemMatch: {org_id: ObjectId(req.body.id) } } }, { _id: 1, deviceId: 1 }).exec();
    if (userReferral[0].roles.length > 1) {
      for (let i = 0; i < userReferral[0].roles.length; i++) {
        let proUser = await User.findOne({ roles: { $elemMatch: { proReferral: userReferral[0].roles[i].referralCode, org_id: ObjectId(req.body.id) } } }, { _id: 1, settings: 1, deviceId: 1 }).exec();
        if (proUser != null) {
          if (proUser.settings[0].enablePushNotifications === true) {
            userIds.push(proUser._id);
            proDetails.push({ "user_id": proUser._id, "deviceId": proUser.deviceId });
            proUser.deviceId != null ? deviceIds.push(proUser.deviceId) : "";
          }
        }
      }
    } else {

      let proUser = await User.findOne({ roles: { $elemMatch: { proReferral: userReferral[0].roles[0].referralCode, org_id: ObjectId(req.body.id) } } }, { _id: 1, settings: 1, deviceId: 1 }).exec();
      if (proUser != null) {
        if (proUser.settings[0].enablePushNotifications === true) {
          userIds.push(proUser._id);
          proDetails.push({ "user_id": proUser._id, "deviceId": proUser.deviceId });
          proUser.deviceId != null ? deviceIds.push(proUser.deviceId) : "";
        }
      }
    }
    const mskDescription = {
      "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
      "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
      "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
    };
    const mskFeatures = {
      "HEALTH": organisationSettings.categoryDescription[0].mskFeatures,
      "WELLNESS": organisationSettings.categoryDescription[1].mskFeatures,
      "FITNESS": organisationSettings.categoryDescription[2].mskFeatures,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskFeatures,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskFeatures
    };
    var scoreinput = util.scorecompute(exercisedetails);
    console.log('calculated score', scoreinput)
    let result = [];
    var d = [];
    Score.find({}, async (err, scores) => {
      if (err) {
        status = 209;
        res.status(status).json({
          status: status,
          message: err
        })
      } else {
        d = scores;
        for (var i = 0; i < scoreinput.length; i++) {
          if (scoreinput[i].pain === "true") {
            result.push({
              "email": exercisedetails.email,
              "groupid": scoreinput[i].group_id,
              "title": scoreinput[i].title + ' TEST',
              "pain": scoreinput[i].pain,
              "score": 0,
              "isDisplay": false
            });
          }
          else {
            var obj = {};
            for (var j = 0; j < d.length; j++) {
              if ((scoreinput[i].group_id === d[j].group_id) && (scoreinput[i].score === d[j].result)) {
                obj = {
                  "email": exercisedetails.email,
                  "groupid": d[j].group_id,
                  "title": [6, 7].includes(d[j].group_id) ? scoreinput[i].title : scoreinput[i].title + ' TEST',
                  "pain": scoreinput[i].pain,
                  "score": d[j].score,
                  "isDisplay": false
                };
              }
            }
            if (Object.keys(obj).length === 0) {
              obj = {
                "email": exercisedetails.email,
                "groupid": scoreinput[i].group_id,
                "title": [6, 7].includes(scoreinput[i].group_id) ? scoreinput[i].title : scoreinput[i].title + ' TEST',
                "pain": scoreinput[i].pain,
                "score": 0,
                "isDisplay": false
              };
            }
            result.push(obj);
          }
        }
        var f = [];
        let previousFocusarea = "";
        let previousRecommendedExercises = [];
        let preResult = [];
        let displayFocus = [];
        exercisedetails.focusarea = await util.focusedexercise(result);
        console.log('focussss', exercisedetails.focusarea)
        preResult = await Result.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec();
        if (preResult.length > 0 && (preResult[0].recommended_exercises != undefined) && (exercisedetails.focusarea.replace('TEST', '').trim() === preResult[0].focusarea) && (preResult[0].totalSessions != preResult[0].progress)) {
          console.log("in same focus")
          await User.updateMany({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } },
            { $set: { "roles.$[e].isMovementDone": true, "roles.$[e].isRecommendedExercisesDone": false } },
            { "arrayFilters": [{ "e.role_id": "1", "e.org_id": ObjectId(req.body.id) }] }
          ).exec();
          await Result.updateOne({ _id: preResult[0]._id }, { $set: { movementscore: result, groups: exercisedetails.groups } }).exec();
          // module.exports.homePage({
          //   "body": {
          //     "email": exercisedetails.email,
          //     "userid": req.body.userid,
          //     "id": req.body.id
          //   }
          // }, res);

          focusarea_description = mpDescription[exercisedetails.focusarea.replace('TEST', '').trim()];
          focusarea_features = mpFeatures[exercisedetails.focusarea.replace('TEST', '').trim()];
          previousMovementScore = preResult[0].movementscore;
          result.forEach(ex => {
            if (ex.groupid < 6) {
              ex.isDisplay = true; f.push(ex)
            }
            else if ((ex.groupid === 6) && (ex.pain === "yes")) {
              ex.isDisplay = true; f.push(ex)
            } else if ((ex.groupid === 7) && (ex.pain === "yes")) {
              ex.isDisplay = true; f.push(ex)
            }
            else {
              ex.isDisplay = false; f.push(ex)
            }
          })
          if (!["SPINE CLEARING", "SHOULDER CLEARING"].includes(exercisedetails.focusarea)) {
            for (var i = 0; i < 5; i++) {
              if (result[i].pain === "true") {
                painResult = true;
                focusarea_description = mpDescription["Pain " + result[i].title.replace('TEST', '').trim()];
                focusarea_features = mpFeatures["Pain " + result[i].title.replace('TEST', '').trim()];
                displayFocus = result[i].title.replace('TEST', '').trim();
                break;
              }
            }
          }
          if (painResult === true) {
            resultHostid = resultVideos["PAIN FLOW"];
          } else {
            resultHostid = resultVideos[exercisedetails.focusarea];
          }
          if (exercisedetails.focusarea === "SYMMETRY")
            passAll = true;

          await module.exports.individualMovementReport({
            "query": {
              "mptdate": "",
              "userid": req.body.userid,
              "id": req.body.id
            }
          }, res);
          User.findOne({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { deviceId: 1, profileimage: 1, first: 1, settings: 1, last: 1, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }).then(async data => {
            if (data.roles[0].isMSKDone) {
              MskResult.find({ user_id: ObjectId(req.body.userid) }).sort({ mskdate: -1 }).limit(1).exec(async (err, mskresult) => {
                if (err || !mskresult) {
                  console.log('msk error')
                  return res.status(210).json({
                    status: 210,
                    message: err
                  })
                } else {
                  mskDetails = mskresult[0];
                  return res.status(200).json({
                    status: 200,
                    focusArea: (painResult === true) ? displayFocus : exercisedetails.focusarea,
                    description: focusarea_description || '',
                    mpFeatures: focusarea_features || '',
                    movementscore: f,
                    isWeekThird: false,
                    resultHostid: resultHostid,
                    previousMovementScore: previousMovementScore,
                    isMSKDone: data.roles[0].isMSKDone,
                    passAll: passAll,
                    isMskEnabled: organisationSettings.isMskEnabled,
                    isMovementDone: true,
                    mskresult: {
                      mskdate: mskresult[0].mskdate,
                      bmi: mskresult[0].bmi || '',
                      bmiCategory: mskresult[0].bmiCategory || '',
                      pqsiStatus: mskresult[0].pqsiStatus || false,
                      mskCategory: mskresult[0].mskCategory || '',
                      pqsiscore: mskresult[0].pqsiscore || 0,
                      smokingStatus: mskresult[0].smokingStatus || false,
                      mskDescription: mskDescription[mskresult[0].mskCategory],
                      mskFeatures: mskFeatures[mskresult[0].mskCategory],
                      bmiDescription: bmiDescription[mskresult[0].bmiCategory],
                      bmiFeatures: bmiFeatures[mskresult[0].bmiCategory],
                      week: "1"
                    }
                  })
                }
              });
            } else {

              return res.status(200).json({
                status: 200,
                movementscore: f,
                isMovementDone: true,
                focusArea: (painResult === true) ? displayFocus : exercisedetails.focusarea,
                previousMovementScore: previousMovementScore,
                passAll: passAll,
                resultHostid: resultHostid,
                isWeekThird: false,
                description: focusarea_description || '',
                mpFeatures: focusarea_features || '',
                isMSKDone: data.roles[0].isMSKDone,
                isMskEnabled: organisationSettings.isMskEnabled,
                week: "1",
                mskresult: {
                  mskdate: '',
                  bmi: '',
                  bmiCategory: '',
                  pqsiStatus: false,
                  mskCategory: '',
                  pqsiscore: 0,
                  smokingStatus: false,
                  mskDescription: '',
                  mskFeatures: '',
                  bmiDescription: '',
                  bmiFeatures: ''
                }
              })

            }
          })
            .catch(err => {
              res.status(500).json({
                status: 500,
                message: err
              })
            });
        } else {

          if (preResult.length > 0 && (preResult[0].recommended_exercises != undefined) && preResult[0].recommended_exercises.length > 0 && (!["1", "2"].includes(preResult[0].recommended_exercises[0].week))) {
            previousFocusarea = preResult[0].focusarea;
            previousRecommendedExercises = preResult[0].recommended_exercises;
            //let previousScore = [];
            // preResult[0].movementscore.filter(ex => { if (ex.groupid < 6) { ex.isDisplay = true; previousScore.push(ex) } })
            previousMovementScore = preResult[0].movementscore;
            let r = await improvementCorrectiveExercises(result, preResult[0].movementscore, exercisedetails.focusarea.replace('TEST', '').trim(), previousFocusarea.replace('TEST', '').trim(), preResult[0].recommended_exercises);
            exercisedetails.recommended_exercises = await r.finalresult;
            console.log('llllll', exercisedetails.recommended_exercises.length);
            exercisedetails.totalSessions = r.s;
          } else {
            exercisedetails.recommended_exercises = await improvementCorrectiveExercises(result, [], exercisedetails.focusarea.replace('TEST', '').trim(), previousFocusarea, previousRecommendedExercises);
            exercisedetails.totalSessions = 12;
            exercisedetails.recommended_exercises = await exercisedetails.recommended_exercises.finalresult;
            console.log('rrr', exercisedetails.recommended_exercises.length)
          }

          exercisedetails.movementscore = result;
          // exercisedetails.recommended_exercises = await correctiveExercises(result, '1');
          // exercisedetails.recommended_exercises = exercisedetails.recommended_exercises.concat(await correctiveExercises(result, '2'));
          //exercisedetails.focusarea = await util.focusedexercise(f);
          focusarea_description = mpDescription[exercisedetails.focusarea.replace('TEST', '').trim()];
          focusarea_features = mpFeatures[exercisedetails.focusarea.replace('TEST', '').trim()];
          result.forEach(ex => {
            if (ex.groupid < 6) {
              ex.isDisplay = true; f.push(ex)
            }
            else if ((ex.groupid === 6) && (ex.pain === "yes")) {
              ex.isDisplay = true; f.push(ex)
            } else if ((ex.groupid === 7) && (ex.pain === "yes")) {
              ex.isDisplay = true; f.push(ex)
            }
            else {
              ex.isDisplay = false; f.push(ex)
            }
          })
          if (!["SPINE CLEARING", "SHOULDER CLEARING"].includes(exercisedetails.focusarea)) {
            for (var i = 0; i < 5; i++) {
              if (result[i].pain === "true") {
                painResult = true;
                focusarea_description = mpDescription["Pain " + result[i].title.replace('TEST', '').trim()];
                focusarea_features = mpFeatures["Pain " + result[i].title.replace('TEST', '').trim()];
                displayFocus = result[i].title.replace('TEST', '').trim();
                break;
              }
            }
          }
          console.log('focus area', exercisedetails.focusarea)
          if (exercisedetails.focusarea !== undefined) {
            exercisedetails.focusarea = exercisedetails.focusarea.replace('TEST', '').trim();
            if (exercisedetails.focusarea === "SYMMETRY")
              passAll = true;
            exercisedetails.day = 0;
            exercisedetails.org_id = ObjectId(req.body.id);
            //let userDet = await User.findOne({ _id: ObjectId(req.body.userid) }, { deviceId: 1, _id: 1, profileimage: 1, first: 1, last: 1 }).exec();
            exercisedetails.user_id = ObjectId(req.body.userid);
            if (painResult === true) {
              resultHostid = resultVideos["PAIN FLOW"];
            } else {
              resultHostid = resultVideos[exercisedetails.focusarea];
            }
            let resultObj = new Result({
              email: exercisedetails.email,
              org_id: exercisedetails.org_id,
              user_id: exercisedetails.user_id,
              totalSessions: exercisedetails.totalSessions,
              day: exercisedetails.day,
              exercises: [],
              pain: (painResult === true) ? true : false,
              focusarea: exercisedetails.focusarea,
              movementscore: exercisedetails.movementscore,
              groups: exercisedetails.groups,
              recommended_exercises: exercisedetails.recommended_exercises
            });
            resultObj.save(async (err, ex) => {
              console.log('inserted', err);
              if (err) {
                return res.status(210).json({
                  status: 210,
                  message: err
                })
              } else {
                if (preResult.length > 0) {
                  await module.exports.individualMovementReport({
                    "query": {
                      "mptdate": "",
                      "userid": req.body.userid,
                      "id": req.body.id
                    }
                  }, res);
                }
                User.updateMany({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } },
                  { $set: { "roles.$[e].isMovementDone": true, "roles.$[e].isRecommendedExercisesDone": false } },
                  { "arrayFilters": [{ "e.org_id": ObjectId(req.body.id), "e.role_id": "1" }] }
                ).exec((err, mp) => {
                  if (err) {
                    return res.status(210).json({
                      status: 210,
                      message: err
                    })
                  } else {
                    User.findOne({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { deviceId: 1, profileimage: 1, settings: 1, first: 1, last: 1, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }).then(async data => {
                      if (userIds.length > 0) {
                        let fcmdata = {
                          title: "Moveprint",
                          navigationType: "",
                          body: (data.first === undefined ? exercisedetails.email : (data.first + " " + data.last)) + " has completed the requested Moveprint. Click here to view their results!",
                          notification_type: "i",
                          result_type: "MPRESULT",
                          group_name: "",
                          profileimage: data.profileimage,
                          name: (data.first === undefined ? exercisedetails.email : (data.first + " " + data.last)),
                          //pro_name: (userDet.first === undefined ? exercisedetails.email : (userDet.first + " " + userDet.last)),
                          user_ids: proDetails,
                          user_id: userIds,
                          userId: ObjectId(req.body.userid),
                          type: "MP COMPLETE"
                        };
                        if (deviceIds.length > 0)
                          await util.pushnotification(fcmdata, req.body.id, "single", deviceIds);
                      }
                      if (data.deviceId != null && data.settings[0].enablePushNotifications === true) {
                        await util.subscribeTopic("single", data.deviceId, "DER");
                        await NotificationQueue.findOneAndUpdate({ user_id: ObjectId(req.body.userid), message_type: "MPR" }, { $set: { status: true } }, { upsert: true, sort: { _id: -1 } }).exec();
                      }
                      if (data.roles[0].isMSKDone) {
                        MskResult.find({ user_id: ObjectId(req.body.userid) }).sort({ mskdate: -1 }).limit(1).exec(async (err, mskresult) => {
                          if (err || !mskresult) {
                            console.log('msk error')
                            return res.status(210).json({
                              status: 210,
                              message: err
                            })
                          } else {
                            mskDetails = mskresult[0];

                            if (organisationSettings.settings.isClioEnabled) {
                              console.log('msk done1')
                              const clioUserOptions = {
                                url: 'https://api.clio.health/service/user/account/' + exercisedetails.email.toLowerCase(),
                                method: 'GET',
                                headers: {
                                  'Content-Type': 'application/json',
                                  'Authorization': 'Service ' + process.env.CLIO_KEY
                                }
                              };

                              await request(clioUserOptions, async (cerr, clioResponse, userBody) => {
                                if (cerr) {
                                  console.log('clio err msg', cerr)
                                  return res.status(210).json({
                                    status: 210,
                                    message: cerr
                                  })
                                } else {
                                  console.log('1st response', userBody)
                                  if (clioResponse.statusCode == 200) {
                                    console.log('msk done 2')
                                    var userid = JSON.parse(userBody).data[0].attributes.userid;
                                    var messageJson = await {
                                      "message": "<span style=\"color:#61217F;font-weight:bold;text-decoration:underline;\">Moveprint Results</span><br>Moveprint Focus :" + exercisedetails.focusarea + " <br>MSK Category :" + mskresult[0].mskCategory + "<br><span style=\"color:#6BBD\">BMI :" + mskresult[0].bmi + "</span><br>",

                                      "messagetype": "attachment",
                                      "attachments": [
                                        {
                                          "filename": "wellness.svg",
                                          "filedata": clioMskDescription[mskresult[0].mskCategory]
                                        }
                                      ],
                                      "patientid": userid
                                    }
                                    const clioMessageOptions = {
                                      url: 'https://api.clio.health/service/messaging',
                                      method: 'POST',
                                      body: messageJson,
                                      json: true,
                                      headers: {
                                        'Content-Type': 'application/json',
                                        'Authorization': 'Service ' + process.env.CLIO_KEY
                                      }
                                    };
                                    await request(clioMessageOptions, (merr, messageResponse, messageBody) => {
                                      console.log('Clio message', messageBody);
                                      if (merr) {
                                        return res.status(210).json({
                                          status: 210,
                                          message: merr
                                        })
                                      }

                                    });
                                  } else {
                                    console.log('msk error');
                                    return res.status(200).json({
                                      status: 200,
                                      focusArea: (painResult === true) ? displayFocus : exercisedetails.focusarea,
                                      description: focusarea_description || '',
                                      mpFeatures: focusarea_features || '',
                                      movementscore: f,
                                      isWeekThird: false,
                                      resultHostid: resultHostid,
                                      previousMovementScore: previousMovementScore,
                                      isMSKDone: data.roles[0].isMSKDone,
                                      isMskEnabled: organisationSettings.isMskEnabled,
                                      passAll: passAll,
                                      isMovementDone: true,
                                      mskresult: {
                                        mskdate: mskresult[0].mskdate,
                                        bmi: mskresult[0].bmi || '',
                                        bmiCategory: mskresult[0].bmiCategory || '',
                                        pqsiStatus: mskresult[0].pqsiStatus || false,
                                        mskCategory: mskresult[0].mskCategory || '',
                                        pqsiscore: mskresult[0].pqsiscore || 0,
                                        smokingStatus: mskresult[0].smokingStatus || false,
                                        mskDescription: mskDescription[mskresult[0].mskCategory],
                                        mskFeatures: mskFeatures[mskresult[0].mskCategory],
                                        bmiDescription: bmiDescription[mskresult[0].bmiCategory],
                                        bmiFeatures: bmiFeatures[mskresult[0].bmiCategory],
                                        week: "1"
                                      }
                                    })

                                  }
                                }
                              });
                            }
                            return res.status(200).json({
                              status: 200,
                              focusArea: (painResult === true) ? displayFocus : exercisedetails.focusarea,
                              description: focusarea_description || '',
                              mpFeatures: focusarea_features || '',
                              movementscore: f,
                              isWeekThird: false,
                              resultHostid: resultHostid,
                              previousMovementScore: previousMovementScore,
                              isMSKDone: data.roles[0].isMSKDone,
                              passAll: passAll,
                              isMskEnabled: organisationSettings.isMskEnabled,
                              isMovementDone: true,
                              mskresult: {
                                mskdate: mskresult[0].mskdate,
                                bmi: mskresult[0].bmi || '',
                                bmiCategory: mskresult[0].bmiCategory || '',
                                pqsiStatus: mskresult[0].pqsiStatus || false,
                                mskCategory: mskresult[0].mskCategory || '',
                                pqsiscore: mskresult[0].pqsiscore || 0,
                                smokingStatus: mskresult[0].smokingStatus || false,
                                mskDescription: mskDescription[mskresult[0].mskCategory],
                                mskFeatures: mskFeatures[mskresult[0].mskCategory],
                                bmiDescription: bmiDescription[mskresult[0].bmiCategory],
                                bmiFeatures: bmiFeatures[mskresult[0].bmiCategory],
                                week: "1"
                              }
                            })
                          }
                        });
                      } else {

                        if (organisationSettings.settings.isClioEnabled) {
                          console.log('entered1')
                          const clioUserOptions = {
                            url: 'https://api.clio.health/service/user/account/' + exercisedetails.email.toLowerCase(),
                            method: 'GET',
                            headers: {
                              'Content-Type': 'application/json',
                              'Authorization': 'Service ' + process.env.CLIO_KEY
                            }
                          };

                          await request(clioUserOptions, async (cerr, clioResponse, userBody) => {
                            if (cerr) {
                              return res.status(210).json({
                                status: 210,
                                message: cerr
                              })
                            } else {
                              if (clioResponse.statusCode == 200) {
                                console.log('in msk 1st time')
                                var userid = JSON.parse(userBody).data[0].attributes.userid;
                                var messageJson = await {
                                  "message": "<span style=\"color:#61217F;font-weight:bold;text-decoration:underline;\">Moveprint Results</span><br>Moveprint Focus :" + exercisedetails.focusarea,
                                  "messagetype": "text",
                                  "patientid": userid
                                }
                                const clioMessageOptions = {
                                  url: 'https://api.clio.health/service/messaging',
                                  method: 'POST',
                                  body: messageJson,
                                  json: true,
                                  headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': 'Service ' + process.env.CLIO_KEY
                                  }
                                };
                                await request(clioMessageOptions, (merr, messageResponse, messageBody) => {
                                  console.log('Clio message', messageBody);
                                  if (merr) {
                                    return res.status(210).json({
                                      status: 210,
                                      message: merr
                                    })
                                  }

                                });
                              } else {
                                console.log('msk 1st error');
                                return res.status(200).json({
                                  status: 200,
                                  movementscore: f,
                                  isMovementDone: true,
                                  focusArea: (painResult === true) ? displayFocus : exercisedetails.focusarea,
                                  previousMovementScore: previousMovementScore,
                                  passAll: passAll,
                                  resultHostid: resultHostid,
                                  isWeekThird: false,
                                  description: focusarea_description || '',
                                  mpFeatures: focusarea_features || '',
                                  isMSKDone: data.roles[0].isMSKDone,
                                  isMskEnabled: organisationSettings.isMskEnabled,
                                  week: "1",
                                  mskresult: {
                                    mskdate: '',
                                    bmi: '',
                                    bmiCategory: '',
                                    pqsiStatus: false,
                                    mskCategory: '',
                                    pqsiscore: 0,
                                    smokingStatus: false,
                                    mskDescription: '',
                                    mskFeatures: '',
                                    bmiDescription: '',
                                    bmiFeatures: ''
                                  }
                                })
                              }
                            }
                          })
                        }

                        return res.status(200).json({
                          status: 200,
                          movementscore: f,
                          isMovementDone: true,
                          focusArea: (painResult === true) ? displayFocus : exercisedetails.focusarea,
                          previousMovementScore: previousMovementScore,
                          passAll: passAll,
                          resultHostid: resultHostid,
                          isWeekThird: false,
                          description: focusarea_description || '',
                          mpFeatures: focusarea_features || '',
                          isMSKDone: data.roles[0].isMSKDone,
                          isMskEnabled: organisationSettings.isMskEnabled,
                          week: "1",
                          mskresult: {
                            mskdate: '',
                            bmi: '',
                            bmiCategory: '',
                            pqsiStatus: false,
                            mskCategory: '',
                            pqsiscore: 0,
                            smokingStatus: false,
                            mskDescription: '',
                            mskFeatures: '',
                            bmiDescription: '',
                            bmiFeatures: ''
                          }
                        })

                      }
                    })
                      .catch(err => {
                        console.log('errrr', err)
                        res.status(500).json({
                          status: 500,
                          message: err
                        })
                      });
                  }
                });
                console.log('Record inserted');
              }
            })

            // Result.create(exercisedetails)
            //   .then(async exercise => {
            //     await User.update({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } },
            //       { $set: { "roles.$[e].isMovementDone": true, "roles.$[e].isRecommendedExercisesDone": false } },
            //       { "arrayFilters": [{ "e.role_id": "1" }], "multi": true }
            //     ).exec();

            //     if (userIds.length > 0) {
            //       let fcmdata = {
            //         title: "Moveprint",
            //         navigationType: "",
            //         body: (userDet.first === undefined ? exercisedetails.email : (userDet.first + " " + userDet.last)) + " has completed the requested Moveprint. Click here to view their results!",
            //         notification_type: "i",
            //         result_type: "MPRESULT",
            //         group_name: "",
            //         profileimage: userDet.profileimage,
            //         name: (userDet.first === undefined ? exercisedetails.email : (userDet.first + " " + userDet.last)),
            //         //pro_name: (userDet.first === undefined ? exercisedetails.email : (userDet.first + " " + userDet.last)),
            //         user_ids: proDetails,
            //         user_id: userIds,
            //         userId: ObjectId(req.body.userid),
            //         type: "MP COMPLETE"
            //       };
            //       await util.pushnotification(fcmdata, req.body.id, "single", deviceIds);
            //     }
            //     if (userDet.deviceId != null)
            //       await util.subscribeTopic("single", userDet.deviceId, "DER");
            //     await NotificationQueue.findOneAndUpdate({ user_id: ObjectId(req.body.userid), message_type: "MPR" }, { $set: { status: true } }, { new: true, sort: { _id: -1 } }, (err, r) => {
            //       console.log(err, r);
            //     });
            //     console.log('Record inserted');
            //   })
            //   .catch(err => console.log('err', err))
          }
        }
      }
    });

  },
  homePage: async (req, res) => {
    let focusarea_description = '';
    let focusarea_features = '';
    let focusArea = '';
    let resultDetails = {};
    let notificationCount = 0;
    let previousMovementScore = [];
    let isMovementDone, isMSKDone, isRecommendedExercisesDone, passAll, isWeekThird;
    isMovementDone = isMSKDone = isRecommendedExercisesDone = passAll = isWeekThird = false;
    console.log('home', req.body)
    let organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { isMskEnabled: 1, categoryDescription: 1, configurations: 1, _id: 0 }).exec();
    const info = "Steer clear of these types of exercises because they could negatively impact your progress, cause additional problems and increase your risk of injury."
    const categoryInfo = "The MSK report combines a variety of important health measures to create an overall rating of your musculoskeletal health at any given time. This enables you to monitor your current status and provides you an actionable next best step to promote musculoskeletal health and longevity."
    const mskDescription = {
      "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
      "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
      "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription,
      "BEHAVIOR": organisationSettings.categoryDescription[4].mskDescription,
      "WELLNESS 1": "You are in the Wellness category since you indicated that you are currently in pain and you have seen a medical provider for this problem. This means you should be more aware of any pain or problems arising when increasing your activities.",
      "WELLNESS 2": "You are in the Wellness category because you indicated you have had an injury or health issue in the past year. This means you should be more aware of any pain or problems arising when increasing your activities.",
      "WELLNESS 3": "You are in the Wellness Category based on your performance in certain movement tests and indicating you have been diagnosed with osteoarthritis. This means that you need to seek out advice from a fitness or healthcare professional to help design a program to address your arthritic condition.",
      "WELLNESS 4": "You are in the Wellness Category based on your performance in certain movement tests and your height and weight, your body-mass index does not meet the minimum standard. This means you need to seek out the advice of a fitness professional to establish a wellness and exercise program.",
      "WELLNESS 5": "You are in the Wellness category based on your performance in certain movement tests and you indicated you rarely engage in physical activity. This means you need to seek out the advice of a fitness professional to establish a wellness and exercise program.",
      "WELLNESS 6": "You are in the Wellness category because you indicated you had a previous injury and have not recovered to a level needed to perform at your best. This means you need to seek out the advice of a fitness professional to establish a wellness and exercise program.",
      "WELLNESS 7": "You are in the Wellness category since you indicated that you are currently in pain and you have seen a medical provider for this problem. This means you should be more aware of any pain or problems arising when increasing your activities.",
      "FITNESS 1": "You are in the Fitness category because you do not meet the minimum standard of movement quality. This means that you should continue with your current exercise program but focus on improving your movement.",
      "FITNESS 2": "You are in the Fitness category because your height and weight does not meet the minimum standard. This means that you need to focus on your nutrition and physical activity levels."
    };
    const mskFeatures = {
      "HEALTH": organisationSettings.categoryDescription[0].mskFeatures,
      "WELLNESS": organisationSettings.categoryDescription[1].mskFeatures,
      "FITNESS": organisationSettings.categoryDescription[2].mskFeatures,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskFeatures,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskFeatures,
      "BEHAVIOR": organisationSettings.categoryDescription[4].mskFeatures,
      "WELLNESS 1": "When cleared by your medical provider, seek out the advice of a fitness or healthcare professional to establish a wellness and exercise program to better meet your goals.\nLogin daily and follow your individualized movement program.\nStay as active as possible and avoid anything that increases your pain and symptoms.",
      "WELLNESS 2": "Seek out the advice of a fitness or healthcare professional to establish a wellness and exercise program to better meet your goals.\nLogin daily and follow your individualized movement program.\nIf there are no problems, continue to progress through your training and activities.",
      "WELLNESS 3": "Seek out the advice of a fitness or healthcare professional to help design a program to address your arthritic condition.\nLogin daily and follow your individualized movement program.\nStay as active as possible within the guidelines provided by your professional.",
      "WELLNESS 4": "Follow the nutrition tips provided in your BMI results.\nSeek out the advice of a fitness professional to help design a program to improve your overall health and wellness.\nLogin daily and follow your individualized movement program.\nStay as active as possible within the guidelines provided by your professional.",
      "WELLNESS 5": "Seek out the advice of a fitness professional to help design a program to increase your overall activity levels.\nLogin daily and follow your individualized movement program.",
      "WELLNESS 6": "Seek out the advice of a fitness or healthcare professional to help design a program to address your musculoskeletal condition.\nLogin daily and follow your individualized movement program.\nStay as active as possible within the guidelines provided by your professional.",
      "WELLNESS 7": "When cleared by your medical provider, seek out the advice of a fitness or healthcare professional to establish a wellness and exercise program to better meet your goals.\nLogin daily and follow your individualized movement program.\nStay as active as possible and avoid anything that increases your pain and symptoms.",
      "FITNESS 1": "Login daily and follow your individualized movement program\nPay close attention to your activities to avoid.",
      "FITNESS 2": "Follow the nutrition tips provided in your BMI results.\nLogin daily and follow your individualized movement program.\nIncrease your physical activity levels by performing activities you enjoy."
    };
    const newMskTitle = "It's time to update your MSK category.";
    const newMskDescription = "You're on your way! Now, let's check your progress.It's time to answer the wellness questionnaire and re-assess your wellness category."
    var week = "1";
    let lookupdata = await Lookup.findOne({}, { sleep: 1, smoking: 1, bmi: 1, _id: 0 }).exec();
    var mskresult;
    //let activeflag = await User.findOne({ _id: ObjectId(req.body.userid) }, { is_active: 1 }).exec();
    //let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    Result.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(2).exec(async (err, result) => {
      if (err || !result) {
        res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        notificationCount = await Notification.find({
          $or: [{ user_id: req.userid, notification_type: "i", "message.readStatus": false }]
        }).countDocuments().exec();
        console.log("unread count", notificationCount);
        var userdetail = await User.findOne({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { profileimage: 1, isMovementDone: 1, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } }, isMSKDone: 1, _id: 1, deviceId: 1, first: 1, last: 1, email: 1, profileimage: 1 }).exec();

        if (userdetail.roles[0].isMSKDone) {
          mskresult = await MskResult.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ mskdate: -1 }).limit(1).exec();
        } else {
          mskresult = {
            mskdate: '',
            isMskExpired: false,
            newMskDescription: "",
            newMskTitle: "",
            bmi: '',
            bmiCategory: '',
            pqsiStatus: false,
            mskCategory: '',
            pqsiscore: 0,
            smokingStatus: false,
            smokingHeading: '',
            smokingSummary: '',
            smokingFeatures: '',
            smokingSummary2: '',
            pqsiHeading: '',
            pqsiSummary: '',
            pqsiFeatures: '',
            pqsiSummary2: '',
            mskDescription: '',
            mskFeatures: '',
            bmiFeatures: '',
            bmiDescription: ''
          }
        }
        if (result.length > 1) {
          //let previousScore = [];
          // result[1].movementscore.filter(ex => { if (ex.groupid < 6) { ex.isDisplay = true; previousScore.push(ex) } })
          previousMovementScore = result[1].movementscore;
        } else {
          previousMovementScore = [];
        }
        let user = result[0];
        let completedRecommendedExercises = 0;
        if (result[0] == undefined) {
          return res.status(200).json({
            status: 200,
            message: "User didn't perform Movement exercises",
            isMovementDone: isMovementDone,
            isRecommendedExercisesDone: isRecommendedExercisesDone,
            isMSKDone: isMSKDone,
            isMskEnabled: organisationSettings.isMskEnabled,
            previousMovementScore: [],
            configuration: { mskConfigurations: organisationSettings.configurations.mskConfigurations, moveprintConfigurations: organisationSettings.configurations.moveprintConfigurations },
            notificationCount: 0
          })
        } else if ((result[0].recommended_exercises === undefined) || (result[0].recommended_exercises.length === 0) || (["1", "2"].includes(result[0].recommended_exercises[0].week))) {
          console.log('new MP path')
          console.log(userdetail.roles[0].isRecommendedExercisesDone)
          isRecommendedExercisesDone = userdetail.roles[0].isRecommendedExercisesDone;
          isMovementDone = await userdetail.roles[0].isMovementDone;
          isMSKDone = await userdetail.roles[0].isMSKDone;
          focusArea = result[0].focusarea;
          focusarea_description = mpDescription[focusArea.replace('TEST', '').trim()];
          focusarea_features = mpFeatures[focusArea.replace('TEST', '').trim()];
          if (result[0].focusarea === "SYMMETRY")
            passAll = true;
          if (userdetail.roles[0].isMSKDone) {
            let activitydate = new Date(mskresult[0].mskdate);
            let now = new Date();
            now = moment(now).utc();
            activitydate = moment(activitydate).utc();
            let mskdays = now.diff(activitydate, 'days');
            console.log(mskdays)
            return res.status(200).json({
              status: 200,
              message: "User results",
              name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
              configuration: { mskConfigurations: organisationSettings.configurations.mskConfigurations, moveprintConfigurations: organisationSettings.configurations.moveprintConfigurations },
              profileimage: userdetail.profileimage,
              userid: userdetail._id,
              deviceId: userdetail.deviceId,
              org_id: req.body.id,
              isMovementDone: isMovementDone,
              passAll: passAll,
              progress: 12,
              totalSessions: 12,
              isWeekThird: true,
              recommendedImage: '',
              info: info,
              info_category: categoryInfo,
              focusArea: result[0].focusarea,
              previousDayPerformed: false,
              nextDayPerformed: false,
              role: userdetail.roles[0],
              notificationCount: notificationCount,
              isRecommendedExercisesDone: false,
              previousMovementScore: [],
              movementscore: result[0].movementscore,
              completedRecommendedExercises: [],
              recommendedExercises: result[0].exercises,
              isMSKDone: userdetail.roles[0].isMSKDone,
              isMskEnabled: organisationSettings.isMskEnabled,
              week: "3",
              exercises: [],
              description: focusarea_description || '',
              mpFeatures: focusarea_features || '',
              mskresult: {
                mskdate: mskresult[0].mskdate,
                isMskExpired: mskdays >= 45 ? true : false,
                newMskDescription: newMskDescription,
                newMskTitle: newMskTitle,
                bmi: mskresult[0].bmi || '',
                bmiCategory: mskresult[0].bmiCategory || '',
                pqsiStatus: mskresult[0].pqsiStatus || false,
                mskCategory: mskresult[0].mskCategory || '',
                pqsiscore: mskresult[0].pqsiscore || 0,
                smokingStatus: mskresult[0].smokingStatus || false,
                mskDescription: mskresult[0].mskInternalCategory != undefined ? mskDescription[mskresult[0].mskInternalCategory] : mskDescription[mskresult[0].mskCategory] || '',
                mskFeatures: mskresult[0].mskInternalCategory != undefined ? mskFeatures[mskresult[0].mskInternalCategory] : mskFeatures[mskresult[0].mskCategory] || '',
                bmiDescription: lookupdata.bmi.summary || '',
                bmiFeatures: lookupdata.bmi.features || '',
                smokingHeading: lookupdata.smoking.heading,
                smokingSummary: lookupdata.smoking.summary,
                smokingFeatures: lookupdata.smoking.features,
                smokingSummary2: lookupdata.smoking.summary2,
                pqsiHeading: lookupdata.sleep.heading,
                pqsiSummary: lookupdata.sleep.summary,
                pqsiFeatures: lookupdata.sleep.features,
                pqsiSummary2: lookupdata.sleep.summary2
              }
            })

          } else {
            return res.status(200).json({
              status: 200,
              message: "User results",
              moveprintResult: [],
              configuration: { mskConfigurations: organisationSettings.configurations.mskConfigurations, moveprintConfigurations: organisationSettings.configurations.moveprintConfigurations },
              name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
              profileimage: userdetail.profileimage,
              userid: userdetail._id,
              deviceId: userdetail.deviceId,
              org_id: req.body.id,
              isMovementDone: isMovementDone,
              passAll: passAll,
              progress: 12,
              totalSessions: 12,
              isWeekThird: true,
              recommendedImage: '',
              info: info,
              info_category: categoryInfo,
              role: userdetail.roles[0],
              previousDayPerformed: false,
              nextDayPerformed: false,
              notificationCount: notificationCount,
              isRecommendedExercisesDone: false,
              previousMovementScore: previousMovementScore,
              completedRecommendedExercises: completedRecommendedExercises,
              recommendedExercises: result[0].exercises,
              movementscore: result[0].movementscore,
              isMSKDone: isMSKDone,
              isMskEnabled: organisationSettings.isMskEnabled,
              focusArea: result[0].focusarea,
              week: "1",
              exercises: [],
              description: focusarea_description || '',
              mpFeatures: focusarea_features || '',
              mskresult: mskresult
            });
          }
        } else {
          completedRecommendedExercises = result[0].exercises.length;
          console.log('completed exercises', result[0].focusarea, completedRecommendedExercises)
          focusArea = result[0].focusarea;
          let activitydate = new Date(user.mptdate);
          let now = new Date();
          now = moment(now).utc();
          activitydate = moment(activitydate).utc();
          days = now.diff(activitydate, 'days');
          let currentScore = [];
          user.movementscore.forEach(ex => {
            if (ex.groupid < 6) {
              ex.isDisplay = true; currentScore.push(ex)
            }
            else if ((ex.groupid === 6) && (ex.pain === "yes")) {
              ex.isDisplay = true; currentScore.push(ex)
            } else if ((ex.groupid === 7) && (ex.pain === "yes")) {
              ex.isDisplay = true; currentScore.push(ex)
            }
            else {
              ex.isDisplay = false; currentScore.push(ex)
            }
          })
          focusarea_description = mpDescription[focusArea.replace('TEST', '').trim()];
          focusarea_features = mpFeatures[focusArea.replace('TEST', '').trim()];
          if (!["SPINE CLEARING", "SHOULDER CLEARING"].includes(focusArea)) {
            for (var i = 0; i < 5; i++) {
              if (result[0].movementscore[i].pain === "true") {
                focusArea = (focusArea === "PAIN FLOW" ? result[0].movementscore[i].title : focusArea);
                focusarea_description = mpDescription["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
                focusarea_features = mpFeatures["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
                break;
              }
            }
          }
          focusArea = focusArea.replace('TEST', '').trim();
          console.log(days, user.day, userdetail.roles[0].isRecommendedExercisesDone)
          isRecommendedExercisesDone = userdetail.roles[0].isRecommendedExercisesDone;
          // if (days !== result[0].day) {
          // 	isRecommendedExercisesDone = false;
          // }
          isMovementDone = userdetail.roles[0].isMovementDone;
          isMSKDone = userdetail.roles[0].isMSKDone;
          if (focusArea === "SYMMETRY")
            passAll = true;
          if (userdetail.roles[0].isMSKDone) {
            let activitydate = new Date(mskresult[0].mskdate);
            let now = new Date();
            now = moment(now).utc();
            activitydate = moment(activitydate).utc();
            let mskdays = now.diff(activitydate, 'days');
            console.log(mskdays)
            resultDetails = {
              name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
              configuration: { mskConfigurations: organisationSettings.configurations.mskConfigurations, moveprintConfigurations: organisationSettings.configurations.moveprintConfigurations },
              profileimage: userdetail.profileimage,
              userid: userdetail._id,
              deviceId: userdetail.deviceId,
              org_id: req.body.id,
              isMovementDone: isMovementDone,
              passAll: passAll,
              focusArea: focusArea,
              role: userdetail.roles[0],
              role_id: req.body.role_id,
              totalSessions :result[0].totalSessions,
              notificationCount: notificationCount,
              isRecommendedExercisesDone: (days !== result[0].day) ? false : userdetail.roles[0].isRecommendedExercisesDone,
              previousMovementScore: previousMovementScore,
              movementscore: currentScore,
              completedRecommendedExercises: completedRecommendedExercises,
              recommendedExercises: result[0].exercises,
              isMSKDone: userdetail.roles[0].isMSKDone,
              isMskEnabled: organisationSettings.isMskEnabled,
              isWeekThird: isWeekThird,
              week: '1',
              profileimage: userdetail.profileimage,
              description: focusarea_description || '',
              mpFeatures: focusarea_features || '',
              info: info,
              info_category: categoryInfo,
              mskresult: {
                mskdate: mskresult[0].mskdate,
                isMskExpired: mskdays >= 45 ? true : false,
                newMskDescription: newMskDescription,
                newMskTitle: newMskTitle,
                bmi: mskresult[0].bmi || '',
                bmiCategory: mskresult[0].bmiCategory || '',
                pqsiStatus: mskresult[0].pqsiStatus || false,
                mskCategory: mskresult[0].mskCategory || '',
                pqsiscore: mskresult[0].pqsiscore || 0,
                smokingStatus: mskresult[0].smokingStatus || false,
                mskDescription: mskresult[0].mskInternalCategory != undefined ? mskDescription[mskresult[0].mskInternalCategory] : mskDescription[mskresult[0].mskCategory] || '',
                mskFeatures: mskresult[0].mskInternalCategory != undefined ? mskFeatures[mskresult[0].mskInternalCategory] : mskFeatures[mskresult[0].mskCategory] || '',
                bmiDescription: lookupdata.bmi.summary || '',
                bmiFeatures: lookupdata.bmi.features || '',
                smokingHeading: lookupdata.smoking.heading,
                smokingSummary: lookupdata.smoking.summary,
                smokingFeatures: lookupdata.smoking.features,
                smokingSummary2: lookupdata.smoking.summary2,
                pqsiHeading: lookupdata.sleep.heading,
                pqsiSummary: lookupdata.sleep.summary,
                pqsiFeatures: lookupdata.sleep.features,
                pqsiSummary2: lookupdata.sleep.summary2
              }
            };
            //userController.recommendedExerciseImage(user.movementscore, res, resultDetails);
            //userController.todayExercisesThumbnails(user, res, resultDetails);
            userController.latestRecommendedxercisesThumbnails(result[0], res, resultDetails);
           // console.log("----1843-----", resultDetails)

          } else {
            let resultDetails = {
              name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
              profileimage: userdetail.profileimage,
              configuration: { mskConfigurations: organisationSettings.configurations.mskConfigurations, moveprintConfigurations: organisationSettings.configurations.moveprintConfigurations },
              userid: userdetail._id,
              deviceId: userdetail.deviceId,
              org_id: req.body.id,
              isMovementDone: isMovementDone,
              passAll: passAll,
              focusArea: focusArea,
              role: userdetail.roles[0],
              role_id: req.body.role_id,
              notificationCount: notificationCount,
              isRecommendedExercisesDone: (days !== result[0].day) ? false : userdetail.roles[0].isRecommendedExercisesDone,
              previousMovementScore: previousMovementScore,
              completedRecommendedExercises: completedRecommendedExercises,
              recommendedExercises: result[0].exercises,
              totalSessions :result[0].totalSessions,
              movementscore: currentScore,
              info: info,
              info_category: categoryInfo,
              profileimage: userdetail.profileimage,
              isMSKDone: isMSKDone,
              isMskEnabled: organisationSettings.isMskEnabled,
              isWeekThird: isWeekThird,
              week: week,
              description: focusarea_description || '',
              mpFeatures: focusarea_features || '',
              mskresult: mskresult
            };
            //userController.recommendedExerciseImage(user.movementscore, res, resultDetails);
            //userController.todayExercisesThumbnails(user, res, resultDetails);
           //  console.log("----1843-----", resultDetails)
            userController.latestRecommendedxercisesThumbnails(user, res, resultDetails);
          }


        }
      }
    });
  },
  mskExercises: (req, res) => {
    let status = 200;
    MskExercise.find({}, (err, mskExercises) => {
      if (err) {
        status = 209;
        res.status(status).json({
          status: status,
          exercises: 'No Exercises found'
        })
      } else {
        status = 200;
        res.status(status).json({
          status: status,
          exercises: mskExercises
        })
      }
    });
  },
  recommendedExercises: async (req, res) => {
    var results = {};
    var scoredetails = req.body.result;
    var rec_exercisetitle = '';
    var week = '';
    var breathing_exercises = [];
    let flag, mobilityflag, days, pain;
    let painAll = false;
    flag = mobilityflag = days = pain = 0;
    for (var exercise of scoredetails) {
      if (exercise.pain === "true") {
        pain = await pain + 1;
      }
      if ((exercise.pain === "yes" && exercise.title === "BREATHING TEST")) {
        flag = await flag + 1;
      }
      if ((exercise.pain === "yes" && exercise.title === "MOBILITY TEST")) {
        mobilityflag = await mobilityflag + 1;
      }
    }
    console.log('input org id', req.body.id)
    await Result.find({ email: scoredetails[0].email, org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err || !result) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        results = result;
        if (scoredetails) {
          var activitydate = new Date(results[0].mptdate);
          var now = new Date();
          now = moment(now).utc();
          activitydate = moment(activitydate).utc();
          days = now.diff(activitydate, 'days');
          console.log(days, results[0].day)
          if (days !== results[0].day) {
            await Result.updateOne({ email: scoredetails[0].email, org_id: ObjectId(req.body.id), mptdate: results[0].mptdate }, { day: days }).then(async data => {
              console.log('Updated no of days')
            })
            await User.updateOne({ email: scoredetails[0].email, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$.isRecommendedExercisesDone": false, "isRecommendedExercisesDone": false } }).then(async data => {
              console.log('Updated in user profile')
            })
              .catch(err => {
                res.status(500).json({
                  status: 500,
                  message: err
                })
              });
          }
          if (days <= 7)
            week = '1'
          else if (days <= 14)
            week = '2'
          else if (days > 14) {
            week = '3';
            return res.status(200).json({
              status: 200,
              isWeekThird: true,
              isRecommendedExercisesDone: false,
              message: 'Please complete your moveprint tests again'
            });
          }

          if (flag === 1) {
            let breathingExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "recommended_exercises.week": week, "title": "BREATHING" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
            breathing_exercises = breathing_exercises.concat(breathingExercises);
            console.log('breathing');
          }
          rec_exercisetitle = util.recommendedExerciseFocusArea(scoredetails);
          rec_exercisetitle = rec_exercisetitle.replace('TEST', '').trim();

          if (pain === 5) {
            rec_exercisetitle = "PAIN FLOW";
            painAll = true;
          }

          let focusExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "recommended_exercises.week": week, "title": rec_exercisetitle } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
          breathing_exercises = breathing_exercises.concat(focusExercises);
          if (mobilityflag === 1) {
            let mobilityExercises = await MskExercise.aggregate([{ $unwind: "$recommended_exercises" }, { $match: { "recommended_exercises.week": week, "title": "MOBILITY" } }, { $project: { recommended_exercises: 1, _id: 0 } }]).exec();
            breathing_exercises = breathing_exercises.concat(mobilityExercises);
            console.log('in mobility');
          }
          if (results[0].exercises.length > 0) {
            console.log('already has recommended exercises', results[0].exercises.length, breathing_exercises.length, results[0].exercises[0].week, breathing_exercises[0].recommended_exercises.week)
            if ((results[0].exercises.length === breathing_exercises.length)) {
              if (req.body.type === 'repeat' || 'start') {
                var finalresult = [];
                for (var i = 0; i < breathing_exercises.length; i++) {
                  finalresult.push(breathing_exercises[i].recommended_exercises);
                }
                return res.status(200).json({
                  status: 200,
                  exercises: finalresult,
                  week: week
                })
              }
            } else if (result[0].exercises.length <= breathing_exercises.length) {
              for (var i = 0; i < breathing_exercises.length; i++) {
                for (var j = 0; j < result[0].exercises.length; j++) {
                  console.log('result length <= recommended')
                  if ((breathing_exercises[i].recommended_exercises.hosted_id === result[0].exercises[j].hosted_id) && (breathing_exercises[i].recommended_exercises.name === result[0].exercises[j].name) && (breathing_exercises[i].recommended_exercises.week === result[0].exercises[j].week)) {
                    breathing_exercises.splice(breathing_exercises.indexOf(breathing_exercises[i]), 1);
                  }
                }
              }
            } else {
              for (var i = 0; i < result[0].exercises.length; i++) {
                for (var j = 0; j < breathing_exercises.length; j++) {
                  console.log('result length > recommended')
                  if ((result[0].exercises[i].hosted_id === breathing_exercises[j].recommended_exercises.hosted_id) && (result[0].exercises[i].name === breathing_exercises[j].recommended_exercises.name) && (result[0].exercises[i].week === breathing_exercises[j].recommended_exercises.week)) {
                    breathing_exercises.splice(breathing_exercises.indexOf(breathing_exercises[i]), 1);
                  }
                }
              }
            }
          }
          console.log('final exercises list')
          var finalresult = [];
          for (var i = 0; i < breathing_exercises.length; i++) {
            //finalresult.push(breathing_exercises[i].recommended_exercises);
            var exercisevideourl = await util.generatevideourl(breathing_exercises[i].recommended_exercises.hosted_id);
            await request.get({
              uri: exercisevideourl
            }, (async (err, response, body) => {
              if (err) {
                return res.status(400).json({
                  status: 400,
                  message: err
                })
              } else {
                finalresult.push({
                  "title": breathing_exercises[i].recommended_exercises.title,
                  "week": breathing_exercises[i].recommended_exercises.week,
                  "order": breathing_exercises[i].recommended_exercises.order,
                  "hosted_id": breathing_exercises[i].recommended_exercises.hosted_id,
                  "name": breathing_exercises[i].recommended_exercises.name,
                  "x_sets": breathing_exercises[i].recommended_exercises.x_sets,
                  "direction": breathing_exercises[i].recommended_exercises.direction,
                  "pass_score": breathing_exercises[i].recommended_exercises.pass_score,
                  "fail_score": breathing_exercises[i].recommended_exercises.fail_score,
                  "description": breathing_exercises[i].recommended_exercises.description,
                  // "instructions": breathing_exercises[i].recommended_exercises.instructions,
                  "time": breathing_exercises[i].recommended_exercises.time,
                  "activities": breathing_exercises[i].recommended_exercises.activities,
                  "equipment": breathing_exercises[i].recommended_exercises.equipment,
                  "image": await JSON.parse(body).playlist[0].images[0].src,
                  "video": await JSON.parse(body).playlist[0].sources[3].file
                })
              }
            })
            )
          }
          return res.status(200).json({
            status: 200,
            exercises: finalresult,
            week: week
          })
        }
      }
    });
  },
  latestRecommendedExercises: async (req, res) => {
    console.log('input org id', req.body);
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err || !result) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        let recommendedExercises = [];
        var activitydate = new Date(result[0].mptdate);
        var now = new Date();
        now = moment(now).utc();
        activitydate = moment(activitydate).utc();
        days = now.diff(activitydate, 'days');
        console.log(days, result[0].day)
        if (days !== result[0].day) {
          await Result.updateOne({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id), mptdate: result[0].mptdate }, { $set: { day: days } }).then(data => {
            console.log('Updated no of days')
          })
        }
        if (result[0].recommended_exercises[0].week === "1") {
          await Result.updateOne({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }, { $set: { recommended_exercises: [] } }).then(async data => {
            console.log('Updated recommended exercises');
            result[0].recommended_exercises = await improvementCorrectiveExercises(result[0].movementscore, result[0].focusarea, "", []);
            await Result.updateOne({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }, { $set: { recommended_exercises: result[0].recommended_exercises } }).exec();
          })
        }
        let d = result[0].progress + 1;
        console.log(d)
        if ((1 <= d) && (d <= 3)) {
          console.log("in d1")
          result[0].recommended_exercises.filter(r => {
            if (result[0].totalSessions === 7 && r.week === "7") {
              recommendedExercises.push(r);
            } else {
              if (r.title === "SPINE CLEARING") {
                recommendedExercises.push(r);
              }
              if (r.title === "SHOULDER CLEARING") {
                recommendedExercises.push(r);
              }
              if (r.title === "MOBILITY") {
                recommendedExercises.push(r);
              }
              if (r.title === "PAIN FLOW" && r.week === "4") {
                recommendedExercises.push(r);
              }
            }
            if (r.week === "3")
              recommendedExercises.push(r);
          });
        } else if ((4 <= d) && (d <= 6)) {
          console.log("in d2")
          result[0].recommended_exercises.filter(r => {
            if (result[0].totalSessions === 7 && r.week === "7") {
              recommendedExercises.push(r);
            } else {
              if (r.title === "SPINE CLEARING") {
                recommendedExercises.push(r);
              }
              if ((r.title === "PAIN FLOW") && (d === 4) && (r.week === "4")) {
                recommendedExercises.push(r);
              } else if ((r.title === "PAIN FLOW") && (d > 4) && (r.week === "8")) {
                recommendedExercises.push(r);
              }
              if (r.title === "SHOULDER CLEARING") {
                recommendedExercises.push(r);
              }
              if (r.title === "MOBILITY") {
                recommendedExercises.push(r);
              }
            }
            if (r.week === "6")
              recommendedExercises.push(r);

          });
        } else if ((7 <= d) && (d <= 9)) {
          result[0].recommended_exercises.filter(r => {
            if (result[0].totalSessions === 7 && r.week === "7" && d === 7) {
              recommendedExercises.push(r);
            } else {
              if (r.title === "SPINE CLEARING") {
                recommendedExercises.push(r);
              }
              if ((r.title === "PAIN FLOW") && (d <= 8) && (r.week === "8")) {
                recommendedExercises.push(r);
              } else if ((r.title === "PAIN FLOW") && (d === 9) && (r.week === "12")) {
                recommendedExercises.push(r);
              }
              if (r.title === "SHOULDER CLEARING") {
                recommendedExercises.push(r);
              }
              if (r.title === "MOBILITY" && d === 7) {
                recommendedExercises.push(r);
              }
            }
            if (r.week === "9")
              recommendedExercises.push(r);

          });
        } else if ((10 <= d) && (d <= 12)) {
          result[0].recommended_exercises.filter(r => {
            if ((r.title === "PAIN FLOW") && (r.week === "12")) {
              recommendedExercises.push(r);
            }
            if ((r.title === "PAIN FLOW") && (r.week === "12"))
              recommendedExercises.push(r);
          });
        }

        if (result[0].exercises.length === 0) {
          return res.status(200).json({
            status: 200,
            exercises: recommendedExercises
          })
        } else {
          let temp = []
          result[0].exercises.filter(r => {
            if (r.exercisedate === moment(Date.now()).utc().format('YYYY-MM-DD').toString()) {
              temp.push({
                "week": r.week,
                "name": r.name,
                "title": r.title,
                "status": r.status,
                "exercisedate": r.exercisedate
              });
            }
          })
          if (temp.length === recommendedExercises.length || temp.length === 0) {
            recommendedExercises = recommendedExercises;
          } else {
            temp.forEach(r => {
              recommendedExercises.splice(recommendedExercises.findIndex(item => item.title === r.title), 1);
            })
            console.log(moment(Date.now()).utc().format('YYYY-MM-DD').toString(), temp[0].exercisedate)
          }
          return res.status(200).json({
            status: 200,
            exercises: recommendedExercises
          })
        }
      }
    });
  },
  dayRecommendedExercise: async (req, res) => {
    console.log('recommended ex input', req.body);

    MskExercise.findOne({ title: req.body.title, "recommended_exercises.hosted_id": req.body.hosted_id }, { _id: 0, recommended_exercises: { $elemMatch: { hosted_id: req.body.hosted_id } } }).exec(async (err, result) => {
      if (err || !result) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        let temp = {
          "title": result.recommended_exercises[0].title,
          "week": result.recommended_exercises[0].week,
          "hosted_id": result.recommended_exercises[0].hosted_id,
          "name": result.recommended_exercises[0].name,
          "description": result.recommended_exercises[0].description,
          "time": result.recommended_exercises[0].time,
          "activities": result.recommended_exercises[0].activities,
          "equipment": result.recommended_exercises[0].equipment,
          "status": "fail",
          "image": result.recommended_exercises[0].image
        }
        let latestMp = await Result.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }, { progress: 1, exercises: 1, totalSessions: 1 }).sort({ _id: -1 }).limit(1).exec();
        latestMp[0].exercises.filter(r => {
          console.log(moment(Date.now()).utc().format('YYYY-MM-DD').toString())
          if ((req.body.title === r.title) && (r.exercisedate === moment(Date.now()).utc().format('YYYY-MM-DD').toString())) {
            temp.status = "pass";
          }
        })
        return res.status(200).json({
          status: 200,
          message: "Recommended Exercise details",
          exercises: temp,
          progress: latestMp[0].progress,
          totalSessions: latestMp[0].totalSessions
        })
      }
    })
  },
  particulardayExercise: async (req, res) => {
    console.log('input org id', req.body);
    if (req.body.day > 12) {
      return res.status(210).json({
        status: 210,
        message: "Please enter valid day"
      })
    } else {
      let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
      await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
        if (err || !result) {
          return res.status(210).json({
            status: 210,
            message: err
          })
        } else {
          let recommendedExercises = [];
          if (result[0].recommended_exercises[0].week === "1") {
            await Result.updateOne({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }, { $set: { recommended_exercises: [] } }).then(async data => {
              console.log('Updated recommended exercises');
              result[0].recommended_exercises = await improvementCorrectiveExercises(result[0].movementscore, [], result[0].focusarea, "", []);
              await Result.updateOne({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }, { $set: { totalSessions: 12, recommended_exercises: result[0].recommended_exercises } }).exec();
            })
          }
          let d = req.body.day;
          console.log(d);
          if (result[0].totalSessions === 7) {
            recommendedExercises = result[0].recommended_exercises;
          } else {

            if ((1 <= d) && (d <= 3)) {
              result[0].recommended_exercises.filter(r => {
                if (result[0].totalSessions === 7 && r.week === "7") {
                  recommendedExercises.push(r);
                } else {
                  if (r.title === "SPINE CLEARING") {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "SHOULDER CLEARING") {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "MOBILITY") {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "PAIN FLOW" && r.week === "4") {
                    recommendedExercises.push(r);
                  }
                }
                if (r.week === "3")
                  recommendedExercises.push(r);
              });
            } else if ((4 <= d) && (d <= 6)) {
              console.log("in d2")
              result[0].recommended_exercises.filter(r => {
                if (result[0].totalSessions === 7 && r.week === "7") {
                  recommendedExercises.push(r);
                } else {
                  if (r.title === "SPINE CLEARING") {
                    recommendedExercises.push(r);
                  }
                  if ((r.title === "PAIN FLOW") && (d === 4) && (r.week === "4")) {
                    recommendedExercises.push(r);
                  } else if ((r.title === "PAIN FLOW") && (d > 4) && (r.week === "8")) {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "SHOULDER CLEARING") {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "MOBILITY") {
                    recommendedExercises.push(r);
                  }
                }
                if (r.week === "6")
                  recommendedExercises.push(r);

              });
            } else if ((7 <= d) && (d <= 9)) {
              result[0].recommended_exercises.filter(r => {
                if (result[0].totalSessions === 7 && r.week === "7" && d === 7) {
                  recommendedExercises.push(r);
                } else {
                  if (r.title === "SPINE CLEARING") {
                    recommendedExercises.push(r);
                  }
                  if ((r.title === "PAIN FLOW") && (d <= 8) && (r.week === "8")) {
                    recommendedExercises.push(r);
                  } else if ((r.title === "PAIN FLOW") && (d === 9) && (r.week === "12")) {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "SHOULDER CLEARING") {
                    recommendedExercises.push(r);
                  }
                  if (r.title === "MOBILITY" && d === 7) {
                    recommendedExercises.push(r);
                  }
                }
                if (r.week === "9")
                  recommendedExercises.push(r);

              });
            } else if ((10 <= d) && (d <= 12)) {
              result[0].recommended_exercises.filter(r => {
                if ((r.title === "PAIN FLOW") && (r.week === "12")) {
                  recommendedExercises.push(r);
                }
                if ((r.title === "PAIN FLOW") && (r.week === "12"))
                  recommendedExercises.push(r);
              });
            }
            ///////////////////////////////////
            // if ((1 <= d) && (d <= 3)) {
            //   result[0].recommended_exercises.filter(r => {
            //     if (r.week === "3")
            //       recommendedExercises.push(r);
            //   });
            // } else if ((4 <= d) && (d <= 6)) {
            //   result[0].recommended_exercises.filter(r => {
            //     if (r.week === "6")
            //       recommendedExercises.push(r);
            //   });
            // } else if ((7 <= d) && (d <= 9)) {
            //   result[0].recommended_exercises.filter(r => {
            //     if (r.week === "9")
            //       recommendedExercises.push(r);
            //   });
            // } else if ((10 <= d) && (d <= 12)) {
            //   result[0].recommended_exercises.filter(r => {
            //     if (r.week === "12")
            //       recommendedExercises.push(r);
            //   });
            // }
          }

          let finalresult = [];
          for (let i = 0; i < recommendedExercises.length; i++) {
            var exercisevideourl = await util.generatevideourl(recommendedExercises[i].hosted_id);
            await request.get({
              uri: exercisevideourl
            }, (async (err, response, body) => {
              if (err) {
                return res.status(210).json({
                  status: 210,
                  message: err
                })
              } else {
                finalresult.push({
                  "title": recommendedExercises[i].title,
                  "week": recommendedExercises[i].week,
                  "order": recommendedExercises[i].order,
                  "hosted_id": recommendedExercises[i].hosted_id,
                  "name": recommendedExercises[i].name,
                  "x_sets": recommendedExercises[i].x_sets,
                  "direction": recommendedExercises[i].direction,
                  "pass_score": recommendedExercises[i].pass_score,
                  "fail_score": recommendedExercises[i].fail_score,
                  "description": recommendedExercises[i].description,
                  "time": recommendedExercises[i].time,
                  "activities": recommendedExercises[i].activities,
                  "equipment": recommendedExercises[i].equipment,
                  //"instructions": recommendedExercises[i].instructions,
                  //"image": await JSON.parse(body).playlist[0].images[0].src,
                  "image": recommendedExercises[i].image,
                  "video": await JSON.parse(body).playlist[0].sources[3].file
                })
                if (finalresult.length === recommendedExercises.length) {
                  return res.status(200).json({
                    status: 200,
                    message: 'exercises',
                    progress: result[0].progress,
                    exercises: finalresult
                  })
                }
              }
            })
            )
          }
        }
      })
    }

  },
  saveRecommendedExercise: (req, res) => {
    var inputexercise = req.body;
    if (inputexercise.type === 'repeat') {
      return res.status(200).json({
        status: 200,
        message: 'Results saved successfully'
      })
    }
    console.log('input rec ex', req.body)
    var isLast = inputexercise.isLast;
    var exercisedetails = [];
    var user = {};
    var flag, resetFlag = 0;
    delete inputexercise.isLast;
    Result.find({ email: inputexercise.email, org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      }
      else {
        user = result[0];
        if (user != undefined) {
          if (user.exercises.length > 0) {
            exercisedetails = [...user.exercises];
            exercisedetails.filter(ex => {
              if (inputexercise.hosted_id === ex.hosted_id && inputexercise.name === ex.name && inputexercise.week === ex.week && inputexercise.title === ex.title) {
                flag = flag + 1;
              }
              if (inputexercise.week === "2" && ex.week === "1") {
                resetFlag = resetFlag + 1;
              }
            })
            if (flag > 0) {
              exercisedetails = exercisedetails.filter(ex => ex.week != inputexercise.week);
            }
            if (resetFlag > 0) {
              exercisedetails = [];
            }
            exercisedetails.push(inputexercise);
          } else {
            exercisedetails.push(inputexercise);
          }
        } else {
          return res.status(210).send({
            status: 210,
            message: 'no user found'
          })
        }
      }
      Result.findOneAndUpdate({ email: user.email, mptdate: user.mptdate, org_id: user.org_id }, { rec_exercise_date: Date.now(), exercises: exercisedetails }).exec(async (err, record) => {
        if (err || !record) {
          return res.status(210).json({
            status: 210,
            message: err
          })
        } else {
          if (isLast === true) {
            await User.updateOne({ email: inputexercise.email, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { "roles.$.isRecommendedExercisesDone": true, isRecommendedExercisesDone: true }).then(data => {
            })
          } else {
            await User.updateOne({ email: inputexercise.email, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { "roles.$.isRecommendedExercisesDone": false, isRecommendedExercisesDone: false }).then(data => {
              console.log('Exercises need to be done');
            })
          }
          return res.status(200).send({
            status: 200,
            message: 'Results saved successfully'
            //recexc: record
          })
          //module.exports.new_recommended_exercises(req, res, user.movementscore);
        }
      });
    });
  },
  getMskQuestionnaire: async (req, res) => {
    //let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    var userDetails = await User.aggregate([{ $match: { _id: ObjectId(req.body.userid) } }, {
      $project: {
        roles: {
          $filter: {
            input: '$roles',
            as: 'role',
            cond:
            {
              $and: [
                { $eq: ['$$role.role_id', "1"] },
                { $eq: ['$$role.org_id', ObjectId(req.body.id)] }
              ]
            }
          }
        },
        height: 1, weight: 1, heightUnit: 1, weightUnit: 1,
        _id: 0
      }
    }]).exec();
    if (userDetails.length > 0) {
      let referralCode = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { code: 1, isMskEnabled: 1, configurations: 1, _id: 0 }).exec();
      Questionnaire.find({}, (err, mskQuestions) => {
        if (err) {
          return res.status(209).json({
            status: 209,
            exercises: 'No Questions found'
          })
        } else {
          return res.status(200).json({
            status: 200,
            message: "MSK configurations",
            configuration: { "referralCode": referralCode.code, isMskEnabled: referralCode.isMskEnabled, mskConfigurations: referralCode.configurations.mskConfigurations, moveprintConfigurations: referralCode.configurations.moveprintConfigurations },
            isMovementDone: userDetails[0].roles[0].isMovementDone,
            weight: userDetails[0].weight || '',
            weightUnit: userDetails[0].weightUnit || '',
            heightUnit: userDetails[0].heightUnit || '',
            height: userDetails[0].height || '',
            questions: mskQuestions
          })
        }
      });

    } else {
      return res.status(209).json({
        status: 209,
        exercises: 'User not found'
      })
    }
  },
  saveMskResult: async (req, res) => {
    var exercisedetails = req.body;
    var pqsiinput = [];
    var user = {};
    let finaljson = {};
    var height, weight, bmi;
    weight = height = bmi = 0;
    exercisedetails.isFirst = false;
    let isClioEnabled = false;
    let isPqsiEnabled = false;
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    var userReferral = await User.aggregate([{ $match: { _id: ObjectId(userId._id) } }, {
      $project: {
        roles: {
          $filter: {
            input: '$roles',
            as: 'role',
            cond:
            {
              $and: [
                { $eq: ['$$role.role_id', "1"] },
                { $eq: ['$$role.org_id', ObjectId(req.body.id)] }
              ]
            }
          }
        },
        _id: 0
      }
    }]).exec();
    console.log("user", userReferral[0].roles.length);
    //let proUser = await User.findOne({  _id: ObjectId(userReferral[0].roles[0].pro_id),roles: { $elemMatch: {org_id: ObjectId(req.body.id) } } }, { _id: 1, deviceId: 1 }).exec();
    let userIds = [];
    let deviceIds = [];
    let proDetails = [];
    //let proUser = await User.findOne({  _id: ObjectId(userReferral[0].roles[0].pro_id),roles: { $elemMatch: {org_id: ObjectId(req.body.id) } } }, { _id: 1, deviceId: 1 }).exec();
    if (userReferral[0].roles.length > 1) {
      for (let i = 0; i < userReferral[0].roles.length; i++) {
        let proUser = await User.findOne({ roles: { $elemMatch: { proReferral: userReferral[0].roles[i].referralCode, org_id: ObjectId(req.body.id) } } }, { _id: 1, settings: 1, deviceId: 1 }).exec();
        if (proUser != null) {
          if (proUser.settings[0].enablePushNotifications === true) {
            userIds.push(proUser._id);
            proDetails.push({ "user_id": proUser._id, "deviceId": proUser.deviceId });
            proUser.deviceId != null ? deviceIds.push(proUser.deviceId) : "";
          }
        }
      }
    } else {

      let proUser = await User.findOne({ roles: { $elemMatch: { proReferral: userReferral[0].roles[0].referralCode, org_id: ObjectId(req.body.id) } } }, { _id: 1, settings: 1, deviceId: 1 }).exec();
      if (proUser != null) {
        if (proUser.settings[0].enablePushNotifications === true) {
          userIds.push(proUser._id);
          proDetails.push({ "user_id": proUser._id, "deviceId": proUser.deviceId });
          proUser.deviceId != null ? deviceIds.push(proUser.deviceId) : "";
        }
      }

    }
    await User.findOne({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { heightUnit: 1, first: 1, last: 1, profileimage: 1, settings: 1, weight: 1, _id: 1, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } }, deviceId: 1, height: 1, weightUnit: 1 }, async (err, userdetails) => {
      if (err) {
        return res.status(209).json({
          status: 209,
          message: "User with this email doesn't exist"
        })
      } else {
        let referralCode = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { code: 1, settings: 1, configurations: 1, _id: 0 }).exec();
        console.log('rrrrr', userdetails);

        exercisedetails.org_id = ObjectId(req.body.id);

        if (userdetails.roles[0].isMSKDone === false) {
          exercisedetails.isFirst = true;
          user.height = parseFloat(userdetails.height);
          user.heightUnit = userdetails.heightUnit;
          user.weight = parseFloat(userdetails.weight);
          user.weightUnit = userdetails.weightUnit;
          if (user.heightUnit === "Inches") {
            height = (user.height * 0.0254);
            let obj = {
              "Question_Order": "1",
              "value": userdetails.height,
              "Question_Group_id": "20",
              "Question_Caterogy": "BMI",
              "Question_Text": "Please update your height if this is incorrect.",
              "heightUnit": "Inches"
            }
            exercisedetails.questions.push(obj);
          }
          if (user.heightUnit === "Centimeters") {
            height = (user.height / 100);
            let obj = {
              "Question_Order": "1",
              "value": userdetails.height,
              "Question_Group_id": "20",
              "Question_Caterogy": "BMI",
              "Question_Text": "Please update your height if this is incorrect.",
              "heightUnit": "Centimeters"
            }
            exercisedetails.questions.push(obj);
          }
          if (user.heightUnit === "Feet") {
            console.log('before', userdetails.height)
            if (userdetails.height.includes('.'))
              height = (parseInt((userdetails.height.split('.')[0] * 12)) + parseInt(userdetails.height.split('.')[1])) * 0.0254;
            else if (userdetails.height.includes("'"))
              height = (parseInt((userdetails.height.split("'")[0] * 12)) + parseInt(userdetails.height.split("'")[1])) * 0.0254;
            else
              height = parseInt((user.height * 12)) * 0.0254;
            user.height = userdetails.height;
            let obj = {
              "Question_Order": "1",
              "value": userdetails.height,
              "Question_Group_id": "20",
              "Question_Caterogy": "BMI",
              "Question_Text": "Please update your height if this is incorrect.",
              "heightUnit": "Inches"
            }
            exercisedetails.questions.push(obj);
          }
          if (user.weightUnit === "lbs") {
            weight = (user.weight * 0.453592);
            bmi = weight / Math.pow(height, 2);
            console.log('first time bmi', bmi, user.weight);
            let obj = {
              "Question_Order": "2",
              "value": userdetails.weight,
              "Question_Group_id": "20",
              "Question_Caterogy": "BMI",
              "Question_Text": "Please update your weight if this is incorrect.",
              "weightUnit": "lbs",
              "bmi": (weight / Math.pow(height, 2))
            }
            exercisedetails.questions.push(obj);
          }
          if (user.weightUnit === "kg") {
            weight = user.weight;
            console.log(weight, height)
            bmi = weight / Math.pow(height, 2);
            console.log('first time bmi', bmi);
            let obj = {
              "Question_Order": "2",
              "value": userdetails.weight,
              "Question_Group_id": "20",
              "Question_Caterogy": "BMI",
              "Question_Text": "Please update your weight if this is incorrect.",
              "weightUnit": "kg",
              "bmi": (weight / Math.pow(height, 2))
            }
            exercisedetails.questions.push(obj);
          }
        } else {
          exercisedetails.isFirst = false;
        }

        exercisedetails.smokingStatus = false;
        isClioEnabled = referralCode.settings.isClioEnabled;
        isPqsiEnabled = referralCode.configurations.mskConfigurations[referralCode.configurations.mskConfigurations.length - 1].isDisplay;
        // console.log(isPqsiEnabled, isClioEnabled,exercisedetails.isFirst);
        await exercisedetails.questions.forEach(exercise => {
          if (exercise.Question_Group_id === "21" && exercise.Question_Order === "1" && exercise.value == "Yes") {
            smoking_status = true;
            exercisedetails.smokingStatus = true;
          }
          if (isPqsiEnabled) {
            if (exercise.Question_Group_id > "30" && exercise.Question_Group_id < "40") {
              pqsiinput.push(exercise);
            }
          }
          user.isMSKDone = true;
          if (exercisedetails.isFirst === false) {

            if (exercise.Question_Group_id === "20") {
              if (exercise.Question_Order === "1") {
                user.heightUnit = exercise.heightUnit;
                user.height = exercise.value;
                height = parseFloat(exercise.value);
              }
              console.log('up h', user.heightUnit, user.height)
              if (exercise.Question_Order === "2") {
                exercise.bmi = 0;
                user.weightUnit = exercise.weightUnit;
                user.weight = exercise.value;
                weight = parseFloat(exercise.value);
                console.log('parsed float value', weight)
                if (user.heightUnit === "Inches") {
                  height = (height * 0.0254)
                }
                if (user.weightUnit === "lbs") {
                  weight = (weight * 0.453592);
                }
                if (user.heightUnit === "Centimeters") {
                  height = (height / 100)
                }
                if (user.heightUnit === "Feet") {
                  if (user.height.includes('.'))
                    height = (parseInt((user.height.split('.')[0] * 12)) + parseInt(user.height.split('.')[1])) * 0.0254;
                  else if (user.height.includes("'"))
                    height = (parseInt((user.height.split("'")[0] * 12)) + parseInt(user.height.split("'")[1])) * 0.0254;
                  else
                    height = (height * 12) * 0.0254;

                  console.log('not 1st time', user.height, height);
                }
                bmi = (weight / Math.pow(height, 2));
                exercise.bmi = (weight / Math.pow(height, 2));
              }
            }
          }
          // console.log('pqsi length', pqsiinput.length)
          if (pqsiinput.length > 0) {
            pqsi_status = true;
            exercisedetails.pqsiStatus = true;
            exercisedetails.mskCategory = '';
            exercisedetails.pqsiscore = util.calculatepqsiscore(pqsiinput);
          } else {
            exercisedetails.pqsiscore = 0;
            exercisedetails.pqsiStatus = false;
          }
        })

        console.log('user', user)
        await User.findOneAndUpdate({ _id: ObjectId(userId._id) }, user, { new: true }).exec((error, updatedUser) => {
          if (error || !updatedUser) {
            return res.status(210).json({
              status: 210,
              message: error
            })
          } else {
            // console.log('bmi', bmi, typeof bmi, updatedUser)
            if (bmi >= 30) {
              exercisedetails.bmi = bmi.toString();
              exercisedetails.bmiCategory = "OBESE";
            } else if (bmi >= 25 && bmi <= 29.9999999) {
              exercisedetails.bmi = bmi.toString();
              exercisedetails.bmiCategory = "OVERWEIGHT";
            } else if (bmi < 18.5) {
              exercisedetails.bmi = bmi.toString();
              exercisedetails.bmiCategory = "UNDERWEIGHT";
            } else if (bmi >= 18.5 && bmi <= 24.999999) {
              exercisedetails.bmi = bmi.toString();
              exercisedetails.bmiCategory = "NORMAL";
            }
            console.log('profile updated with latest details');
          }
        })

        await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, results) => {
          if (err || !results) {
            return res.status(210).json({
              status: 210,
              message: err
            })
          } else {
            if (results === null) {
              return res.status(210).json({
                status: 210,
                message: "Moveprint test results doesn't exist for this Organization"
              })
            } else {
              finaljson.userid = exercisedetails.email;
              finaljson.mskdate = new Date();
              finaljson.mptdate = results[0].mptdate;
              finaljson.questions = exercisedetails.questions;
              finaljson.groups = results[0].groups;
              for (var i = 0; i < results[0].movementscore.length; i++) {
                for (var j = 0; j < finaljson.groups.length; j++) {
                  if (i === j) {
                    finaljson.groups[i].score = results[0].movementscore[i].score;
                  }
                }
              }
              const options = {
                url: 'https://sync.move2perform.com/moveprintapi.cgi',
                method: 'POST',
                body: finaljson,
                json: true,
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Basic ' + process.env.BOB_KEY
                }
              };
              await request(options, (err, response, body) => {
                if (err) {
                  return res.status(210).json({
                    status: 210,
                    message: err
                  })
                }
                mskCategory = body.MSK_Category;
                exercisedetails.mskCategory = body.MSK_Category;
                exercisedetails.mskInternalCategory = body.MSK_Response;
                console.log('msk category', body.MSK_Category)
              });
              // Clio Integration
              if (isClioEnabled) {
                console.log('entered1')
                let Clioemail = 'naresh@suneratech.com';
                const clioUserOptions = {
                  url: 'https://api.clio.health/service/user/account/' + exercisedetails.email.toLowerCase(),
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Service ' + process.env.CLIO_KEY
                  }
                };

                await request(clioUserOptions, async (cerr, clioResponse, userBody) => {
                  if (cerr) {
                    return res.status(210).json({
                      status: 210,
                      message: cerr
                    })
                  } else {
                    if (clioResponse.statusCode == 200) {
                      console.log('entered12')
                      var userid = JSON.parse(userBody).data[0].attributes.userid;
                      var messageJson = await {
                        "message": "<span style=\"color:#61217F;font-weight:bold;text-decoration:underline;\">Moveprint Results</span><br>Moveprint Focus :" + results[0].focusarea + " <br>MSK Category :" + exercisedetails.mskCategory + "<br><span style=\"color:#6BBD\">BMI :" + exercisedetails.bmi + "</span><br>",
                        "messagetype": "attachment",
                        "attachments": [
                          {
                            "filename": "wellness.svg",
                            "filedata": mskDescription[exercisedetails.mskCategory]
                          }
                        ],
                        "patientid": userid
                      }
                      const clioMessageOptions = {
                        url: 'https://api.clio.health/service/messaging',
                        method: 'POST',
                        body: messageJson,
                        json: true,
                        headers: {
                          'Content-Type': 'application/json',
                          'Authorization': 'Service NDBjMDcyOGQtMWFmMy00YjZhLTkwYmUtNzkzMTY4ZWY3YTc3OmI4OTdlOTMwLWQyYjAtNDQ5ZS04NWMwLTZkZjlhYTNhYzY5Nw=='
                        }
                      };
                      await request(clioMessageOptions, (merr, messageResponse, messageBody) => {
                        console.log('Clio message', messageBody);
                        if (merr) {
                          return res.status(210).json({
                            status: 210,
                            message: merr
                          })
                        }

                      });
                    } else {
                      console.log('error');
                      let userDet = await User.findOne({ _id: ObjectId(userId._id) }, { _id: 1, deviceId: 1 }).exec();
                      exercisedetails.user_id = userDet._id;
                      await MskResult.create(exercisedetails, async (err, savedmsk) => {
                        console.log('exercise details', exercisedetails.bmi);
                        if (err) {
                          status = 209;

                          module.exports.homePage({
                            "body": {
                              "email": exercisedetails.email,
                              "userid": exercisedetails.user_id,
                              "id": req.body.id
                            }
                          }, res);
                        }
                        else {

                          if (userIds.length > 0) {
                            let fcmdata = {
                              title: "Moveprint",
                              navigationType: "",
                              body: (userdetails.first === undefined ? exercisedetails.email : (userdetails.first + " " + userdetails.last)) + " has completed the requested MSK Health Report. Click here to view their results!",
                              notification_type: "i",
                              result_type: "MSKRESULT",
                              group_name: "",
                              profileimage: userdetails.profileimage,
                              name: (userdetails.first === undefined ? exercisedetails.email : (userdetails.first + " " + userdetails.last)),
                              //pro_name:(userdetails.first === undefined ? exercisedetails.email : (userdetails.first + " " + userdetails.last)),
                              user_ids: proDetails,
                              user_id: userIds,
                              userId: userId._id,
                              type: "MSK COMPLETE"
                            };
                            if (deviceIds.length > 0)
                              await util.pushnotification(fcmdata, req.body.id, "single", deviceIds);
                          }
                          await NotificationQueue.findOneAndUpdate({ user_id: ObjectId(userdetails._id), message_type: "MSK" }, { $set: { status: true } }, { upsert: true, sort: { _id: -1 } }).exec();

                          if (userdetails.settings[0].enablePushNotifications === true) {

                            NotificationQueue.create({ user_id: userdetails._id, deviceId: userdetails.deviceId, message_type: "MSK", schedule_date: moment(Date.now()).add(30, 'days').utc().format('MM/DD/YYYY') }, async (err, s) => {
                              if (err) {
                                status = 209;
                                module.exports.homePage({
                                  "body": {
                                    "email": exercisedetails.email,
                                    "userid": exercisedetails.user_id,
                                    "id": req.body.id
                                  }
                                }, res);
                              } else {
                                // await User.findOneAndUpdate({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$.isMSKDone": true } }).exec();

                                await User.update({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$[e].isMSKDone": true } }, { "arrayFilters": [{ "e.org_id": ObjectId(req.body.id), "e.role_id": "1" }], "multi": true }).exec();
                                await module.exports.individualMovementReport({
                                  "query": {
                                    "mptdate": "",
                                    "userid": exercisedetails.user_id,
                                    "id": req.body.id
                                  }
                                }, res);
                                module.exports.homePage({
                                  "body": {
                                    "email": exercisedetails.email,
                                    "userid": exercisedetails.user_id,
                                    "id": req.body.id
                                  }
                                }, res);
                              }
                            })
                          } else {
                            await User.update({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$[e].isMSKDone": true } }, { "arrayFilters": [{ "e.org_id": ObjectId(req.body.id), "e.role_id": "1" }], "multi": true }).exec();
                            await module.exports.individualMovementReport({
                              "query": {
                                "mptdate": "",
                                "userid": exercisedetails.user_id,
                                "id": req.body.id
                              }
                            }, res);
                            module.exports.homePage({
                              "body": {
                                "email": exercisedetails.email,
                                "userid": exercisedetails.user_id,
                                "id": req.body.id
                              }
                            }, res);
                          }
                        }
                      });
                    }
                  }
                });
              }
              console.log('in 1')
              exercisedetails.user_id = userdetails._id;

              await MskResult.create(exercisedetails, async (err, savedmsk) => {
                console.log('exercise details', exercisedetails.bmi)
                if (err) {
                  status = 209;

                  module.exports.homePage({
                    "body": {
                      "email": exercisedetails.email,
                      "userid": exercisedetails.user_id,
                      "id": req.body.id
                    }
                  }, res);
                }
                else {

                  if (userIds.length > 0) {
                    let fcmdata = {
                      title: "Moveprint",
                      navigationType: "",
                      body: (userdetails.first === undefined ? exercisedetails.email : (userdetails.first + " " + userdetails.last)) + " has completed the requested MSK Health Report. Click here to view their results!",
                      notification_type: "i",
                      group_name: "",
                      result_type: "MSKRESULT",
                      profileimage: userdetails.profileimage,
                      name: (userdetails.first === undefined ? exercisedetails.email : (userdetails.first + " " + userdetails.last)),
                      //pro_name:(userdetails.first === undefined ? exercisedetails.email : (userdetails.first + " " + userdetails.last)),
                      user_ids: proDetails,
                      user_id: userIds,
                      userId: userId._id,
                      type: "MSK COMPLETE"
                    };
                    if (deviceIds.length > 0)
                      await util.pushnotification(fcmdata, req.body.id, "single", deviceIds);
                  }
                  if (userdetails.settings[0].enablePushNotifications === true) {
                    await NotificationQueue.findOneAndUpdate({ user_id: ObjectId(exercisedetails.user_id), message_type: "MSK" }, { $set: { status: true } }, { upsert: true, sort: { _id: -1 } }, (err, r) => {
                      console.log(err, r);
                    });
                    await NotificationQueue.create({ user_id: userdetails._id, deviceId: userdetails.deviceId, message_type: "MSK", schedule_date: moment(Date.now()).add(30, 'days').utc().format('MM/DD/YYYY') }, async (err, s) => {
                      if (err) {
                        status = 209;
                        module.exports.homePage({
                          "body": {
                            "email": exercisedetails.email,
                            "userid": exercisedetails.user_id,
                            "id": req.body.id
                          }
                        }, res);
                      } else {
                        // await User.findOneAndUpdate({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$.isMSKDone": true } }).exec();

                        await User.update({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$[e].isMSKDone": true } }, { "arrayFilters": [{ "e.org_id": ObjectId(req.body.id), "e.role_id": "1" }], "multi": true }).exec();
                        await module.exports.individualMovementReport({
                          "query": {
                            "mptdate": "",
                            "userid": exercisedetails.user_id,
                            "id": req.body.id
                          }
                        }, res);
                        module.exports.homePage({
                          "body": {
                            "email": exercisedetails.email,
                            "userid": exercisedetails.user_id,
                            "id": req.body.id
                          }
                        }, res);
                      }
                    })
                  } else {
                    await User.update({ _id: ObjectId(userId._id), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { $set: { "roles.$[e].isMSKDone": true } }, { "arrayFilters": [{ "e.org_id": ObjectId(req.body.id), "e.role_id": "1" }], "multi": true }).exec();
                    await module.exports.individualMovementReport({
                      "query": {
                        "mptdate": "",
                        "userid": exercisedetails.user_id,
                        "id": req.body.id
                      }
                    }, res);
                    module.exports.homePage({
                      "body": {
                        "email": exercisedetails.email,
                        "userid": exercisedetails.user_id,
                        "id": req.body.id
                      }
                    }, res);
                  }
                }
              });
            }

          }
        });
      }
    });
    // await QuestionnaireResult.findOne({ email: exercisedetails.email.toLowerCase() }).then(activitydata => {
    //     if (activitydata == null) {
    //         return res.status(210).json({
    //             status: 210,
    //             message: 'No questionnaire'
    //         })
    //     } else {
    //         let questions = activitydata.questions;
    //         for (let i = 1; i < questions.length; i++) {
    //             let obj = {
    //                 "Question_Order": i.toString(),
    //                 "value": questions[i].answer,
    //                 "Question_Group_id": "40",
    //                 "Question_Caterogy": "Activity",
    //                 "Question_Text": questions[i].question
    //             }
    //             exercisedetails.questions.push(obj);
    //         }
    //         console.log('profile updated with latest details');
    //     }
    //     finaljson.questions = exercisedetails.questions;
    // }).catch(err => {
    //     return res.status(210).json({
    //         status: 210,
    //         message: err
    //     })
    // })  
  },
  getMskDates: async (req, res) => {
    let status = 200;
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    let organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { isMskEnabled: 1, _id: 0 }).exec();
    if (organisationSettings.isMskEnabled === false) {
      return res.status(status).json({
        status: status,
        message: 'User Msk Dates',
        mskdates: []
      })
    } else {
      MskResult.aggregate([{ $match: { user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) } }, { $project: { _id: 0, mskdate: { $dateToString: { format: '%Y-%m-%d', date: "$mskdate" } } } }], (err, mskResult) => {
        if (err) {
          status = 209;
          return res.status(status).json({
            status: status,
            messag: err
          })
        }
        else {
          status = 200;
          return res.status(status).json({
            status: status,
            message: 'User Msk Dates',
            mskdates: mskResult
          })
        }
      });
    }
  },
  MskDetailsByDate: async (req, res) => {
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    let organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
    const mskDescription = {
      "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
      "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
      "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
    };
    const mskFeatures = {
      "HEALTH": organisationSettings.categoryDescription[0].mskFeatures,
      "WELLNESS": organisationSettings.categoryDescription[1].mskFeatures,
      "FITNESS": organisationSettings.categoryDescription[2].mskFeatures,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskFeatures,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskFeatures
    };
    let startDate = "";
    let endDate = "";
    let convertdates = await util.convertDates(moment(req.body.startDate).format('MM/DD/YYYY'), moment(req.body.startDate).format('MM/DD/YYYY'));
    startDate = convertdates.startDate;
    endDate = convertdates.endDate;
    if (organisationSettings.isMskEnabled === false) {
      return res.status(status).json({
        status: status,
        message: 'User Msk Dates',
        email: req.body.email,
        mskResult: {
          mskdate: '',
          bmi: '',
          bmiCategory: '',
          pqsiStatus: false,
          mskCategory: '',
          pqsiscore: 0,
          smokingStatus: false,
          mskDescription: "",
          mskFeatures: "",
          bmiDescription: "",
          bmiFeatures: ""
        }
      })
    } else {
      MskResult.aggregate([{ $match: { user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id), mskdate: { $gte: new Date(startDate), $lte: new Date(endDate) } } }]).sort({ mskdate: -1 }).limit(1).exec(async (err, mskresult) => {
        if (err || !mskresult) {
          return res.status(210).json({
            status: 210,
            message: err
          })
        } else {
          return res.status(200).json({
            message: 'User MSK details',
            email: req.body.email,
            mskResult: {
              mskdate: mskresult[0].mskdate,
              bmi: mskresult[0].bmi || '',
              bmiCategory: mskresult[0].bmiCategory || '',
              pqsiStatus: mskresult[0].pqsiStatus || false,
              mskCategory: mskresult[0].mskCategory || '',
              pqsiscore: mskresult[0].pqsiscore || 0,
              smokingStatus: mskresult[0].smokingStatus || false,
              mskDescription: mskDescription[mskresult[0].mskCategory],
              mskFeatures: mskFeatures[mskresult[0].mskCategory],
              bmiDescription: bmiDescription[mskresult[0].bmiCategory],
              bmiFeatures: bmiFeatures[mskresult[0].bmiCategory]
            }
          })
        }
      })
    }
  },
  oldindividualMovementReport: async (req, res) => {
    let organisationColor = "#642683";
    let organisationDetails = await Organisation.findOne({ _id: ObjectId(req.query.id) }, { "theme.color": 1 }).exec();
    organisationColor = organisationDetails.theme.color;
    async function exerciseInstructions(focusArea, week, pain, movementscore) {
      let instructions = [];
      let details = [];
      let flag = 0;
      let mobilityflag = 0;
      if (pain === 5) {
        focusArea = "PAIN FLOW";
      }

      for (var exercise of movementscore) {

        if ((exercise.pain === "yes" && exercise.title === "BREATHING TEST")) {
          flag = flag + 1;
        }
        if ((exercise.pain === "yes" && exercise.title === "MOBILITY TEST")) {
          mobilityflag = mobilityflag + 1;
        }
      }
      let result = [];


      if (flag === 1) {

        result = await ReportExercises.findOne({ focusArea: "BREATHING" }).exec();
        if (week === '1') {
          details = await result.week1;
        }
        else if (week === '2') {
          details = await result.week2;
        }

      } else {
        details = [];
      }
      console.log('breathing result', details.length, flag, mobilityflag, week)
      result = await ReportExercises.findOne({ focusArea: focusArea.replace('TEST', '').trim() }).exec();
      if (week === '1') {
        details = await details.concat(result.week1);
      }
      else if (week === '2') {
        details = await details.concat(result.week2);
      }
      console.log('focus result', details.length, flag, mobilityflag, week)
      if (mobilityflag === 1) {

        result = await ReportExercises.findOne({ focusArea: "MOBILITY" }).exec();
        if (week === '1') {
          details = await details.concat(result.week1);
        }
        else if (week === '2') {
          details = await details.concat(result.week2);
        }
      }
      console.log('final result', details.length, flag, mobilityflag, week)
      for (let i = 0; i < details.length; i++) {
        let inst = [];
        inst = details[i].instructions.split('\n');
        let finalinst = [];
        for (let j = 0; j < inst.length; j++) {
          finalinst.push({ text: [{ text: (j + 1) + '.   ', style: { color: organisationColor, bold: true, fontSize: 10 } }, inst[j]] });
          finalinst.push({ text: '\n' });
          finalinst.push({ text: '\n' });
        }
        instructions.push([{ text: [{ text: '(' + (i + 1) + ')  ', style: { color: '#000000', fontSize: 15 } }, { text: details[i].title + '\n', style: { color: organisationColor, bold: true, fontSize: 18 } }] }],
          // [{
          //     text: ' '
          // }],
          [{
            text: finalinst, style: { fontSize: 10 }
          }],
          // [{
          //     text: ' '
          // }]
        )
      }
      return instructions;
    }
    async function recommendedExercisesDetails(focusArea, week, pain, movementscore) {
      let details = [];
      let flag = 0;
      let mobilityflag = 0;
      if (pain === 5) {
        focusArea = "PAIN FLOW";
      }

      for (var exercise of movementscore) {

        if ((exercise.pain === "yes" && exercise.title === "BREATHING TEST")) {
          flag = flag + 1;
        }
        if ((exercise.pain === "yes" && exercise.title === "MOBILITY TEST")) {
          mobilityflag = mobilityflag + 1;
        }
      }
      let result = [];

      if (flag === 1) {

        result = await ReportExercises.findOne({ focusArea: "BREATHING" }).exec();
        if (week === '1') {
          details = await result.week1;
        }
        else if (week === '2') {
          details = await result.week2;
        }

      } else {
        details = [];
      }
      result = await ReportExercises.findOne({ focusArea: focusArea.replace('TEST', '').trim() }).exec();
      if (week === '1') {
        details = await details.concat(result.week1);
      }
      else if (week === '2') {
        details = await details.concat(result.week2);
      }
      if (mobilityflag === 1) {

        result = await ReportExercises.findOne({ focusArea: "MOBILITY" }).exec();
        if (week === '1') {
          details = await details.concat(result.week1);
        }
        else if (week === '2') {
          details = await details.concat(result.week2);
        }
      }
      console.log('final result', details.length, flag, mobilityflag, week)
      // let result = await ReportExercises.findOne({ focusArea: focusArea.replace('TEST', '').trim() }).exec();
      // if (week === '1') {
      //     details = await result.week1;
      // }
      // else if (week === '2')
      //     details = await result.week2;
      //console.log('rec details', details);
      let output = [];
      let i = 1;
      for (let x of details) {
        let imageThumnails = []
        let setsReps = []
        // adding tables headers as 1 st element
        //setsReps.push([{ text: ' ', style: 'tableHeader' }, { text: 'Sets', style: 'tableHeader' }, { text: 'Reps', colSpan: 2, style: 'tableHeader' }, { text: '' }, { text: 'Weight', colSpan: 2, style: 'tableHeader' }, { text: '' }, { text: 'Rest', style: 'tableHeader' }]);
        let sq = 1;
        for (let ex of x.exercises) {
          // Adding image by image to array to display next to each other
          imageThumnails.push(
            {
              image: ex.thumbnail,
              width: 50,
              height: 50,
              margin: [0, 0, 30, 50]
            }
          )
          // Now adding sets and reps to the table data
          // setsReps.push([
          //     { text: sq }, { text: ex.sets },
          //     { text: '' }, { text: ex.reps, style: 'grayCell' },
          //     { text: '' }, { text: ex.rest, style: 'grayCell' }
          //     , { text: '' }
          // ]);
          sq = sq + 1;
        }
        // Inserting table data as last element to display after all the images
        // imageThumnails.push({
        //     table: {
        //         headerRows: 1,
        //         layout: {
        //             fillColor: function (rowIndex, node, columnIndex) {
        //                 return (rowIndex == 1) ? '#FF0000' : null;
        //             }
        //         },
        //         widths: [25, 30, 25, 25, 25, 25, 30],
        //         // dontBreakRows: true,
        //         // keepWithHeaderRows: 1,
        //         body: setsReps
        //     }
        // });
        for (let ex of x.exercises) {
          imageThumnails.push({
            text: 'Sets',
            style: {
              bold: true,
              fillColor: '#d3d3d3',
              fontSize: 15,
              alignment: 'right',
              color: '#000000'
            }
          });
          imageThumnails.push({
            text: ex.sets,
            style: {
              bold: true,
              fillColor: '#d3d3d3',
              alignment: 'center',
              fontSize: 25,
              color: organisationColor
            }
          });
          imageThumnails.push({
            text: 'Reps',
            style: {
              bold: true,
              fillColor: '#d3d3d3',
              alignment: 'center',
              fontSize: 15,
              color: '#000000'
            }
          });
          imageThumnails.push({
            text: ex.reps,
            style: {
              bold: true,
              alignment: 'justify',
              fillColor: '#d3d3d3',
              fontSize: 25,
              color: organisationColor
            }
          });
          break;
        }
        // let rowData = [
        //     {
        //         text: x.title
        //     },
        //     {
        //         text: x.description
        //     },
        //     {
        //         alignment: 'justify',
        //         columns: imageThumnails
        //     }
        // ];
        //console.log('Image thumbnails',rowData[2][0].columns)
        output.push({
          text: [{ text: '(' + (i) + ')  ', style: { color: '#000000', fontSize: 17 } }, { text: x.title + '\n', style: { color: organisationColor, bold: true, fontSize: 18 } }]
        });
        output.push({
          text: x.description + '\n', style: { fontSize: 10 }
        });
        output.push({ text: ' ' });
        output.push({
          alignment: 'justify',
          columns: imageThumnails
        });
        i++;
      }
      //console.log('output', JSON.stringify(output));
      return output;
    }
    let focusarea_description = '';
    let focusArea = '';
    let exercisesscore = 0;
    let pain = 0;
    let reportDescription = [];
    let isMovementDone, passAll, isWeekThird;
    isMovementDone = passAll = isWeekThird = false;
    const passDescription = {
      "TOE TOUCH": "Congratulations, you passed the toe touch test! \n\tYou can now proceed to improve your fitness and performance. Activities such as deadlifting, lunging, split squats, running, step-ups and lower body coordinated movements are recommended with the primary focus of technique and development.",
      "UPPER BODY MOBILITY": "Congratulations, you passed the upper body mobility test! \n\tYou can now proceed to improving your fitness and performance. Activities such as pushing and pressing overhead, bench pressing, rowing, snatching and throwing are recommended with the primary focus of technique and development.",
      "ROTATION": "Congratulations, you passed the rotation test!\n\t You can now proceed to improving your fitness and performance. Activities such as medicine ball side throws, cable rotations, single arm snatches, single arm rows, and agility drills are recommended with the primary focus of technique and development.",
      "SQUAT": "Congratulations, you passed the Squat Test! \n\tYou can now proceed to improving your fitness and performance. Activities such as front squats, air squats, goblet squats, deadlifting, Olympic lifts and plyometrics are recommended with the primary focus of technique and development.",
      "BALANCE & REACH": "Congratulations, you passed the Balance Test! \n\tYou can now proceed to improving your fitness and performance. Activities such as front Single leg deadlifts, single leg plyometrics, sprinting recommended with the primary focus of technique and development."
    };
    const description = {
      "SYMMETRY": "Great job! You passed all movements and are cleared to proceed with improving your physical fitness.\nWhile training, please remember quality over quantity, and to re-check your Moveprint again in 30 days to stay on top of your game",
      "Pain TOE TOUCH": "Because the Toe Touch caused you pain, it is important that you seek a more thorough assessment from a health care professional.\nWe also recommend that you avoid physical activities till this improves.",
      "Pain UPPER BODY MOBILITY": "Because Upper Body Mobility Test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\nWe also recommend that you avoid physical activities till this improves.",
      "Pain SQUAT": "Because the Squat Test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\nWe also recommend that you avoid physical activities till this improves.",
      "Pain ROTATION": "Because the Rotation Test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\nWe also recommend that you avoid physical activities till this improves.",
      "Pain BALANCE & REACH": "Because the Balance and Reach Test caused you pain, it is important that you seek a more thorough assessment from a health care professional.\nWe also recommend that you avoid physical activities till this improves.",
      "TOE TOUCH": "You failed the toe touch test! \n\tIt is important to limit fitness, performance training and activities such as deadlifting, lunging, split squats, running, step-ups.",
      "UPPER BODY MOBILITY": "You failed the upper body mobility test!\n\t It is important to limit fitness, performance training and activities such as pushing and pressing overhead, bench pressing, rowing and snatching.",
      "ROTATION": "You failed the rotation test!\n\t It is important to limit fitness, performance training and activities such as medicine ball side throw, cable rotations, single-arm snatches, single-arm rows, and agility drills.",
      "SQUAT": "You failed the squat test!\n\t It is important to limit fitness, performance training and activities such as front squats, air squats, goblet squats, deadlifting, Olympic lifts and plyometrics.",
      "BALANCE & REACH": "You failed the balance and reach test!\n\t It is important to limit fitness, performance training and activities such as single leg deadlifts, single leg plyometrics, sprinting"
    };
    const focusDescription = {
      "CONGRATULATIONS": "Great job! You passed all movements and are cleared to proceed with improving your physical fitness.\n\n\tWhile training, please remember quality over quantity, and to re-check your Moveprint again in 30 days to stay on top of your game",
      "TOE TOUCH": "Your best opportunity for improvement is to focus on your toe touch. Your new program will work on this area.\n\n\tIn the meantime, it is important to limit fitness, performance training and activities such as deadlifting, lunging, split squats, running, step-ups and lower body coordinated movements until this movement improves.",
      "UPPER BODY MOBILITY": "Your best opportunity for improvement is to focus on your upper body mobility. Your new program will work on this area.\n\n\tIn the meantime, it is important to limit fitness, performance training and activities using your upper-body until you see improvement. Avoid pushing and pressing overhead, bench pressing, rowing and snatching. ",
      "ROTATION": "Your best opportunity for improvement is to focus on your rotation. Your new program will work on this area.\n\n\tIn the meantime, it is important to limit fitness, performance training and activities such as medicine ball side throws, cable rotations, single-arm snatches, single-arm rows, and agility drills.",
      "SQUAT": "Your best opportunity for improvement is to focus on your squat. Your new program will work on this area.\n\n\tIn the meantime, it is important to limit fitness, performance training and activities such as squatting, deadlifting, Olympic lifts and jumping.",
      "BALANCE & REACH": "Your best opportunity for improvement is to focus on your balance. Your new program will work on this area.\n\n\tIn the meantime, it is important to limit fitness, performance training and activities that include balancing and single-leg activities such as single-leg deadlifting, jumping and landing."
    };
    console.log('input values ', req.query);
    let userId = await User.findOne({ email: req.query.email }, { _id: 1 }).exec();
    try {
      if (req.query.mptdate === "") {

        var result = await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.query.id) }).sort({ _id: -1 }).limit(1).exec();
      } else if (req.query.mptdate != "") {

        var result = await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.query.id), mptdate: req.query.mptdate }).sort({ _id: -1 }).limit(1).exec();
      }
      user = result[0];
      if (user == undefined) {
        return res.status(200).json({
          status: 200,
          message: "User didn't perform Movement exercises",
          isMovementDone: isMovementDone
        })
      } else {

        let currentScore = [];
        user.movementscore.forEach(ex => {
          if (ex.groupid < 6) {
            ex.isDisplay = true; currentScore.push(ex)
          }
          else if ((ex.groupid === 6) && (ex.pain === "yes")) {
            ex.isDisplay = true; currentScore.push(ex)
          } else if ((ex.groupid === 7) && (ex.pain === "yes")) {
            ex.isDisplay = true; currentScore.push(ex)
          }
          else {
            ex.isDisplay = false; currentScore.push(ex)
          }
        })
        focusArea = await util.focusedexercise(currentScore);
        focusarea_description = description[focusArea.replace('TEST', '').trim()];
        //focusarea_features = mpFeatures[focusArea.replace('TEST', '').trim()];
        for (let i = 0; i < 5; i++) {
          if (user.movementscore[i].score === 100) {
            exercisesscore = exercisesscore + 1;
          }
          if (user.movementscore[i].pain === "true") {
            pain = pain + 1;
            reportDescription[i] = description["Pain " + user.movementscore[i].title.replace('TEST', '').trim()];
          } else if (user.movementscore[i].score === 0) {
            reportDescription[i] = description[user.movementscore[i].title.replace('TEST', '').trim()];
          } else {
            reportDescription[i] = passDescription[user.movementscore[i].title.replace('TEST', '').trim()];
          }
        }
        if (!["SPINE CLEARING", "SHOULDER CLEARING"].includes(focusArea)) {
          for (var i = 0; i < 5; i++) {
            if (result[0].movementscore[i].pain === "true") {
              focusarea_description = description["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
              //focusarea_features = mpFeatures["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
              break;
            }
          }
        }
        if (focusArea !== undefined) {
          if (focusArea === "PAIN FLOW" || focusArea === "PAIN FLOW") {
            for (var i = 0; i < 5; i++) {
              if (user.movementscore[i].pain === "true") {
                focusArea = user.movementscore[i].title;
                break;
              }
            }
          }
          focusArea = focusArea.replace('TEST', '').trim();
        }

        // let previousScore = [];
        // user.movementscore.forEach(ex => { if (ex.groupid < 6) { isDisplay = true; previousScore.push(ex) } })
        // focusArea = util.focusedexercise(previousScore);
        // focusarea_description = description[focusArea.replace('TEST', '').trim()];
        if (exercisesscore === 5) {
          passAll = true;
          focusArea = 'CONGRATULATIONS';
          focusarea_description = description["SYMMETRY"];
        }
        let activitydate = new Date(user.mptdate);
        let now = new Date();
        now = moment(now).utc();
        activitydate = moment(activitydate).utc();
        days = now.diff(activitydate, 'days');
        if (days <= 7)
          week = '1'
        else if (days <= 14)
          week = '2'
        else if (days > 14) {
          week = '3';
          isWeekThird = true;
        }
        User.findOne({ _id: ObjectId(userId._id) }).exec(async (err, userdetail) => {
          if (err || !userdetail) {
            return res.status(210).json({
              status: 210,
              message: 'User not found'
            })
          } else {
            var ageDifMs = Date.now() - userdetail.dob.getTime();
            var ageDate = new Date(ageDifMs);
            let age = Math.abs(ageDate.getUTCFullYear() - 1970);
            console.log('score', user.movementscore[0].pain, user.movementscore[1].pain, user.movementscore[2].pain, user.movementscore[3].pain, user.movementscore[4].pain)
            console.log('flags', passAll, isWeekThird, focusArea)
            function setProgress(per) {
              return '<svg viewBox="0 0 258.751 12.391" width="258.751" height="12.391" xmlns="http://www.w3.org/2000/svg"> <rect width="100%" height="12" rx="5"  fill="#e6e7e8"/><rect x="0" width="' + per + '%" height="12" rx="5" fill="' + organisationColor + '" /></svg>'
            }
            var fonts = {
              Roboto: {
                normal: 'fonts/SukhumvitSet-Medium.ttf',
                bold: 'fonts/SukhumvitSet-SemiBold.ttf',
                italics: 'fonts/SukhumvitSet-Light.ttf',
                bolditalics: 'fonts/SukhumvitSet-Light.ttf'
              }
            };
            var printer = new pdfMakePrinter(fonts);
            var docDefinition = {
              content: [
                {
                  layout: 'noBorders', // optional
                  table: {
                    // headers are automatically repeated if the table spans over multiple pages
                    // you can declare how many rows should be treated as headers
                    headerRows: 1,
                    widths: ['*'],
                    body: [
                      [{
                        fillColor: organisationColor,
                        text: {
                          text: 'MOVEPRINT',
                          width: '*',
                          style: {
                            fontSize: 25,
                            bold: true,
                            alignment: 'center',
                            margin: [0, 10, 0, 5],
                            color: '#ffffff'
                          }
                        }
                      }
                      ],
                      [{
                        text: '\n'
                      }],
                      [{
                        columns:
                          [{
                            width: '*',
                            text: [
                              { text: 'NAME:  ', style: 'label' },
                              { text: userdetail.first + ' ' + userdetail.last, style: 'value' }
                            ]
                          },
                          {
                            width: 100,
                            text: [
                              //{ text: moment(new Date()).format("DD/MM/YYYY hh:mm A"), style: 'date' }
                              { text: moment(new Date()).format("lll"), style: 'date' }
                            ]
                          }
                          ]
                      }],
                      [{
                        text: [
                          { text: 'GENDER:  ', style: 'label' },
                          { text: userdetail.gender, style: 'value' },
                          { text: ' ' },
                          { text: 'AGE:  ', style: 'label' },
                          { text: age, style: 'value' },
                          { text: ' ' },
                          { text: 'DOB:  ', style: 'label' },
                          { text: moment(userdetail.dob).format('MM/DD/YYYY'), style: 'value' },
                          { text: '\n' }
                        ]
                      }],
                      [
                        {
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                        }
                      ],
                      [{
                        text: '\n'
                      }],
                      [{
                        layout: 'noBorders',
                        table: {
                          headerRows: 0,
                          widths: [250, '*'],
                          body:
                            [
                              [
                                [
                                  [{ text: 'TOE TOUCH', style: 'value' }],
                                  [{
                                    columns: [{
                                      svg: setProgress(parseInt(user.movementscore[0].score)),
                                      width: 200
                                    },
                                    { text: parseInt(user.movementscore[0].score) + '%' + '\n', style: 'per' }
                                    ]
                                  }],
                                  [{ text: 'UPPER BODY MOBILIY', style: 'value' }],
                                  [{
                                    columns: [{
                                      svg: setProgress(parseInt(user.movementscore[1].score)),
                                      width: 200
                                    },
                                    { text: parseInt(user.movementscore[1].score) + '%' + '\n', style: 'per' }
                                    ]
                                  }],
                                  [{ text: 'ROTATION', style: 'value' }],
                                  [{
                                    columns: [{
                                      svg: setProgress(user.movementscore[2].score),
                                      width: 200
                                    },
                                    { text: parseInt(user.movementscore[2].score) + '%' + '\n', style: 'per' }
                                    ]
                                  }],
                                  [{ text: 'SQUAT', style: 'value' }],
                                  [{
                                    columns: [{
                                      svg: setProgress(user.movementscore[3].score),
                                      width: 200
                                    },
                                    { text: parseInt(user.movementscore[3].score) + '%' + '\n', style: 'per' }
                                    ]
                                  }],
                                  [{ text: 'BALANCE & REACH', style: 'value' }],
                                  [{
                                    columns: [{
                                      svg: setProgress(user.movementscore[4].score),
                                      width: 200
                                    },
                                    { text: parseInt(user.movementscore[4].score) + '%' + '\n', style: 'per' }
                                    ]
                                  }]
                                ],
                                {
                                  text: ['', { text: focusArea.replace('TEST', '').trim() + '\n', bold: true, fontSize: 15 }, ' ', ' ',
                                    { text: focusDescription[focusArea.replace('TEST', '').trim()], fontSize: 10 }],
                                  fillColor: '#FF0000',
                                  color: '#FFFFFF',
                                  // fontSize: 9,
                                  // bold: true,
                                  margin: [10, 5],
                                  width: 200
                                }
                              ]
                            ]
                        }
                      }],
                      [{
                        text: ' '
                      }],
                      [
                        {
                          columns: [
                            {
                              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="77" viewBox="0 0 78 77"> 					<g id="Group_2462" data-name="Group 2462" transform="translate(-36 -349)"> 						<g id="Group_2454" data-name="Group 2454"> 							<g id="Group_2449" data-name="Group 2449"> 								<rect id="Rectangle_4" data-name="Rectangle 4" width="78" height="77" 									transform="translate(36 349)" fill="' + organisationColor + '" /> 							</g> 						</g> 						<g id="Group_2461" data-name="Group 2461" transform="translate(55.738 366)"> 							<g id="Group_479" data-name="Group 479" transform="translate(0 0)"> 								<path id="Path_617" data-name="Path 617" 									d="M8.214,3.046a56.792,56.792,0,0,1,7.167,0c7.972.989,14.021,3.354,14.964,4,3.286,1.839,5.958,7.389,6.112,8.386s.359.778.247,1.617c.751,1.126,3.464.222,5.152,1.4,1.231.962,2.587,2.483,2.083,5.92-.482,4.251-4.385,4.092-5.207,4.111-1.072.016-2.631-1.151-2.905-1.151a11.507,11.507,0,0,1-2.412,0s-.31,2.631-.493,3.344.639,2.118.329,3.892-1.694,4.919-2.028,6.906-.767,4.549-.767,4.549-.323,3.037-.274,3.344a3.606,3.606,0,0,1,.164,1.041,11.493,11.493,0,0,1-1.277,1.768,1.271,1.271,0,0,1-.247.493.681.681,0,0,1-.74,0c-.2.288-.576,0-.576,0a.541.541,0,0,1-.74,0,.818.818,0,0,1-.987,0l-5.714-.329s-3.042-.123-3.289-.781.263-1.584.164-2.343A16.974,16.974,0,0,0,16,45.059c-.839-2.587-2.3-6.618-2.343-9.291S13.118,31.7,13.2,30.3a8.621,8.621,0,0,0-.5-2.976,19.035,19.035,0,0,1-6.468-9.866C1.7,10.257,2.545,5.752,4.737,4.07V3.789l.909-.353ZM19.109,32.671c-.036.776.225,6.479.274,7.619.09,4.98,1.954,7.227,2.8,8.14,1.516,1.335,5.865,2.96,5.865,2.96l.274-.2.11-1.022s-.019.17-.255,0c-.348-.274.129-1.006.129-1.006L28.63,47.7l-.173-.145s-.058.2-.11.384-.521.493-.521.493-.458.419-.795.274-.219-1.178-.219-1.178l1.425-3.152s.217-.713.411-1.343a26.706,26.706,0,0,0,0-3.974,20.533,20.533,0,0,1,.137-5.618c.266-1.033-.1-4.865,0-5.673S30.1,21.684,30.1,21.684s.556-2.562.255-2.856c-.019-.069-.195-.321-.995-.14-1.326.3-6.331-1.8-6.331-1.8s-6.186-2.146-7.126-1.973c-.266.211-.277.882-.3,1.206.474,1.927,2.99,7.575,3.015,8.934S19,27.8,19,29,19.145,31.893,19.109,32.671Z" 									transform="translate(-0.078 -2.935)" fill="#fff" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_618" data-name="Path 618" 									d="M304.183,554.3a10.33,10.33,0,0,1,.274,3.508c-.274,1.288-2.357,4.083-2.357,5.7" 									transform="translate(-268.763 -539.116)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_619" data-name="Path 619" 									d="M490.9,488.3a12.472,12.472,0,0,1,1.315,2.357,8.24,8.24,0,0,0-.575,3.015" 									transform="translate(-461.619 -474.925)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_620" data-name="Path 620" 									d="M577.147,1760.9a4.711,4.711,0,0,0-.236,1.478" 									transform="translate(-548.908 -1712.648)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_621" data-name="Path 621" 									d="M304.183,554.3a10.33,10.33,0,0,1,.274,3.508c-.274,1.288-2.357,4.083-2.357,5.7" 									transform="translate(-268.763 -539.116)" fill="none" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_622" data-name="Path 622" 									d="M490.9,488.3a12.472,12.472,0,0,1,1.315,2.357,8.24,8.24,0,0,0-.575,3.015" 									transform="translate(-461.619 -474.925)" fill="none" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_624" data-name="Path 624" 									d="M918.923,73.044c-.287.178-.375.844-.438,1.162.249,1.971-.348,7.586-.48,8.94s.066,2.777-.071,3.967-1,2.8-1.129,3.567-.52,6.462-.6,7.6c-.479,4.956,1.113,7.021,1.842,8.024,1.354,1.5,5.486,2.242,5.486,2.242l.93.894a1.252,1.252,0,0,1-.3.461.672.672,0,0,1-.734-.085c-.236.26-.573-.066-.573-.066a.539.539,0,0,1-.735-.085,2.746,2.746,0,0,1-.981.436l-5.637-.049s-3.007-.2-3.177-.88.441-1.543.433-2.308a16.942,16.942,0,0,0-.463-4.236c-.537-2.667-1.526-6.84-1.261-9.5a46.615,46.615,0,0,1,1-5.39,8.661,8.661,0,0,0-.159-3.016,34.328,34.328,0,0,1-2.842-10.264c-4.911-10.278,3.326-13.1,3.326-13.1" 									transform="translate(-907.5 -60.382)" fill="#fff" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_623" data-name="Path 623" 									d="M577.147,1760.9a4.711,4.711,0,0,0-.236,1.478" 									transform="translate(-548.908 -1712.648)" fill="none" stroke="#fefffe" 									stroke-miterlimit="10" stroke-width="0.2" /> 							</g> 						</g> 					</g> 				</svg>',
                              height: 78,
                              width: 78
                            },
                            {
                              svg: getStatus((user.movementscore[0].score >= 70), organisationColor),
                              height: 78,
                              width: 78
                            },
                            { text: reportDescription[0], style: 'per' },
                          ]
                        }
                      ],
                      [
                        {
                          columns: [
                            {
                              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="77" viewBox="0 0 78 77"> 					<g id="Group_2452" data-name="Group 2452" transform="translate(-36 -431)"> 						<rect id="Rectangle_6" data-name="Rectangle 6" width="78" height="77" 							transform="translate(36 431)" fill="' + organisationColor + '" /> 						<g id="Layer_3" transform="translate(56.621 445)"> 							<g id="Group_481" data-name="Group 481" transform="translate(0 0)"> 								<path id="Path_961" data-name="Path 961" 									d="M126.315,65.129s2.038,9.513,2.038,11.857a20.763,20.763,0,0,1-1.559,8.727,1.751,1.751,0,0,1-1.853.945c-1.092-.123-4.186-2.614-4.186-2.614s1.166,3.032,1.019,4.112a2.335,2.335,0,0,1-.651,1.485l-.331.54a.807.807,0,0,1,.147.479c.331.184.258.687.258.687H99.017a.55.55,0,0,1-.074-.5,2.1,2.1,0,0,1,.368-.5.523.523,0,0,1-.147-.405.513.513,0,0,1,.221-.331,6.734,6.734,0,0,1-.835-1.633,4.145,4.145,0,0,1-.074-1.019l-.074-12s-.172-1.142-.295-3.2c-.012-1.866.147-3.412.147-3.412a2.993,2.993,0,0,0-.037-1.056,11.319,11.319,0,0,0-.8-2,13.7,13.7,0,0,1-1.448-3.056c-.454-1.583-1.3-5.892-1.6-7.242s-1.976-7.033-2.185-7.745-.761-3.019.184-4.5a6.243,6.243,0,0,1,1.387-1.019A6.475,6.475,0,0,1,97.8,41.1a10.155,10.155,0,0,1,4.075,2.369l2.332,2.3a2.327,2.327,0,0,1,.295-.835c1.473-2.983,5.487-2.8,5.487-2.8a5.464,5.464,0,0,1,5.413,4.259,10.192,10.192,0,0,1-.147,3.388s.417-.516.687-.331.295.54.184.982-.945,2.332-.945,2.332-.356,1.3-.761,1.35a.519.519,0,0,1-.54-.295,10.055,10.055,0,0,0-.331,2.038,3.573,3.573,0,0,0,.368,1.89,2.507,2.507,0,0,0,1.092.835s.1-.184.442-.184,8.506,3.5,9.488,4.333A5.31,5.31,0,0,1,126.315,65.129Z" 									transform="translate(-91.706 -40.855)" fill="#fff" /> 								<path id="Path_962" data-name="Path 962" 									d="M97.96,90.573a.751.751,0,0,1-.086-.663,2.907,2.907,0,0,1,.307-.454.624.624,0,0,1-.1-.417.7.7,0,0,1,.16-.331,6.061,6.061,0,0,1-.786-1.571,5.142,5.142,0,0,1-.074-1.056L97.309,74.1c-.025-.123-.184-1.264-.295-3.2v-.012c-.012-1.866.147-3.425.147-3.437v-.012a2.674,2.674,0,0,0-.037-.994,10.227,10.227,0,0,0-.712-1.8c-.025-.061-.049-.11-.074-.16-.049-.1-.135-.245-.245-.43A10.942,10.942,0,0,1,94.879,61.4c-.331-1.166-.859-3.719-1.252-5.6-.135-.687-.258-1.289-.344-1.657-.184-.822-.945-3.51-2.136-7.586L91.1,46.41c-.209-.687-.8-3.081.2-4.64v-.012a6.049,6.049,0,0,1,1.436-1.068,6.481,6.481,0,0,1,4.149-.638,10.141,10.141,0,0,1,4.149,2.406l2.111,2.087a3.037,3.037,0,0,1,.245-.589,5.141,5.141,0,0,1,3.4-2.6,8.054,8.054,0,0,1,2.234-.282,6.247,6.247,0,0,1,2.406.491,5.279,5.279,0,0,1,3.179,3.891v.012a10.22,10.22,0,0,1-.049,2.97.51.51,0,0,1,.528-.025c.307.2.381.589.245,1.154-.1.43-.871,2.173-.945,2.344-.1.331-.43,1.387-.9,1.448a.668.668,0,0,1-.479-.11,9.8,9.8,0,0,0-.245,1.694,3.389,3.389,0,0,0,.344,1.8,2.155,2.155,0,0,0,.908.712.709.709,0,0,1,.479-.147c.282,0,3.2,1.252,4.578,1.866a41.394,41.394,0,0,1,5.02,2.5,5.521,5.521,0,0,1,1.436,2.516h0c.086.393,2.038,9.562,2.038,11.894a20.824,20.824,0,0,1-1.583,8.8l-.012.012-.037.049a1.876,1.876,0,0,1-1.988.982c-.871-.1-2.9-1.6-3.805-2.3a11.694,11.694,0,0,1,.822,3.645,2.564,2.564,0,0,1-.687,1.571l-.258.43a1.17,1.17,0,0,1,.11.393.942.942,0,0,1,.258.8l-.025.135H98Zm21.922-.7-.086-.049.012-.1a.588.588,0,0,0-.11-.356l-.074-.086.38-.638.012-.025.025-.012a2.225,2.225,0,0,0,.589-1.387c.135-1.031-.994-4-1.007-4.026l-.221-.565.479.381c.847.675,3.24,2.479,4.1,2.578a1.568,1.568,0,0,0,1.682-.847l.012-.012a20.376,20.376,0,0,0,1.547-8.641c0-2.3-1.988-11.6-2.038-11.82a5.234,5.234,0,0,0-1.326-2.344,35.875,35.875,0,0,0-4.873-2.418c-2.283-1.006-4.3-1.829-4.517-1.866a.357.357,0,0,0-.282.1l-.049.135-.16-.061A2.589,2.589,0,0,1,112.8,56.9a3.768,3.768,0,0,1-.381-1.976,10.234,10.234,0,0,1,.331-2.074l.123-.466.184.442a.33.33,0,0,0,.368.2c.16-.025.442-.589.626-1.227l.012-.025c0-.012.822-1.878.933-2.3.037-.16.16-.626-.11-.81-.1-.061-.344.135-.479.295l-.466.565.184-.712a9.509,9.509,0,0,0,.147-3.314,5.236,5.236,0,0,0-1.215-2.43,5.112,5.112,0,0,0-1.755-1.215,6.119,6.119,0,0,0-2.283-.479h0a7.836,7.836,0,0,0-2.148.282,4.727,4.727,0,0,0-3.191,2.43V44.1a2.227,2.227,0,0,0-.27.773l-.037.344-2.565-2.541a10.108,10.108,0,0,0-3.989-2.32,6.346,6.346,0,0,0-3.916.6,5.926,5.926,0,0,0-1.326.97c-.908,1.448-.356,3.707-.16,4.37l.049.147c1.215,4.136,1.952,6.775,2.136,7.61.074.368.2.97.344,1.657.393,1.878.921,4.431,1.252,5.573a10.736,10.736,0,0,0,1.191,2.578c.11.184.209.344.258.454a.818.818,0,0,1,.074.147,10.131,10.131,0,0,1,.736,1.878,3.119,3.119,0,0,1,.037,1.117c-.012.11-.16,1.608-.147,3.388.123,2.025.295,3.167.295,3.179v.012l.074,12.017v.025a4.534,4.534,0,0,0,.074.97,6.5,6.5,0,0,0,.81,1.571l.1.147-.147.086a.451.451,0,0,0-.147.221.364.364,0,0,0,.1.258l.11.11-.11.11a1.665,1.665,0,0,0-.331.454.335.335,0,0,0,.012.27h21.885A.585.585,0,0,0,119.882,89.873Z" 									transform="translate(-90.734 -39.933)" fill="none" /> 								<g id="Layer_3-2" data-name="Layer_3"> 									<g id="Group_481-2" data-name="Group 481" transform="translate(0 0)"> 										<path id="Path_961-2" data-name="Path 961" 											d="M126.315,65.129s2.038,9.513,2.038,11.857a20.763,20.763,0,0,1-1.559,8.727,1.751,1.751,0,0,1-1.853.945c-1.092-.123-4.186-2.614-4.186-2.614s1.166,3.032,1.019,4.112a2.335,2.335,0,0,1-.651,1.485l-.331.54a.807.807,0,0,1,.147.479c.331.184.258.687.258.687H99.017a.55.55,0,0,1-.074-.5,2.1,2.1,0,0,1,.368-.5.523.523,0,0,1-.147-.405.513.513,0,0,1,.221-.331,6.734,6.734,0,0,1-.835-1.632,4.144,4.144,0,0,1-.074-1.019l-.074-12s-.172-1.142-.295-3.2c-.012-1.866.147-3.412.147-3.412a2.994,2.994,0,0,0-.037-1.056,11.319,11.319,0,0,0-.8-2,13.7,13.7,0,0,1-1.448-3.056c-.454-1.583-1.3-5.892-1.6-7.242s-1.976-7.033-2.185-7.745-.761-3.019.184-4.5a6.243,6.243,0,0,1,1.387-1.019A6.475,6.475,0,0,1,97.8,41.1a10.155,10.155,0,0,1,4.075,2.369l2.332,2.3a2.327,2.327,0,0,1,.295-.835c1.473-2.983,5.487-2.8,5.487-2.8a5.464,5.464,0,0,1,5.413,4.259,10.191,10.191,0,0,1-.147,3.388s.417-.516.687-.331.295.54.184.982-.945,2.332-.945,2.332-.356,1.3-.761,1.35a.519.519,0,0,1-.54-.295,10.056,10.056,0,0,0-.331,2.038,3.573,3.573,0,0,0,.368,1.89,2.507,2.507,0,0,0,1.092.835s.1-.184.442-.184,8.506,3.5,9.488,4.333A5.31,5.31,0,0,1,126.315,65.129Z" 											transform="translate(-91.706 -40.855)" fill="#fefffe" /> 										<path id="Path_962-2" data-name="Path 962" 											d="M97.96,90.573a.751.751,0,0,1-.086-.663,2.909,2.909,0,0,1,.307-.454.624.624,0,0,1-.1-.417.7.7,0,0,1,.16-.331,6.061,6.061,0,0,1-.786-1.571,5.142,5.142,0,0,1-.074-1.056L97.309,74.1c-.025-.123-.184-1.264-.295-3.2v-.012c-.012-1.866.147-3.425.147-3.437v-.012a2.674,2.674,0,0,0-.037-.994,10.227,10.227,0,0,0-.712-1.8c-.025-.061-.049-.11-.074-.16-.049-.1-.135-.245-.245-.43A10.942,10.942,0,0,1,94.879,61.4c-.331-1.166-.859-3.719-1.252-5.6-.135-.687-.258-1.289-.344-1.657-.184-.822-.945-3.51-2.136-7.586L91.1,46.41c-.209-.687-.8-3.081.2-4.64v-.012a6.048,6.048,0,0,1,1.436-1.068,6.481,6.481,0,0,1,4.149-.638,10.141,10.141,0,0,1,4.149,2.406l2.111,2.087a3.038,3.038,0,0,1,.245-.589,5.141,5.141,0,0,1,3.4-2.6,8.054,8.054,0,0,1,2.234-.282,6.247,6.247,0,0,1,2.406.491,5.279,5.279,0,0,1,3.179,3.891v.012a10.219,10.219,0,0,1-.049,2.97.51.51,0,0,1,.528-.025c.307.2.381.589.245,1.154-.1.43-.871,2.173-.945,2.344-.1.331-.43,1.387-.9,1.448a.668.668,0,0,1-.479-.11,9.8,9.8,0,0,0-.245,1.694,3.389,3.389,0,0,0,.344,1.8,2.155,2.155,0,0,0,.908.712.709.709,0,0,1,.479-.147c.282,0,3.2,1.252,4.578,1.866a41.393,41.393,0,0,1,5.02,2.5,5.521,5.521,0,0,1,1.436,2.516h0c.086.393,2.038,9.562,2.038,11.894a20.824,20.824,0,0,1-1.583,8.8l-.012.012-.037.049a1.876,1.876,0,0,1-1.988.982c-.871-.1-2.9-1.6-3.805-2.3a11.694,11.694,0,0,1,.822,3.645,2.564,2.564,0,0,1-.687,1.571l-.258.43a1.17,1.17,0,0,1,.11.393.942.942,0,0,1,.258.8l-.025.135H98Zm21.922-.7-.086-.049.012-.1a.588.588,0,0,0-.11-.356l-.074-.086.381-.638.012-.025.025-.012a2.225,2.225,0,0,0,.589-1.387c.135-1.031-.994-4-1.007-4.026l-.221-.565.479.381c.847.675,3.24,2.479,4.1,2.578a1.568,1.568,0,0,0,1.682-.847l.012-.012a20.376,20.376,0,0,0,1.547-8.641c0-2.3-1.988-11.6-2.038-11.82a5.234,5.234,0,0,0-1.326-2.344,35.877,35.877,0,0,0-4.873-2.418c-2.283-1.006-4.3-1.829-4.517-1.866a.357.357,0,0,0-.282.1l-.049.135-.16-.061A2.59,2.59,0,0,1,112.8,56.9a3.768,3.768,0,0,1-.381-1.976,10.233,10.233,0,0,1,.331-2.074l.123-.466.184.442a.33.33,0,0,0,.368.2c.16-.025.442-.589.626-1.227l.012-.025c0-.012.822-1.878.933-2.3.037-.16.16-.626-.11-.81-.1-.061-.344.135-.479.295l-.466.565.184-.712a9.509,9.509,0,0,0,.147-3.314,5.236,5.236,0,0,0-1.215-2.43,5.111,5.111,0,0,0-1.755-1.215,6.119,6.119,0,0,0-2.283-.479h0a7.836,7.836,0,0,0-2.148.282,4.727,4.727,0,0,0-3.191,2.43V44.1a2.227,2.227,0,0,0-.27.773l-.037.344-2.565-2.541a10.108,10.108,0,0,0-3.989-2.32,6.346,6.346,0,0,0-3.916.6,5.926,5.926,0,0,0-1.326.97c-.908,1.448-.356,3.707-.16,4.37l.049.147c1.215,4.136,1.952,6.775,2.136,7.61.074.368.2.97.344,1.657.393,1.878.921,4.431,1.252,5.573a10.735,10.735,0,0,0,1.191,2.578c.11.184.209.344.258.454a.818.818,0,0,1,.074.147,10.131,10.131,0,0,1,.736,1.878,3.119,3.119,0,0,1,.037,1.117c-.012.11-.16,1.608-.147,3.388.123,2.025.295,3.167.295,3.179v.012l.074,12.017v.025a4.533,4.533,0,0,0,.074.97,6.5,6.5,0,0,0,.81,1.571l.1.147-.147.086a.451.451,0,0,0-.147.221.364.364,0,0,0,.1.258l.11.11-.11.11a1.665,1.665,0,0,0-.331.454.335.335,0,0,0,.012.27h21.885A.585.585,0,0,0,119.882,89.873Z" 											transform="translate(-90.734 -39.933)" fill="none" /> 									</g> 									<g id="Group_482" data-name="Group 482" transform="translate(4.599 3.838)"> 										<path id="Path_963" data-name="Path 963" 											d="M140.131,90.078a3.427,3.427,0,0,1-.565-1.142l-.258-1.3a3.093,3.093,0,0,1-.528-.344c-.16-.135-.295-.749-.626-2.786-.061-.393-.123-.736-.147-.871a7.254,7.254,0,0,0-1.362-2.884c-.086-.1-.295-.331-.577-.651a36.279,36.279,0,0,0-2.995-3.191h0a26.184,26.184,0,0,1-4.1-4.051,5.046,5.046,0,0,1-.773-1.6l.245-.061a4.688,4.688,0,0,0,.724,1.5,25.931,25.931,0,0,0,4.038,3.989,34.762,34.762,0,0,1,3.056,3.253c.27.307.491.552.577.651a7.532,7.532,0,0,1,1.436,3.007c.025.147.074.466.147.884a18.876,18.876,0,0,0,.54,2.627,3.744,3.744,0,0,0,.54.344l.049.025.282,1.424a3.344,3.344,0,0,0,.491,1.006,1.035,1.035,0,0,0,.761.344.523.523,0,0,0,.466-.331l.1-.258.135.245c.012.012.2.331.847.233a2,2,0,0,0,.491-.773l.049-.11.11.037c.147.049.614.16.761-.049a2.1,2.1,0,0,0,.233-.908v-.147l.147.037c.012.012.393.086.528-.184a4.289,4.289,0,0,0-.123-1.608V86.42a6.618,6.618,0,0,0-.209-1.24,2.647,2.647,0,0,0-.589-.749l-.025-.012L144,84.395a5.465,5.465,0,0,0-1.51-2.05h0a3.03,3.03,0,0,1-.773-1.191.435.435,0,0,1-.049-.11,4.773,4.773,0,0,0-1.313-1.817v-.012c-1.092-1.252-4.21-6.665-4.345-6.9l.221-.123c.025.061,3.24,5.609,4.308,6.849a5,5,0,0,1,1.362,1.9l.037.11a2.513,2.513,0,0,0,.675,1.068,5.647,5.647,0,0,1,1.6,2.136,2.889,2.889,0,0,1,.626.835,7.66,7.66,0,0,1,.221,1.3,4.29,4.29,0,0,1,.1,1.768.648.648,0,0,1-.663.344,2.168,2.168,0,0,1-.27.921c-.233.319-.712.233-.945.172a1.9,1.9,0,0,1-.577.81l-.012.012h-.012a1.169,1.169,0,0,1-.994-.2.718.718,0,0,1-.6.331A1.161,1.161,0,0,1,140.131,90.078Zm-1.191-2.921Z" 											transform="translate(-128.2 -71.2)" fill="#fefffe" /> 									</g> 									<g id="Group_483" data-name="Group 483" transform="translate(15.321 24.471)"> 										<path id="Path_964" data-name="Path 964" 											d="M223.711,253.563c-1.645-1.632-2.909-3.118-3.265-3.547a8.763,8.763,0,0,0-1.4-1.289,13.325,13.325,0,0,1-1.215-1.056,6.487,6.487,0,0,1-1.706-2.467l-.049-.2c-.135-.6-.356-1.6-.466-2.259a4.735,4.735,0,0,1,0-1.424l.012-.037.037-.025a1.872,1.872,0,0,1,.614-.393,1.4,1.4,0,0,1,.307-.025.735.735,0,0,1,.356-.626,1.036,1.036,0,0,1,.7-.209,1.086,1.086,0,0,1,.761-.614,1.418,1.418,0,0,1,.7.111.729.729,0,0,1,.577-.209c.528,0,.835.147.933.442.221.6.491,1.9.552,2.172a1.488,1.488,0,0,1,.491.552,18.268,18.268,0,0,1,.258,2.639,3.175,3.175,0,0,0,.319,1.178c.049.049.172.147.319.282.54.479,1.559,1.387,1.841,1.632a23.438,23.438,0,0,0,5.229,2.97h.012l.012.012a8.717,8.717,0,0,1,2.676,3.179,17.848,17.848,0,0,1,1.068,2.173l-.233.1c-.012-.037-1.583-3.94-3.621-5.217a23.887,23.887,0,0,1-5.278-3.007h-.012c-.282-.245-1.3-1.141-1.841-1.632-.16-.135-.27-.245-.319-.282-.245-.209-.381-1.154-.405-1.338v-.012a21.514,21.514,0,0,0-.233-2.553,1.383,1.383,0,0,0-.442-.479l-.049-.025v-.037a22.156,22.156,0,0,0-.552-2.2c-.025-.074-.1-.282-.7-.282-.331,0-.405.135-.417.16l-.049.16-.147-.1a.967.967,0,0,0-.638-.123c-.38.037-.6.552-.6.552l-.049.111-.11-.037a.736.736,0,0,0-.589.16.532.532,0,0,0-.246.54l.061.221-.221-.061a.7.7,0,0,0-.344,0,1.519,1.519,0,0,0-.479.307,4.475,4.475,0,0,0,.012,1.3c.11.65.331,1.645.466,2.234l.049.2a6.1,6.1,0,0,0,1.633,2.332,14.85,14.85,0,0,0,1.191,1.031,8.683,8.683,0,0,1,1.436,1.326c.344.43,1.608,1.9,3.24,3.523a28.506,28.506,0,0,0,5.45,4.419l-.123.221A28.236,28.236,0,0,1,223.711,253.563Z" 											transform="translate(-215.556 -239.3)" fill="#fefffe" /> 									</g> 								</g> 							</g> 							<g id="Group_482-2" data-name="Group 482" transform="translate(4.599 3.838)"> 								<path id="Path_963-2" data-name="Path 963" 									d="M140.131,90.078a3.427,3.427,0,0,1-.565-1.142l-.258-1.3a3.092,3.092,0,0,1-.528-.344c-.16-.135-.295-.749-.626-2.786-.061-.393-.123-.736-.147-.871a7.255,7.255,0,0,0-1.362-2.884c-.086-.1-.295-.331-.577-.651a36.283,36.283,0,0,0-2.995-3.191h0a26.184,26.184,0,0,1-4.1-4.051,5.046,5.046,0,0,1-.773-1.6l.246-.061a4.687,4.687,0,0,0,.724,1.5,25.932,25.932,0,0,0,4.038,3.989,34.759,34.759,0,0,1,3.056,3.253c.27.307.491.552.577.651a7.531,7.531,0,0,1,1.436,3.007c.025.147.074.466.147.884a18.873,18.873,0,0,0,.54,2.627,3.743,3.743,0,0,0,.54.344l.049.025.282,1.424a3.344,3.344,0,0,0,.491,1.007,1.036,1.036,0,0,0,.761.344.523.523,0,0,0,.466-.331l.1-.258.135.245c.012.012.2.331.847.233a2,2,0,0,0,.491-.773l.049-.11.11.037c.147.049.614.16.761-.049a2.1,2.1,0,0,0,.233-.908v-.147l.147.037c.012.012.393.086.528-.184a4.289,4.289,0,0,0-.123-1.608V86.42a6.619,6.619,0,0,0-.209-1.24,2.647,2.647,0,0,0-.589-.749l-.025-.012L144,84.395a5.465,5.465,0,0,0-1.51-2.05h0a3.029,3.029,0,0,1-.773-1.191.435.435,0,0,1-.049-.11,4.773,4.773,0,0,0-1.313-1.817v-.012c-1.092-1.252-4.21-6.665-4.345-6.9l.221-.123c.025.061,3.24,5.609,4.308,6.849a5,5,0,0,1,1.362,1.9l.037.11a2.513,2.513,0,0,0,.675,1.068,5.647,5.647,0,0,1,1.6,2.136,2.89,2.89,0,0,1,.626.835,7.659,7.659,0,0,1,.221,1.3,4.29,4.29,0,0,1,.1,1.768.648.648,0,0,1-.663.344,2.168,2.168,0,0,1-.27.921c-.233.319-.712.233-.945.172a1.9,1.9,0,0,1-.577.81l-.012.012h-.012a1.169,1.169,0,0,1-.994-.2.718.718,0,0,1-.6.331A1.161,1.161,0,0,1,140.131,90.078Zm-1.191-2.921Z" 									transform="translate(-128.2 -71.2)" fill="#661987" /> 							</g> 							<g id="Group_483-2" data-name="Group 483" transform="translate(15.321 24.471)"> 								<path id="Path_964-2" data-name="Path 964" 									d="M223.711,253.563c-1.645-1.632-2.909-3.118-3.265-3.547a8.764,8.764,0,0,0-1.4-1.289,13.324,13.324,0,0,1-1.215-1.056,6.487,6.487,0,0,1-1.706-2.467l-.049-.2c-.135-.6-.356-1.6-.466-2.259a4.735,4.735,0,0,1,0-1.424l.012-.037.037-.025a1.872,1.872,0,0,1,.614-.393,1.4,1.4,0,0,1,.307-.025.735.735,0,0,1,.356-.626,1.036,1.036,0,0,1,.7-.209,1.086,1.086,0,0,1,.761-.614,1.418,1.418,0,0,1,.7.11.729.729,0,0,1,.577-.209c.528,0,.835.147.933.442.221.6.491,1.9.552,2.172a1.488,1.488,0,0,1,.491.552,18.271,18.271,0,0,1,.258,2.639,3.175,3.175,0,0,0,.319,1.178c.049.049.172.147.319.282.54.479,1.559,1.387,1.841,1.633a23.438,23.438,0,0,0,5.229,2.97h.012l.012.012a8.716,8.716,0,0,1,2.676,3.179,17.842,17.842,0,0,1,1.068,2.173l-.233.1c-.012-.037-1.583-3.94-3.621-5.217a23.887,23.887,0,0,1-5.278-3.007h-.012c-.282-.245-1.3-1.141-1.841-1.632-.16-.135-.27-.245-.319-.282-.245-.209-.381-1.154-.405-1.338v-.012a21.515,21.515,0,0,0-.233-2.553,1.383,1.383,0,0,0-.442-.479l-.049-.025v-.037a22.153,22.153,0,0,0-.552-2.2c-.025-.074-.1-.282-.7-.282-.331,0-.405.135-.417.16l-.049.16-.147-.1a.967.967,0,0,0-.638-.123c-.38.037-.6.552-.6.552l-.049.11-.11-.037a.736.736,0,0,0-.589.16.532.532,0,0,0-.246.54l.061.221-.221-.061a.7.7,0,0,0-.344,0,1.519,1.519,0,0,0-.479.307,4.474,4.474,0,0,0,.012,1.3c.11.65.331,1.645.466,2.234l.049.2a6.1,6.1,0,0,0,1.633,2.332,14.853,14.853,0,0,0,1.191,1.031,8.685,8.685,0,0,1,1.436,1.326c.344.43,1.608,1.9,3.24,3.523a28.5,28.5,0,0,0,5.45,4.419l-.123.221A28.241,28.241,0,0,1,223.711,253.563Z" 									transform="translate(-215.556 -239.3)" fill="' + organisationColor + '" /> 							</g> 						</g> 					</g> </svg> 	',
                              height: 78,
                              width: 78
                            },
                            {
                              svg: getStatus((user.movementscore[1].score >= 70), organisationColor),
                              height: 78,
                              width: 78
                            },
                            { text: reportDescription[1], style: 'per' },
                          ]
                        }
                      ],
                      [
                        {
                          columns: [
                            {
                              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewBox="0 0 78 78"> 					<g id="Group_2453" data-name="Group 2453" transform="translate(-36 -513)"> 						<rect id="Rectangle_8" data-name="Rectangle 8" width="78" height="78" 							transform="translate(36 513)" fill="' + organisationColor + '" /> 						<g id="Group_3" data-name="Group 3" transform="translate(67.712 520.805)"> 							<g id="Group_202" data-name="Group 202"> 								<path id="Path_645" data-name="Path 645" 									d="M12.835,24.873c-.309-1.343.693-7.73.448-9.628-.245-2.378-1.866-4.617-2.143-5.2a5.215,5.215,0,0,1-.309-1.631,11.35,11.35,0,0,0,.757-3.934C11.417,1.928,10,1,8.56,1,7.835,1,5.489,1,5.766,5.041a9.714,9.714,0,0,0,.714,3.828A5.841,5.841,0,0,1,6.9,11.183c-.032.533-3.455,4.585-3.657,5.726a8.168,8.168,0,0,0,.171,3.071c.171.864.064,6.9.064,6.9S1.6,32.742,1.448,32.913,1,33.36,1,33.606a8.349,8.349,0,0,0,.2,1.066s.16.7.245.928a3.524,3.524,0,0,0,.693.725s.586.384.885.331c.128-.011-.085-.48-.085-.48s.149-.16.256-.064.917,4.585.917,4.585a41.662,41.662,0,0,1,.9,4.606c.139,1.578-.437,2.73-.277,4.073a50.657,50.657,0,0,0,1.621,5.619,10.342,10.342,0,0,1,.522,2,7.746,7.746,0,0,0-.139,1.343,8.332,8.332,0,0,0,.107,1.7,22.679,22.679,0,0,0,.309,2.346c.256.64,1.813,1.13,2.41,1.034s1.45-.32,1.514-.928-1.418-3.241-1.418-3.241S8.432,56.6,8.314,56.125s.544-4.276.522-5.427S8.57,45.825,8.73,45.43s.65,1.557.65,1.557A25.026,25.026,0,0,0,10,52.062c.064.96.139,2.069.139,2.069a5.5,5.5,0,0,0-.448,1.482,6.966,6.966,0,0,0,0,1.418c.1.341.277.821.309,1.066s-.085.533.107.9a1.734,1.734,0,0,0,1.759.928c1.3-.053,1.663-.7,1.621-1.173a24.263,24.263,0,0,0-1.109-2.623,10.354,10.354,0,0,1-.618-2.069c0-.512,1.013-4.062,1.141-4.8.352-2.943-.469-4.489-.522-5.48s1.375-5,1.375-5,1.5-5.033,1.5-7.73S13.145,26.217,12.835,24.873Z" 									transform="translate(-0.893 -0.893)" fill="#fff" /> 								<path id="Path_646" data-name="Path 646" 									d="M8.509,62.631c-.714,0-2.1-.469-2.356-1.109a5.473,5.473,0,0,1-.213-1.461,5.317,5.317,0,0,0-.1-.9,4.5,4.5,0,0,1-.107-1.237c0-.181,0-.352-.011-.48a4.033,4.033,0,0,1,.085-.949c.021-.149.043-.277.053-.405a9.312,9.312,0,0,0-.512-1.951,49.088,49.088,0,0,1-1.631-5.651,6.715,6.715,0,0,1,.128-1.962A8.438,8.438,0,0,0,4,44.409a41.058,41.058,0,0,0-.9-4.585c-.288-1.621-.778-4.222-.885-4.532a.18.18,0,0,0-.053.021c.107.245.128.405.075.49a.117.117,0,0,1-.107.064,1.864,1.864,0,0,1-.949-.341l-.011-.011a3.4,3.4,0,0,1-.725-.768A9.064,9.064,0,0,1,.213,33.8,7.844,7.844,0,0,1,0,32.712c0-.256.245-.512.416-.693l.064-.064c.128-.192,1.269-3.679,2-5.982.011-.341.1-6.046-.064-6.867a8.058,8.058,0,0,1-.181-3.113,15.719,15.719,0,0,1,2.282-3.647A13.347,13.347,0,0,0,5.9,10.279a5.64,5.64,0,0,0-.405-2.26,9.671,9.671,0,0,1-.725-3.87,4.421,4.421,0,0,1,.81-3.38A2.7,2.7,0,0,1,7.666,0c1.813,0,2.985,1.343,3.145,3.583a11.239,11.239,0,0,1-.757,3.956,5.119,5.119,0,0,0,.3,1.567,5.071,5.071,0,0,0,.309.533,12.07,12.07,0,0,1,1.845,4.7,32.534,32.534,0,0,1-.245,4.969,24.185,24.185,0,0,0-.2,4.638,6.95,6.95,0,0,0,.832,1.7,9.079,9.079,0,0,1,1.61,4.51c0,2.676-1.493,7.709-1.5,7.762s-1.418,4-1.375,4.969a5.96,5.96,0,0,0,.192,1.045,11.3,11.3,0,0,1,.32,4.457c-.053.309-.256,1.1-.469,1.93A26.945,26.945,0,0,0,11,53.173a6.9,6.9,0,0,0,.48,1.642c.064.181.117.32.139.395.032.107.171.405.341.768a9.884,9.884,0,0,1,.768,1.877,1,1,0,0,1-.245.736A1.937,1.937,0,0,1,11,59.144a1.835,1.835,0,0,1-1.855-.992,1.282,1.282,0,0,1-.117-.7,1.72,1.72,0,0,0,0-.235,4.648,4.648,0,0,0-.192-.682c-.043-.128-.085-.256-.117-.373a2.7,2.7,0,0,1-.021-.938c.011-.171.021-.341.021-.5a5.179,5.179,0,0,1,.448-1.5l-.16-2.037A25.434,25.434,0,0,1,8.391,46.1a9.082,9.082,0,0,0-.469-1.439A35.207,35.207,0,0,0,8,48.311c.032.629.053,1.162.064,1.493a27.91,27.91,0,0,1-.288,2.943,17.519,17.519,0,0,0-.235,2.463c.107.458,1.322,3.06,1.343,3.081.149.267,1.493,2.676,1.429,3.295-.064.522-.618.874-1.61,1.024A.623.623,0,0,1,8.509,62.631ZM2.228,35.079a.191.191,0,0,1,.139.053c.043.032.139.107.949,4.649a41.062,41.062,0,0,1,.9,4.617,8.345,8.345,0,0,1-.149,2.175,6.677,6.677,0,0,0-.128,1.9,50.217,50.217,0,0,0,1.621,5.6,9.492,9.492,0,0,1,.522,2.047,3.18,3.18,0,0,1-.064.426,4.395,4.395,0,0,0-.075.906c.011.139.011.32.011.5a3.947,3.947,0,0,0,.1,1.162,4.774,4.774,0,0,1,.107.949,5.3,5.3,0,0,0,.2,1.4c.224.565,1.7,1.056,2.3.97s1.365-.32,1.429-.842a12.634,12.634,0,0,0-1.4-3.177c-.053-.117-1.237-2.655-1.354-3.135a14.568,14.568,0,0,1,.224-2.538,28,28,0,0,0,.288-2.911c-.011-.331-.032-.864-.064-1.493A23.077,23.077,0,0,1,7.752,44.5c.043-.117.128-.128.16-.117.075,0,.277.021.693,1.685v.021a25.3,25.3,0,0,0,.618,5.043v.011l.139,2.1-.011.021a5.559,5.559,0,0,0-.437,1.439c0,.171-.011.341-.021.512a2.81,2.81,0,0,0,.021.864c.032.107.075.235.117.363a4.846,4.846,0,0,1,.2.725,1.114,1.114,0,0,1,0,.267,1.036,1.036,0,0,0,.1.6,1.639,1.639,0,0,0,1.663.874,1.739,1.739,0,0,0,1.322-.48.775.775,0,0,0,.192-.576,11.5,11.5,0,0,0-.746-1.813,7.248,7.248,0,0,1-.352-.789c-.021-.075-.075-.213-.139-.384a6.97,6.97,0,0,1-.49-1.717,26.211,26.211,0,0,1,.672-2.911c.213-.832.416-1.61.469-1.909a11.081,11.081,0,0,0-.32-4.372,6.311,6.311,0,0,1-.2-1.088c-.043-1.013,1.333-4.883,1.386-5.043.011-.043,1.493-5.043,1.493-7.688a8.916,8.916,0,0,0-1.578-4.4,7.379,7.379,0,0,1-.853-1.749,24.061,24.061,0,0,1,.2-4.7,32.128,32.128,0,0,0,.245-4.926,12,12,0,0,0-1.813-4.617c-.139-.245-.256-.426-.309-.554a5.4,5.4,0,0,1-.32-1.663V7.506l.011-.021A11.393,11.393,0,0,0,10.62,3.6C10.385.544,8.477.213,7.666.213A2.548,2.548,0,0,0,5.726.906a4.238,4.238,0,0,0-.746,3.231,9.466,9.466,0,0,0,.714,3.8,5.976,5.976,0,0,1,.426,2.356,10.058,10.058,0,0,1-1.407,2.175,16.955,16.955,0,0,0-2.25,3.561,8.067,8.067,0,0,0,.171,3.028c.171.864.075,6.675.075,6.92v.032C2.26,27.392.81,31.913.65,32.083l-.064.064c-.16.16-.373.395-.373.565a8.167,8.167,0,0,0,.2,1.045c0,.011.16.7.235.917a3.11,3.11,0,0,0,.65.672,1.922,1.922,0,0,0,.746.309,1.857,1.857,0,0,0-.117-.341L1.9,35.25l.053-.053A.471.471,0,0,1,2.228,35.079Z" 									fill="#fff" /> 							</g> 							<g id="Group_203" data-name="Group 203" transform="translate(0.117 0.107)"> 								<path id="Path_647" data-name="Path 647" 									d="M12.925,24.873c-.309-1.343.693-7.73.458-9.628-.245-2.378-1.855-4.617-2.132-5.2a5.215,5.215,0,0,1-.309-1.631A11.35,11.35,0,0,0,11.7,4.476C11.528,1.938,10.11,1,8.66,1,7.935,1,5.589,1,5.866,5.03a9.5,9.5,0,0,0,.725,3.838,5.841,5.841,0,0,1,.416,2.314c-.032.533-3.455,4.585-3.657,5.726a8.168,8.168,0,0,0,.171,3.071c.171.864.064,6.9.064,6.9S1.7,32.742,1.548,32.913s-.448.448-.448.693a8.349,8.349,0,0,0,.2,1.066s.16.7.245.928a3.524,3.524,0,0,0,.693.725s.586.384.874.331c.128-.011-.085-.48-.085-.48s.149-.16.256-.064.906,4.585.906,4.585a41.662,41.662,0,0,1,.9,4.606c.139,1.578-.437,2.73-.277,4.073a50.657,50.657,0,0,0,1.621,5.619,9.722,9.722,0,0,1,.512,2A7.745,7.745,0,0,0,6.8,58.342a8.332,8.332,0,0,0,.107,1.7,22.68,22.68,0,0,0,.309,2.346c.256.64,1.813,1.13,2.41,1.034s1.45-.32,1.514-.928-1.407-3.241-1.407-3.241S8.5,56.6,8.393,56.125s.544-4.276.522-5.427a51.328,51.328,0,0,1-.1-5.267c.16-.405.65,1.557.65,1.557a25.026,25.026,0,0,0,.618,5.075c.064.96.139,2.069.139,2.069a5.5,5.5,0,0,0-.448,1.482,6.966,6.966,0,0,0,0,1.418c.1.341.277.821.309,1.066s-.085.533.107.9a1.717,1.717,0,0,0,1.759.928c1.3-.053,1.663-.7,1.621-1.173a26.644,26.644,0,0,0-1.1-2.623,10.354,10.354,0,0,1-.618-2.069c0-.522,1.013-4.062,1.141-4.8.363-2.943-.469-4.489-.512-5.48s1.386-5,1.386-5,1.5-5.033,1.5-7.73C15.356,28.36,13.234,26.217,12.925,24.873Z" 									transform="translate(-1.1 -1)" fill="#fff" /> 							</g> 							<g id="Group_204" data-name="Group 204" transform="translate(1.898 14.085)"> 								<path id="Path_648" data-name="Path 648" 									d="M18.216,153.276l-.032-.1c.149-.053.384-.171.405-.256a.594.594,0,0,0-.1-.363c-.043-.075-.075-.1-.085-.1-.075-.011-.245-.075-.352-.107a.234.234,0,0,1-.085-.032c-.107-.032-.171-.256-.171-.437a4.612,4.612,0,0,1,.213-1.1c.021-.053.053-.139.1-.245a6.1,6.1,0,0,0,.469-1.418c0-.128-.011-.267-.021-.395a1.383,1.383,0,0,1,.032-.64c.032-.085.3-.469.789-1.2.8-1.194,2.015-2.986,2.751-4.276a15.07,15.07,0,0,0,1.514-4.51l.011-.021a20.073,20.073,0,0,0,1.653-4.382l.011-.021a9.863,9.863,0,0,0,.565-1.578l.107.032a9.163,9.163,0,0,1-.576,1.589,20.375,20.375,0,0,1-1.653,4.393,14.966,14.966,0,0,1-1.525,4.542c-.736,1.29-1.951,3.092-2.762,4.276-.416.618-.746,1.109-.778,1.194a1.311,1.311,0,0,0-.021.586c.011.128.021.267.021.405a5.665,5.665,0,0,1-.48,1.461c-.043.1-.075.181-.1.234a4.235,4.235,0,0,0-.2,1.066.513.513,0,0,0,.1.341.769.769,0,0,0,.085.032c.107.032.267.1.341.107.053.011.1.053.149.139a.692.692,0,0,1,.107.459C18.642,153.1,18.29,153.244,18.216,153.276Z" 									transform="translate(-17.8 -132.1)" fill="#661987" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 							<g id="Group_205" data-name="Group 205" transform="translate(2.538 12.432)"> 								<path id="Path_649" data-name="Path 649" 									d="M23.907,130.163l-.107-.032.97-3.412a8.437,8.437,0,0,1,.6-1.407,4.041,4.041,0,0,0,.5-1.311c.011-.256.1-.81.192-1.439a22.031,22.031,0,0,0,.3-2.538V116.6h.107v3.423a22.447,22.447,0,0,1-.3,2.548A14.136,14.136,0,0,0,25.986,124a4.109,4.109,0,0,1-.512,1.354,9.824,9.824,0,0,0-.6,1.4Z" 									transform="translate(-23.8 -116.6)" fill="#68008b" stroke="#670f89" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 							<g id="Group_206" data-name="Group 206" transform="translate(6.76 32.232)"> 								<path id="Path_650" data-name="Path 650" 									d="M64.53,314.626l-.107-.021a24.1,24.1,0,0,0,.522-2.783,24.709,24.709,0,0,0-.618-3.892c-.373-1.919-.8-4.094-.928-5.619l.107-.011c.128,1.525.554,3.7.928,5.609a26.127,26.127,0,0,1,.618,3.924A24.453,24.453,0,0,1,64.53,314.626Z" 									transform="translate(-63.4 -302.3)" fill="#fff" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 							<g id="Group_207" data-name="Group 207" transform="translate(5.971 9.03)"> 								<path id="Path_651" data-name="Path 651" 									d="M56.086,86.186,56,86.1a5.643,5.643,0,0,1,2.366-1.331,4.444,4.444,0,0,1,2.995.665l-.062.1a4.39,4.39,0,0,0-2.9-.653A5.565,5.565,0,0,0,56.086,86.186Z" 									transform="translate(-56.34 -84.695)" fill="#670f89" stroke="#661987" 									stroke-miterlimit="10" stroke-width="0.1" /> 							</g> 						</g> 					</g> 				</svg>',
                              height: 78,
                              width: 78
                            },
                            {
                              svg: getStatus((user.movementscore[2].score >= 70), organisationColor),
                              height: 78,
                              width: 78
                            },
                            { text: reportDescription[2], style: 'per' },
                          ]
                        }
                      ],
                      [
                        {
                          columns: [
                            {
                              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewBox="0 0 78 78"> 					<g id="Group_2450" data-name="Group 2450" transform="translate(-36 -595)"> 						<rect id="Rectangle_10" data-name="Rectangle 10" width="78" height="78" 							transform="translate(36 595)" fill="' + organisationColor + '" /> 						<g id="Group_1" data-name="Group 1" transform="translate(-247 94.192)"> 							<path id="Path_917" data-name="Path 917" 								d="M134.764,569.914a3.876,3.876,0,0,0,1.947-1.373s-1.145-8.288,5.38-8.288,6.044,5.083,6.044,6,1.465,2.724,1.465,3.457-1.373.55-1.373.55a6.71,6.71,0,0,1-.046,1.122c-.046.16-.366.229-.366.229s.252.32.183.481c-.046.161-.481.229-.481.229s-.114,1.282-.664,1.534-3.159-.526-3.732-.412a10.056,10.056,0,0,0-2.06,1.259s3.572,3.206.458,9.617a4.832,4.832,0,0,1,2.061,2.953c1.969,2.129-.343,8.059-5.633,12.158a50.86,50.86,0,0,0-1.465,8.288s1.854.756,2.266.893c.412.16,1.145-.069,1.466,0s.183.641.183.641.344-.068.458.092c.344.641-.481,1.053-.481,1.053a.738.738,0,0,1-.778.664c.046.206-.55.184-.55.184a2.134,2.134,0,0,1-.893.274c.137,1.282-1.351,1.649-1.351,1.649a14.858,14.858,0,0,1-2.633.16c-.618-.115-1.351-1.855-1.351-1.855h-5.655c-.87,0-.847-1.763-.847-1.763a7.8,7.8,0,0,1,.229-2.335,29.855,29.855,0,0,1,2.038-4.282,12.167,12.167,0,0,1-7.12,2.748c-7.556,0-9.021-7.922-9.021-9a22.608,22.608,0,0,1,3.068-10.44S123.065,572.89,134.764,569.914Z" 								transform="translate(191.114 -46.266)" fill="#fff" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_918" data-name="Path 918" 								d="M147.469,593.943c.39,7.464-1.1,9.845-1.6,11.631-.87,6.159-.046,13.12-.87,18.569" 								transform="translate(178.891 -58.916)" fill="#fff" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_919" data-name="Path 919" d="M129.525,610.009s9.662-5.495,11.952-5.838" 								transform="translate(184.696 -62.757)" fill="#fff" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_920" data-name="Path 920" 								d="M142.885,622.831c-1.168,1.649-4.671,3.778-4.671,3.778" 								transform="translate(181.434 -69.761)" fill="#fff" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 							<path id="Path_921" data-name="Path 921" 								d="M156.829,598.818s-1.672,6.309-2.646,7.754a21.444,21.444,0,0,1-.975,7.386" 								transform="translate(175.806 -60.776)" fill="#fff" stroke="#670f89" 								stroke-miterlimit="10" stroke-width="0.2" /> 						</g> 					</g> 				</svg> 		',
                              height: 78,
                              width: 78
                            },
                            {
                              svg: getStatus((user.movementscore[3].score >= 50), organisationColor),
                              height: 78,
                              width: 78
                            },
                            { text: reportDescription[3], style: 'per' },
                          ]
                        }
                      ],
                      [
                        {
                          columns: [
                            {
                              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewBox="0 0 78 78"> 					<g id="Group_2463" data-name="Group 2463" transform="translate(-36 -677)"> 						<g id="Group_2451" data-name="Group 2451"> 							<rect id="Rectangle_12" data-name="Rectangle 12" width="78" height="78" 								transform="translate(36 677)" fill="' + organisationColor + '" /> 						</g> 						<g id="Group_2460" data-name="Group 2460" transform="translate(10.377 -2.001)"> 							<g id="Group_2459" data-name="Group 2459" transform="translate(44.624 687.001)"> 								<path id="Path_952" data-name="Path 952" d="M138.214,625.209" 									transform="translate(-127.581 -566.52)" fill="#2e475b" stroke="#fff" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<path id="Path_953" data-name="Path 953" d="M153.208,608.328" 									transform="translate(-129.632 -554.706)" fill="#2e475b" stroke="#fff" 									stroke-miterlimit="10" stroke-width="0.2" /> 								<g id="Group_183" data-name="Group 183"> 									<path id="Path_605" data-name="Path 605" 										d="M4,9.832a6.622,6.622,0,0,0,2.009-4.7S5.537.5,9.645.5a3.758,3.758,0,0,1,4.041,4.191,3.146,3.146,0,0,1-.491,1.482c-.156.278.179,1.968-.045,2.2s-.893.046-.893.046-.2.648-.29,1.019c-.089.394-.915,1-1.228,1.111-.313.139-1.049-.394-1.317-.3A1.69,1.69,0,0,0,8.6,11.476c.045.417,3.237,4.492,3.885,6.622.647,2.153.246,2.755.246,2.755a27.667,27.667,0,0,1,.536,10.35c3.505,3.056,5.894,9.169,5.894,9.169A14.645,14.645,0,0,1,22.014,45c1.942,2.941,3.684,7.2,6.207,9.586.2.278.134-.347.491-.255.38.093.826.973.826.973s3.595,2.153,3.974,2.246.714-.139,1.183.255.982,1.76-.536,1.945A35.7,35.7,0,0,1,28.8,59.5s-4.264.579-4.666-.347c-.29-.672.447-1.69.447-1.69s.223-1.667.29-2.454a34.21,34.21,0,0,0-3.193-3.936,5.186,5.186,0,0,1-3.1-3.473A6.4,6.4,0,0,0,17.1,44.634l-1.317.463a7.051,7.051,0,0,1,.246,1.945c-.134.347-.893.3-.893.3l-1.674,1.991S8.93,54.66,8.506,55.053a2.79,2.79,0,0,0-.737,1.575c0,.3,1.384,1.436,1.384,1.436s2.7,1.042,3.237,1.227c.8.232.96.486,1.027.857.089.973-.045,1-.4,1.227a25.9,25.9,0,0,1-5.85.463s-3.394-.232-4.041-.3a1.126,1.126,0,0,1-.982-1.019c-.022-.394.58-1.065.58-1.065s.424-1.968.58-2.339.826-.255.826-.255S8.1,50.237,7.814,49.4c-.357.093-1.206.37-1.273.046S3.483,38.034,3.483,38.034a8.382,8.382,0,0,1-1.674-4.955A16.794,16.794,0,0,1,2.5,30.37S1.228,27.892,1.027,27.2a4.536,4.536,0,0,1,0-1.575C1,25.276.491,19.765.491,18.584A10.08,10.08,0,0,1,.937,14.3,13.955,13.955,0,0,1,4,9.832Z" 										transform="translate(-0.431 -0.5)" fill="#fff" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_606" data-name="Path 606" d="M16.4,40.8s3.3,1.786,4.577,1.563" 										transform="translate(-12.835 -31.803)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_607" data-name="Path 607" 										d="M14.164,73c.045.982-1.317,4.376-1.317,4.376s-.491,3.639-1.183,4.13c.915.982,2.5,5.269,2.5,5.269s1,1.384,2.009,2.7a7.047,7.047,0,0,1,2.121,1.273,3.936,3.936,0,0,1,.4,1.317s.737.625.737.759c0,.156-.268.447-.268.447a1.282,1.282,0,0,1,.045.558c-.134.268-.714.179-.714.179a1.1,1.1,0,0,1-.826.313,1.141,1.141,0,0,1-.915.246s-.826.223-1.049,0a17.848,17.848,0,0,1-1.518-2.679c-.067-.268-.2-.915-.2-.915L9.9,85.614" 										transform="translate(-7.786 -55.866)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_608" data-name="Path 608" 										d="M1.4,88.885a17.131,17.131,0,0,1,4.912.536" 										transform="translate(-1.184 -68.409)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_609" data-name="Path 609" 										d="M75,187.261a15.158,15.158,0,0,0,4.22-1.161" 										transform="translate(-58.351 -143.094)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<line id="Line_3" data-name="Line 3" y1="1.965" x2="7.278" 										transform="translate(7.406 46.923)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_610" data-name="Path 610" 										d="M58.3,154.9c1.474,2.768,2.411,8.573,2.411,8.573" 										transform="translate(-45.38 -118.932)" fill="none" stroke="#661987" 										stroke-miterlimit="10" stroke-width="0.2" /> 									<path id="Path_611" data-name="Path 611" 										d="M154.4,234.545v2.992l.737,3.885h13.954v-2.009l-2.009-4.912Z" 										transform="translate(-120.024 -180.061)" fill="#fff" stroke="#fff" 										stroke-miterlimit="10" stroke-width="0.2" /> 								</g> 							</g> 						</g> 					</g> 				</svg> 	',
                              height: 78,
                              width: 78
                            },
                            {

                              svg: getStatus((user.movementscore[4].score === 100), organisationColor),
                              height: 78,
                              width: 78
                            },
                            { text: reportDescription[4], style: 'per' },
                          ]
                        }
                      ]
                    ]
                  }
                },
                // {
                // 	style: {
                // 		color: '#FFFFFF',
                // 		bold: true,
                // 		fontSize: 20,
                // 		fillColor: organisationColor,
                // 		alignment: 'center'
                // 	},
                // 	layout: 'noBorders',
                // 	pageBreak: 'before',
                // 	table: {
                // 		widths: ['*'],
                // 		heights: [30],
                // 		body: [
                // 			['EXERCISES'],
                // 		]
                // 	}
                // },
                // { text: ' ' },
                // { text: ' ' },
                // ((passAll === true) || (isWeekThird === true)) ? [{ text: ' ' }] : await recommendedExercisesDetails(focusArea, week, pain, user.movementscore),
                // {
                // 	style: {
                // 		color: '#FFFFFF',
                // 		bold: true,
                // 		fontSize: 20,
                // 		fillColor: organisationColor,
                // 		alignment: 'center'
                // 	},
                // 	layout: 'noBorders',
                // 	pageBreak: 'before',
                // 	table: {
                // 		widths: ['*'],
                // 		heights: [30],
                // 		body: [
                // 			['EXERCISES'],
                // 		]
                // 	}
                // },
                // { text: ' ' },
                // ((passAll === true) || (isWeekThird === true)) ? [{ text: ' ' }] : await exerciseInstructions(focusArea, week, pain, user.movementscore)
              ],
              styles: {
                header: {
                  fontSize: 25,
                  bold: true,
                  alignment: 'center',
                  color: '#ffffff'
                },
                subheader: {
                  fontSize: 15,
                  color: organisationColor
                },
                tableExample: {
                  margin: [0, 5, 0, 15]
                },
                tableHeader: {
                  bold: true,
                  fontSize: 13,
                  fillColor: '#ff0000',
                  color: 'white'
                },
                grayCell: {
                  fillColor: '#d3d3d3',
                  color: organisationColor
                },
                quote: {
                  italics: true
                },
                small: {
                  fontSize: 7
                },
                label: {
                  fontSize: 12,
                  italics: true,
                  color: organisationColor,
                  margin: [0, 2]
                },
                value: {
                  fontSize: 10,
                  //bold: true,
                  margin: [0, 2]
                },
                date: {
                  fontSize: 10,
                  //bold: true,
                  alignment: 'right'
                },
                per: {
                  fontSize: 10,
                  italics: true,
                  margin: [10, 0]
                }
              }
            };
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', 'attachment; filename=individualreport.pdf');
            var pdfDoc = printer.createPdfKitDocument(docDefinition);
            pdfDoc.pipe(res);
            pdfDoc.end();
            // var temp123;
            // pdfDoc.pipe(temp123 = fs.createWriteStream('./moveprint.pdf'), { encoding: 'utf16' });
            // pdfDoc.end();
            // temp123.on('finish', async function () {
            //   //res.download('./sun.pdf');
            //   util.sendMail('MP Report', req.query.email, "MP Report", "Here is your Moveprint report and your program is ready to go. Check it out here or you can always find it in the app.", 'moveprint.pdf').then(data => {
            //     return res.status(200).json({
            //       status: 200,
            //       message: "Report sent successfully"
            //     })
            //   });
            // });
          }
        })
      }
    } catch (e) {
      res.status(210).json({
        status: 210,
        message: e
      })
    }
  },
  individualMovementReport: async (req, res) => {
    let organisationColor = "#642683";
    let organisationDetails = await Organisation.findOne({ _id: ObjectId(req.query.id) }, { "theme.color": 1, logo: 1, organisationName: 1, categoryDescription: 1, reportContact: 1, reportName: 1, reportLogo: 1, reportOrganisationName: 1 }).exec();
    organisationColor = organisationDetails.theme.color;
    let logo = organisationDetails.logo;
    if (organisationDetails.reportLogo != '') {
      logo = organisationDetails.reportLogo;
    }
    let focusarea_description = '';
    let focusArea = '';
    let exercisesscore = 0;
    let isMovementDone, passAll, isWeekThird;
    isMovementDone = passAll = isWeekThird = false;
    const mskDescription = {
      "HEALTH": organisationDetails.categoryDescription[0].mskDescription,
      "WELLNESS": organisationDetails.categoryDescription[1].mskDescription,
      "FITNESS": organisationDetails.categoryDescription[2].mskDescription,
      "PERFORMANCE": organisationDetails.categoryDescription[3].mskDescription,
      "BEHAVIORAL HEALTH": organisationDetails.categoryDescription[4].mskDescription
    };
    const mskFeatures = {
      "HEALTH": organisationDetails.categoryDescription[0].mskFeatures,
      "WELLNESS": organisationDetails.categoryDescription[1].mskFeatures,
      "FITNESS": organisationDetails.categoryDescription[2].mskFeatures,
      "PERFORMANCE": organisationDetails.categoryDescription[3].mskFeatures,
      "BEHAVIORAL HEALTH": organisationDetails.categoryDescription[4].mskFeatures
    };

    const mskcategoryImage = {
      "HEALTH": process.cwd() + '/images/Health.png',
      "WELLNESS": process.cwd() + '/images/Wellness.png',
      "FITNESS": process.cwd() + '/images/Fitness.png',
      "PERFORMANCE": process.cwd() + '/images/Performance.png',
      "BEHAVIORAL HEALTH": process.cwd() + '/images/Health.png'
    }
    async function mskCategoryDetails(category) {
      let d = [];
      let s = [];
      d.push([]);
      let features = mskFeatures[category].split('\n');
      s.push({ text: '\nYOUR ACTION STEPS\n\n', fontSize: 10, margin: [10, 0, 0, 0], color: '#19ADEF', bold: true });
      //s.push({ text: '' });
      //s.push({ text: '', margin: [0, 5, 0, 0] });
      for (let i = 0; i < features.length; i++) {
        s.push({ text: [{ text: (i + 1) + '. ', bold: true, fontSize: 8 }, { text: features[i] + '\n\n', fontSize: 9, color: '#707070' }] });
        s.push({ text: '', margin: [0, 20, 0, 20] });
      }
      d[0].push([
        { text: [{ text: '\nYOUR CATEGORY\n', fontSize: 12, margin: [10, 0, 0, 0], bold: true }] },
        { text: '' },
        { text: '' },
        {
          image: mskcategoryImage[category], width: 230, margin: [0, 10, 0, 0], height: 29
        },
        {
          text: [{ text: '\n' + category + '\n', fontSize: 10, bold: true },
          { text: mskDescription[category] + '\n\n', fontSize: 9, color: '#707070' }]
        }
      ]
      );
      d.push({});
      d.push({ text: s });
      return d;
    }

    async function mpDetails(movementscore, focusarea) {
      function setProgress(per, reportColor) {
        return '<svg viewBox="0 0 300.751 40.391" width="300.751" height="40.391" xmlns="http://www.w3.org/2000/svg"> <rect width="100%" height="60" rx="2"  fill="#ffffff"/><rect x="0" width="' + per + '%" height="60" rx="2" fill="' + reportColor + '" /></svg>'
      }
      let d = [];
      let s = [];
      d.push([]);
      s.push({ text: '\nYOUR MOVEPRINT FOCUS\n\n', fontSize: 10, margin: [3, 0, 0, 0], color: '#192226', bold: true });
      s.push({
        margin: [3, 2, 0, 0],
        columns: [
          {
            svg: movementscore[0].pain === 'true' ? '<svg xmlns="http://www.w3.org/2000/svg" width="42" height="48" viewBox="0 0 42 48">   <g id="Group_2898" data-name="Group 2898" transform="translate(-5471 -7803)">     <g id="Group_480" data-name="Group 480" transform="translate(5475 7806.375)">       <g id="Group_479" data-name="Group 479">         <path id="Path_617" data-name="Path 617" d="M7.25,3.024a46.111,46.111,0,0,1,5.854,0A39.206,39.206,0,0,1,25.325,6.312c2.684,1.511,4.867,6.071,4.992,6.89s.294.64.2,1.328c.613.925,2.829.183,4.208,1.149a4.622,4.622,0,0,1,1.7,4.863,3.792,3.792,0,0,1-1.413,2.6,3.747,3.747,0,0,1-2.84.78c-.876.014-2.155-.949-2.373-.949a9.343,9.343,0,0,1-1.969,0s-.253,2.168-.4,2.747.521,1.741.269,3.2-1.382,4.054-1.651,5.68-.626,3.739-.626,3.739-.269,2.495-.224,2.747a2.978,2.978,0,0,1,.135.855,9.441,9.441,0,0,1-1.043,1.453,1.047,1.047,0,0,1-.2.407.553.553,0,0,1-.6,0c-.166.236-.47,0-.47,0a.44.44,0,0,1-.6,0,.67.67,0,0,1-.808,0l-4.667-.271s-2.485-.1-2.686-.642.216-1.3.135-1.925a14.018,14.018,0,0,0-.772-3.412A31.938,31.938,0,0,1,11.7,29.912c-.034-2.2-.436-3.344-.369-4.492a7.122,7.122,0,0,0-.412-2.439,15.647,15.647,0,0,1-5.283-8.106c-3.7-5.917-3.009-9.621-1.212-11l.127-.062.8-.385Zm8.9,24.342c-.03.637.183,5.323.224,6.26a9.416,9.416,0,0,0,2.29,6.688,21.983,21.983,0,0,0,4.79,2.432l.224-.164.089-.84s-.016.136-.209,0c-.284-.225.1-.827.1-.827l.269-1.2L23.8,39.6l-.089.316c-.043.15-.426.407-.426.407s-.374.344-.649.225-.179-.969-.179-.969l1.164-2.589s.176-.585.335-1.1a22.076,22.076,0,0,0,0-3.266,16.97,16.97,0,0,1,.11-4.62c.217-.848-.081-4,0-4.661s1.078-5,1.078-5,.454-2.106.209-2.347c-.016-.057-.159-.263-.808-.115-1.078.245-5.171-1.48-5.171-1.48a35.3,35.3,0,0,0-5.82-1.626c-.217.173-.226.725-.246.991.387,1.583,2.442,6.224,2.462,7.34s.314,2.259.314,3.243.1,2.383.069,3.023Z" transform="translate(-0.577 -2.931)" fill="#ee93a1" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_618" data-name="Path 618" d="M303.815,554.3a8.5,8.5,0,0,1,.225,2.888c-.225,1.061-1.941,3.362-1.941,4.694" transform="translate(-274.862 -541.825)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_619" data-name="Path 619" d="M490.9,488.3a10.265,10.265,0,0,1,1.086,1.94,6.792,6.792,0,0,0-.474,2.482" transform="translate(-466.969 -477.309)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_620" data-name="Path 620" d="M577.1,1760.9a3.879,3.879,0,0,0-.194,1.222" transform="translate(-554.016 -1721.251)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_621" data-name="Path 621" d="M303.815,554.3a8.5,8.5,0,0,1,.225,2.888c-.225,1.061-1.941,3.362-1.941,4.694" transform="translate(-274.862 -541.825)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_622" data-name="Path 622" d="M490.9,488.3a10.265,10.265,0,0,1,1.086,1.94,6.792,6.792,0,0,0-.474,2.482" transform="translate(-466.969 -477.309)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_624" data-name="Path 624" d="M916.907,70.952c-.236.146-.308.694-.361.948a52.953,52.953,0,0,1-.4,7.345c-.109,1.112.054,2.282-.058,3.259s-.826,2.3-.93,2.931-.428,5.309-.5,6.246c-.4,4.072.917,5.768,1.517,6.593,1.115,1.232,4.518,1.843,4.518,1.843l.766.734a1.028,1.028,0,0,1-.249.378.554.554,0,0,1-.6-.07c-.194.214-.471-.054-.471-.054a.445.445,0,0,1-.6-.07,2.264,2.264,0,0,1-.808.358l-4.641-.041s-2.476-.163-2.616-.724.364-1.268.356-1.9a13.885,13.885,0,0,0-.382-3.48,31.7,31.7,0,0,1-1.037-7.807,38.25,38.25,0,0,1,.815-4.428,7.1,7.1,0,0,0-.136-2.478,28.163,28.163,0,0,1-2.34-8.433c-4.044-8.444,2.979-10.811,2.979-10.811" transform="translate(-907.494 -60.542)" fill="#ee93a1" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_623" data-name="Path 623" d="M577.1,1760.9a3.879,3.879,0,0,0-.194,1.222" transform="translate(-554.016 -1721.251)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="0.2"/>       </g>     </g>     <rect id="Rectangle_1883" data-name="Rectangle 1883" width="42" height="48" transform="translate(5471 7803)" fill="none"/>   </g> </svg>' : (focusarea === "TOE TOUCH" ? '<svg xmlns="http://www.w3.org/2000/svg" width="346.889" height="392.625" viewBox="0 0 346.889 392.625">   <g id="Group_480" data-name="Group 480" transform="translate(1.154 1.001)">     <g id="Group_479" data-name="Group 479" transform="translate(0 0)">       <path id="Path_617" data-name="Path 617" d="M44.06,3.817a444.379,444.379,0,0,1,56.08,0,377.36,377.36,0,0,1,117.076,31.3c25.717,14.388,46.621,57.809,47.821,65.616s2.813,6.091,1.936,12.646c5.871,8.813,27.1,1.742,40.312,10.942a43.873,43.873,0,0,1,16.3,46.312,36.053,36.053,0,0,1-40.737,32.169c-8.387.129-20.646-9.033-22.736-9.033a90.043,90.043,0,0,1-18.865,0s-2.426,20.646-3.871,26.156,4.994,16.581,2.581,30.453-13.239,38.608-15.82,54.093-6,35.6-6,35.6-2.581,23.756-2.142,26.156a28.207,28.207,0,0,1,1.29,8.142,89.924,89.924,0,0,1-9.988,13.833,9.948,9.948,0,0,1-1.936,3.871,5.329,5.329,0,0,1-5.794,0c-1.587,2.245-4.5,0-4.5,0a4.232,4.232,0,0,1-5.794,0,6.452,6.452,0,0,1-7.742,0L136.813,389.5s-23.808-.968-25.73-6.116,2.065-12.4,1.29-18.336a132.819,132.819,0,0,0-7.394-32.492,302.668,302.668,0,0,1-18.336-72.687c-.323-20.9-4.181-31.847-3.536-42.776a67.461,67.461,0,0,0-3.949-23.227,148.935,148.935,0,0,1-50.609-77.19C-6.871,60.323-.277,25.057,16.936,11.92l1.213-.594,7.678-3.665ZM129.3,235.62c-.284,6.065,1.755,50.686,2.142,59.615a89.333,89.333,0,0,0,21.936,63.693,211.079,211.079,0,0,0,45.886,23.162l2.142-1.561.852-8s-.155,1.29-2,0c-2.723-2.142,1.006-7.871,1.006-7.871l2.581-11.433-1.29-1.135-.852,3.007c-.413,1.432-4.078,3.871-4.078,3.871s-3.587,3.278-6.22,2.142-1.716-9.226-1.716-9.226l11.149-24.659s1.69-5.574,3.213-10.5a208.975,208.975,0,0,0,0-31.1,160.651,160.651,0,0,1,1.071-43.963c2.077-8.078-.774-38.066,0-44.389s10.323-47.6,10.323-47.6,4.349-20.052,2-22.349c-.155-.542-1.523-2.5-7.742-1.1-10.323,2.336-49.538-14.091-49.538-14.091a339.73,339.73,0,0,0-55.757-15.485c-2.078,1.652-2.168,6.9-2.361,9.433,3.7,15.072,23.395,59.267,23.588,69.9s3.007,21.511,3.007,30.879.942,22.7.658,28.788Z" transform="translate(19.686 -2.931)" fill="#2d2d2d" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_618" data-name="Path 618" d="M318.4,554.3a80.817,80.817,0,0,1,2.142,27.446c-2.142,10.078-18.44,31.95-18.44,44.608" transform="translate(-41.184 -435.448)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_619" data-name="Path 619" d="M490.9,488.3a97.57,97.57,0,0,1,10.323,18.439,64.531,64.531,0,0,0-4.5,23.588" transform="translate(-261.714 -383.604)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_620" data-name="Path 620" d="M578.753,1760.9a36.88,36.88,0,0,0-1.845,11.614" transform="translate(-357.722 -1383.301)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_621" data-name="Path 621" d="M318.4,554.3a80.817,80.817,0,0,1,2.142,27.446c-2.142,10.078-18.44,31.95-18.44,44.608" transform="translate(-41.184 -435.448)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_622" data-name="Path 622" d="M490.9,488.3a97.57,97.57,0,0,1,10.323,18.439,64.531,64.531,0,0,0-4.5,23.588" transform="translate(-261.714 -383.604)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_624" data-name="Path 624" d="M996.946,153.272c-2.245,1.394-2.93,6.607-3.432,9.033a505.393,505.393,0,0,1-3.757,69.951c-1.031,10.594.518,21.73-.554,31.034s-7.845,21.936-8.839,27.911-4.065,50.557-4.723,59.486c-3.754,38.776,8.711,54.931,14.414,62.79,10.594,11.729,42.932,17.549,42.932,17.549l7.278,6.994a9.791,9.791,0,0,1-2.363,3.6,5.251,5.251,0,0,1-5.741-.671c-1.845,2.039-4.478-.516-4.478-.516a4.218,4.218,0,0,1-5.741-.671,21.5,21.5,0,0,1-7.677,3.406l-44.106-.387s-23.524-1.548-24.854-6.891,3.459-12.078,3.381-18.065a132.514,132.514,0,0,0-3.626-33.137,302.49,302.49,0,0,1-9.857-74.352,364.889,364.889,0,0,1,7.742-42.17,67.763,67.763,0,0,0-1.29-23.6,268.662,268.662,0,0,1-22.233-80.313C880.991,83.837,947.73,61.294,947.73,61.294" transform="translate(-907.494 -54.15)" fill="#2d2d2d" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_623" data-name="Path 623" d="M578.753,1760.9a36.88,36.88,0,0,0-1.845,11.614" transform="translate(-357.722 -1383.301)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>     </g>   </g> </svg>' : '<svg xmlns="http://www.w3.org/2000/svg" width="346.889" height="392.625" viewBox="0 0 346.889 392.625">   <g id="Group_480" data-name="Group 480" transform="translate(1.154 1.001)">     <g id="Group_479" data-name="Group 479" transform="translate(0 0)">       <path id="Path_617" data-name="Path 617" d="M44.06,3.817a444.379,444.379,0,0,1,56.08,0,377.36,377.36,0,0,1,117.076,31.3c25.717,14.388,46.621,57.809,47.821,65.616s2.813,6.091,1.936,12.646c5.871,8.813,27.1,1.742,40.312,10.942a43.873,43.873,0,0,1,16.3,46.312,36.053,36.053,0,0,1-40.737,32.169c-8.387.129-20.646-9.033-22.736-9.033a90.043,90.043,0,0,1-18.865,0s-2.426,20.646-3.871,26.156,4.994,16.581,2.581,30.453-13.239,38.608-15.82,54.093-6,35.6-6,35.6-2.581,23.756-2.142,26.156a28.207,28.207,0,0,1,1.29,8.142,89.924,89.924,0,0,1-9.988,13.833,9.948,9.948,0,0,1-1.936,3.871,5.329,5.329,0,0,1-5.794,0c-1.587,2.245-4.5,0-4.5,0a4.232,4.232,0,0,1-5.794,0,6.452,6.452,0,0,1-7.742,0L136.813,389.5s-23.808-.968-25.73-6.116,2.065-12.4,1.29-18.336a132.819,132.819,0,0,0-7.394-32.492,302.668,302.668,0,0,1-18.336-72.687c-.323-20.9-4.181-31.847-3.536-42.776a67.461,67.461,0,0,0-3.949-23.227,148.935,148.935,0,0,1-50.609-77.19C-6.871,60.323-.277,25.057,16.936,11.92l1.213-.594,7.678-3.665ZM129.3,235.62c-.284,6.065,1.755,50.686,2.142,59.615a89.333,89.333,0,0,0,21.936,63.693,211.079,211.079,0,0,0,45.886,23.162l2.142-1.561.852-8s-.155,1.29-2,0c-2.723-2.142,1.006-7.871,1.006-7.871l2.581-11.433-1.29-1.135-.852,3.007c-.413,1.432-4.078,3.871-4.078,3.871s-3.587,3.278-6.22,2.142-1.716-9.226-1.716-9.226l11.149-24.659s1.69-5.574,3.213-10.5a208.975,208.975,0,0,0,0-31.1,160.651,160.651,0,0,1,1.071-43.963c2.077-8.078-.774-38.066,0-44.389s10.323-47.6,10.323-47.6,4.349-20.052,2-22.349c-.155-.542-1.523-2.5-7.742-1.1-10.323,2.336-49.538-14.091-49.538-14.091a339.73,339.73,0,0,0-55.757-15.485c-2.078,1.652-2.168,6.9-2.361,9.433,3.7,15.072,23.395,59.267,23.588,69.9s3.007,21.511,3.007,30.879.942,22.7.658,28.788Z" transform="translate(19.686 -2.931)" fill="#bababa" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_618" data-name="Path 618" d="M318.4,554.3a80.817,80.817,0,0,1,2.142,27.446c-2.142,10.078-18.44,31.95-18.44,44.608" transform="translate(-41.184 -435.448)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_619" data-name="Path 619" d="M490.9,488.3a97.57,97.57,0,0,1,10.323,18.439,64.531,64.531,0,0,0-4.5,23.588" transform="translate(-261.714 -383.604)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_620" data-name="Path 620" d="M578.753,1760.9a36.88,36.88,0,0,0-1.845,11.614" transform="translate(-357.722 -1383.301)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_621" data-name="Path 621" d="M318.4,554.3a80.817,80.817,0,0,1,2.142,27.446c-2.142,10.078-18.44,31.95-18.44,44.608" transform="translate(-41.184 -435.448)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_622" data-name="Path 622" d="M490.9,488.3a97.57,97.57,0,0,1,10.323,18.439,64.531,64.531,0,0,0-4.5,23.588" transform="translate(-261.714 -383.604)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_624" data-name="Path 624" d="M996.946,153.272c-2.245,1.394-2.93,6.607-3.432,9.033a505.393,505.393,0,0,1-3.757,69.951c-1.031,10.594.518,21.73-.554,31.034s-7.845,21.936-8.839,27.911-4.065,50.557-4.723,59.486c-3.754,38.776,8.711,54.931,14.414,62.79,10.594,11.729,42.932,17.549,42.932,17.549l7.278,6.994a9.791,9.791,0,0,1-2.363,3.6,5.251,5.251,0,0,1-5.741-.671c-1.845,2.039-4.478-.516-4.478-.516a4.218,4.218,0,0,1-5.741-.671,21.5,21.5,0,0,1-7.677,3.406l-44.106-.387s-23.524-1.548-24.854-6.891,3.459-12.078,3.381-18.065a132.514,132.514,0,0,0-3.626-33.137,302.49,302.49,0,0,1-9.857-74.352,364.889,364.889,0,0,1,7.742-42.17,67.763,67.763,0,0,0-1.29-23.6,268.662,268.662,0,0,1-22.233-80.313C880.991,83.837,947.73,61.294,947.73,61.294" transform="translate(-907.494 -54.15)" fill="#bababa" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_623" data-name="Path 623" d="M578.753,1760.9a36.88,36.88,0,0,0-1.845,11.614" transform="translate(-357.722 -1383.301)" fill="none" stroke="#fefffe" stroke-miterlimit="10" stroke-width="2"/>     </g>   </g> </svg>'), width: 40,
            height: 48
          },
          {
            text: '', width: 5
          },
          {
            svg: movementscore[1].pain === 'true' ? '<svg xmlns="http://www.w3.org/2000/svg" width="42" height="48" viewBox="0 0 42 48">   <g id="Group_2897" data-name="Group 2897" transform="translate(-5516 -7803)">     <g id="Upper_body_mobility" transform="translate(5522 7806.263)">       <path id="Path_6571" data-name="Path 6571" d="M128.056-147.347a15.216,15.216,0,0,1,5.2,3.6l2.31,2.6s-.307-1.115.134-1c-.912-6.8,4.4-7.026,4.4-7.026s5.492-.578,5,6.6c.819-.156-.178,3.1-1,3-1.363,3.513.422,4.737,1.267,4.914a10.628,10.628,0,0,1,6.848,5.426s4,7.137,4.314,9.806-.045,3.3-.467,3.6a32.7,32.7,0,0,1-7.36.819,1.252,1.252,0,0,0,.021,1c-.063-.109,1.049,5.549,1.093,5.593.083.083-16.019,0-16.1,0s.683-5.548.643-5.587c0,0-.991-8.853-2-11.7-5.136-8.8-6.4-15.142-6.538-18.411S127.645-147.355,128.056-147.347Z" transform="translate(-125.825 149.18)" fill="#ee93a1"/>       <path id="Path_6572" data-name="Path 6572" d="M192.35-49.608c.379-.047,2.268,1.867,2.268,1.867s.289.29-.089.446C193.085-47.029,192.35-49.208,192.35-49.608Z" transform="translate(-185.54 59.804)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6573" data-name="Path 6573" d="M143.7-89.13c.778,2.024,4.181,2.983,4.981,4.047" transform="translate(-141.87 95.279)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6574" data-name="Path 6574" d="M209.536-70.67s3.826,3.847,4.272,5.5a11.969,11.969,0,0,1,.445,4.29c-.2.134-.578-.156-.578-.156s.29,1.867-.021,1.982a1.106,1.106,0,0,1-.757-.156s.222,1.067-.2,1.156a1,1,0,0,1-.8-.289s-.6.281-.846-.467-.55-3.113-1.309-4.069c.178,1.645-.111,1.935-.372,1.956s-.384-.307-.384-.307a22.732,22.732,0,0,1-.751-2.849,12.488,12.488,0,0,1,.554-2.116" transform="translate(-199.792 78.709)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6575" data-name="Path 6575" d="M343.66,115a19.349,19.349,0,0,0,1.536,2.735c-.567.3-1.75,1.115-2.635.884a16.541,16.541,0,0,0,1.1-3.62Z" transform="translate(-320.371 -87.953)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6576" data-name="Path 6576" d="M247.135,102.133a25.5,25.5,0,0,1-6.371-.922,15.5,15.5,0,0,1-5.2-4.39c-.233-.413.046-.645.233-.529l1.7,1.054s-2.334-2.8-1.934-3.169,1.833,1.33,1.833,1.33-1.467-2.335-1.133-2.7a.526.526,0,0,1,.7.1s.068-.317.67-.1a7.2,7.2,0,0,1,1.918,1.835,5.71,5.71,0,0,0,1.4,1.318,5.219,5.219,0,0,1,1.486,2.168l.583.525,3.419-.041" transform="translate(-224.246 -67.946)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <line id="Line_258" data-name="Line 258" x2="2.036" y2="3.001" transform="translate(12.713 24.96)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <line id="Line_259" data-name="Line 259" x2="0.899" y2="0.967" transform="translate(13.149 27.563)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6578" data-name="Path 6578" d="M273.985,111.56s-.551.666.483,2.18a4.294,4.294,0,0,0,.7,2.889" transform="translate(-258.686 -84.864)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6579" data-name="Path 6579" d="M240.047,13.984a24.81,24.81,0,0,0-.457-4.069" transform="translate(-227.944 6.379)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6580" data-name="Path 6580" d="M250.391,8.7A29.128,29.128,0,0,0,250,5" transform="translate(-237.287 10.786)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6581" data-name="Path 6581" d="M258.934,2.393S258.766.552,258.65,0" transform="translate(-245.051 15.273)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>     </g>     <rect id="Rectangle_1884" data-name="Rectangle 1884" width="42" height="48" transform="translate(5516 7803)" fill="none"/>   </g> </svg>' : (focusarea === "UPPER BODY MOBILITY" ? '<svg id="Upper_body_mobility" xmlns="http://www.w3.org/2000/svg" width="292.971" height="387.822" viewBox="0 0 292.971 387.822">   <path id="Path_6571" data-name="Path 6571" d="M147.028-131.759a144.585,144.585,0,0,1,49.438,34.23l21.953,24.719s-2.919-10.594,1.271-9.5c-8.663-64.657,41.834-66.764,41.834-66.764s52.192-5.5,47.542,62.75c7.781-1.483-1.7,29.427-9.5,28.521-12.948,33.382,4.014,45.012,12.041,46.695a100.994,100.994,0,0,1,65.069,51.556s38.043,67.824,41,93.178-.424,31.369-4.438,34.23a310.769,310.769,0,0,1-69.942,7.78,11.9,11.9,0,0,0,.2,9.511c-.6-1.036,9.97,52.733,10.382,53.145.789.789-152.22,0-152.938,0s6.486-52.722,6.109-53.086c0,0-9.417-84.126-19.034-111.152-48.8-83.667-60.855-143.886-62.126-174.95S143.12-131.842,147.028-131.759Z" transform="translate(-125.825 149.18)" fill="#2d2d2d"/>   <path id="Path_6572" data-name="Path 6572" d="M192.35-49.6c3.6-.447,21.552,17.739,21.552,17.739s2.742,2.754-.848,4.238C199.33-25.094,192.35-45.8,192.35-49.6Z" transform="translate(-127.63 146.486)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6573" data-name="Path 6573" d="M143.7-89.13c7.392,19.234,39.726,28.344,47.33,38.455" transform="translate(-126.311 147.56)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6574" data-name="Path 6574" d="M220.594-70.67s36.36,36.56,40.6,52.215a113.733,113.733,0,0,1,4.225,40.762c-1.883,1.271-5.5-1.483-5.5-1.483s2.754,17.739-.2,18.833a10.511,10.511,0,0,1-7.192-1.483s2.107,10.135-1.9,10.982a9.546,9.546,0,0,1-7.6-2.743s-5.745,2.672-8.04-4.437S229.764,12.4,222.549,3.31c1.695,15.632-1.059,18.386-3.531,18.586s-3.649-2.919-3.649-2.919A216,216,0,0,1,208.235-8.1,118.644,118.644,0,0,1,213.5-28.2" transform="translate(-128.001 147.062)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6575" data-name="Path 6575" d="M353,115a183.861,183.861,0,0,0,14.6,25.99c-5.391,2.86-16.632,10.594-25.037,8.4A157.164,157.164,0,0,0,353,115Z" transform="translate(-131.695 142.015)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6576" data-name="Path 6576" d="M346.291,182.184a242.306,242.306,0,0,1-60.537-8.758,147.254,147.254,0,0,1-49.438-41.716c-2.213-3.92.436-6.133,2.213-5.026L254.69,136.7s-22.176-26.626-18.374-30.11,17.421,12.642,17.421,12.642S239.8,97.046,242.966,93.562a5,5,0,0,1,6.638.977s.648-3.013,6.368-.977a68.4,68.4,0,0,1,18.222,17.432,54.261,54.261,0,0,0,13.313,12.524,49.591,49.591,0,0,1,14.125,20.6l5.544,4.991,32.488-.388" transform="translate(-128.785 142.678)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <line id="Line_258" data-name="Line 258" x2="19.351" y2="28.521" transform="translate(120.808 237.182)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <line id="Line_259" data-name="Line 259" x2="8.546" y2="9.193" transform="translate(124.951 261.912)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6578" data-name="Path 6578" d="M275.233,111.56s-5.238,6.333,4.591,20.717a40.807,40.807,0,0,0,6.65,27.449" transform="translate(-129.848 142.112)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6579" data-name="Path 6579" d="M243.934,48.582A235.741,235.741,0,0,0,239.59,9.915" transform="translate(-128.917 144.918)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6580" data-name="Path 6580" d="M253.72,40.207A276.8,276.8,0,0,0,250,5" transform="translate(-129.192 145.007)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6581" data-name="Path 6581" d="M261.345,22.741S259.756,5.25,258.65,0" transform="translate(-129.426 145.134)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/> </svg>' : '<svg xmlns="http://www.w3.org/2000/svg" width="292.971" height="387.822" viewBox="0 0 292.971 387.822">   <g id="Upper_body_mobility" transform="translate(0 0)">     <path id="Path_6571" data-name="Path 6571" d="M147.028-131.759a144.585,144.585,0,0,1,49.438,34.23l21.953,24.719s-2.919-10.594,1.271-9.5c-8.663-64.657,41.834-66.764,41.834-66.764s52.192-5.5,47.542,62.75c7.781-1.483-1.7,29.427-9.5,28.521-12.948,33.382,4.014,45.012,12.041,46.695a100.994,100.994,0,0,1,65.069,51.556s38.043,67.824,41,93.178-.424,31.369-4.438,34.23a310.769,310.769,0,0,1-69.942,7.78,11.9,11.9,0,0,0,.2,9.511c-.6-1.036,9.97,52.733,10.382,53.145.789.789-152.22,0-152.938,0s6.486-52.722,6.109-53.086c0,0-9.417-84.126-19.034-111.152-48.8-83.667-60.855-143.886-62.126-174.95S143.12-131.842,147.028-131.759Z" transform="translate(-125.825 149.18)" fill="#bababa"/>     <path id="Path_6572" data-name="Path 6572" d="M192.35-49.6c3.6-.447,21.552,17.739,21.552,17.739s2.742,2.754-.848,4.238C199.33-25.094,192.35-45.8,192.35-49.6Z" transform="translate(-127.63 146.486)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6573" data-name="Path 6573" d="M143.7-89.13c7.392,19.234,39.726,28.344,47.33,38.455" transform="translate(-126.311 147.56)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6574" data-name="Path 6574" d="M220.594-70.67s36.36,36.56,40.6,52.215a113.733,113.733,0,0,1,4.225,40.762c-1.883,1.271-5.5-1.483-5.5-1.483s2.754,17.739-.2,18.833a10.511,10.511,0,0,1-7.192-1.483s2.107,10.135-1.9,10.982a9.546,9.546,0,0,1-7.6-2.743s-5.745,2.672-8.04-4.437S229.764,12.4,222.549,3.31c1.695,15.632-1.059,18.386-3.531,18.586s-3.649-2.919-3.649-2.919A216,216,0,0,1,208.235-8.1,118.644,118.644,0,0,1,213.5-28.2" transform="translate(-128.001 147.062)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6575" data-name="Path 6575" d="M353,115a183.861,183.861,0,0,0,14.6,25.99c-5.391,2.86-16.632,10.594-25.037,8.4A157.164,157.164,0,0,0,353,115Z" transform="translate(-131.695 142.015)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6576" data-name="Path 6576" d="M346.291,182.184a242.306,242.306,0,0,1-60.537-8.758,147.254,147.254,0,0,1-49.438-41.716c-2.213-3.92.436-6.133,2.213-5.026L254.69,136.7s-22.176-26.626-18.374-30.11,17.421,12.642,17.421,12.642S239.8,97.046,242.966,93.562a5,5,0,0,1,6.638.977s.648-3.013,6.368-.977a68.4,68.4,0,0,1,18.222,17.432,54.261,54.261,0,0,0,13.313,12.524,49.591,49.591,0,0,1,14.125,20.6l5.544,4.991,32.488-.388" transform="translate(-128.785 142.678)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <line id="Line_258" data-name="Line 258" x2="19.351" y2="28.521" transform="translate(120.808 237.182)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <line id="Line_259" data-name="Line 259" x2="8.546" y2="9.193" transform="translate(124.951 261.912)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6578" data-name="Path 6578" d="M275.233,111.56s-5.238,6.333,4.591,20.717a40.807,40.807,0,0,0,6.65,27.449" transform="translate(-129.848 142.112)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6579" data-name="Path 6579" d="M243.934,48.582A235.741,235.741,0,0,0,239.59,9.915" transform="translate(-128.917 144.918)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6580" data-name="Path 6580" d="M253.72,40.207A276.8,276.8,0,0,0,250,5" transform="translate(-129.192 145.007)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6581" data-name="Path 6581" d="M261.345,22.741S259.756,5.25,258.65,0" transform="translate(-129.426 145.134)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   </g> </svg>'), width: 40,
            height: 46
          },
          {
            text: '', width: 3
          },
          {
            svg: movementscore[3].pain === 'true' ? '<svg xmlns="http://www.w3.org/2000/svg" width="42" height="48" viewBox="0 0 42 48">   <g id="Group_2896" data-name="Group 2896" transform="translate(-5560 -7803)">     <g id="Group_1" data-name="Group 1" transform="translate(5567 7807.151)">       <path id="Path_917" data-name="Path 917" d="M129.652,567.7a2.989,2.989,0,0,0,1.5-1.059s-.883-6.39,4.148-6.39,4.66,3.919,4.66,4.625,1.13,2.1,1.13,2.665-1.059.424-1.059.424a5.168,5.168,0,0,1-.036.865c-.035.123-.282.176-.282.176s.194.247.141.371c-.035.124-.371.177-.371.177s-.088.989-.512,1.183-2.436-.406-2.878-.318a7.749,7.749,0,0,0-1.589.971s2.754,2.472.353,7.414a3.725,3.725,0,0,1,1.589,2.277c1.518,1.641-.265,6.213-4.343,9.374a39.218,39.218,0,0,0-1.13,6.39s1.43.583,1.747.689c.318.123.883-.053,1.13,0s.141.494.141.494.265-.053.353.071c.265.494-.371.812-.371.812a.569.569,0,0,1-.6.512c.035.159-.424.141-.424.141a1.644,1.644,0,0,1-.689.211c.106.988-1.042,1.271-1.042,1.271a11.457,11.457,0,0,1-2.03.124c-.477-.089-1.041-1.43-1.041-1.43h-4.36c-.671,0-.653-1.359-.653-1.359a6.011,6.011,0,0,1,.176-1.8,23.014,23.014,0,0,1,1.571-3.3,9.381,9.381,0,0,1-5.49,2.119c-5.825,0-6.955-6.108-6.955-6.938a17.43,17.43,0,0,1,2.366-8.05S120.632,570,129.652,567.7Z" transform="translate(-112.441 -560.252)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_918" data-name="Path 918" d="M146.9,593.943a19.006,19.006,0,0,1-1.236,8.967c-.671,4.749-.035,10.115-.671,14.316" transform="translate(-129.32 -577.72)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_919" data-name="Path 919" d="M129.525,608.672s7.449-4.236,9.215-4.5" transform="translate(-121.301 -583.024)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_920" data-name="Path 920" d="M141.815,622.831a16.025,16.025,0,0,1-3.6,2.913" transform="translate(-125.806 -592.697)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_921" data-name="Path 921" d="M156,598.818s-1.289,4.864-2.04,5.979a16.532,16.532,0,0,1-.752,5.7" transform="translate(-133.579 -580.271)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>     </g>     <rect id="Rectangle_1885" data-name="Rectangle 1885" width="42" height="48" transform="translate(5560 7803)" fill="none"/>   </g> </svg>' : (focusarea === "SQUAT" ? '<svg xmlns="http://www.w3.org/2000/svg" width="274.243" height="391.068" viewBox="0 0 274.243 391.068">   <g id="Group_2923" data-name="Group 2923" transform="translate(1 1)">     <path id="Path_917" data-name="Path 917" d="M275.988,631.037c7.884-1.511,14.262-10.063,14.262-10.063s-8.387-60.722,39.418-60.722S373.95,597.488,373.95,604.2s10.734,19.96,10.734,25.326-10.062,4.027-10.062,4.027.165,7.046-.338,8.221c-.334,1.172-2.681,1.677-2.681,1.677s1.844,2.347,1.34,3.522c-.334,1.177-3.523,1.68-3.523,1.68s-.838,9.394-4.864,11.237-23.147-3.857-27.344-3.02c-4.022.836-15.095,9.224-15.095,9.224s26.168,23.487,3.354,70.454c9.9,6.877,15.264,17.945,15.1,21.638,14.427,15.6-2.517,59.042-41.266,89.071-7.884,27.338-10.734,60.722-10.734,60.722s13.585,5.537,16.6,6.543c3.02,1.17,8.387-.5,10.739,0s1.34,4.693,1.34,4.693,2.517-.5,3.354.674c2.517,4.695-3.523,7.715-3.523,7.715s-.5,5.033-5.7,4.864c.334,1.509-4.026,1.344-4.026,1.344s-4.36,2.347-6.543,2.009c1.007,9.393-9.9,12.08-9.9,12.08s-14.761,2.013-19.29,1.176-9.9-13.59-9.9-13.59H220.3c-6.373,0-6.2-12.918-6.2-12.918a57.115,57.115,0,0,1,1.674-17.107c2.352-9.06,14.93-31.369,14.93-31.369s-23.147,20.132-52.166,20.132c-55.355,0-66.093-58.041-66.093-65.924,0-40.092,22.48-76.49,22.48-76.49S190.275,652.842,275.988,631.037Z" transform="translate(-112.441 -560.252)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_918" data-name="Path 918" d="M163.11,593.943c2.855,54.683-8.048,72.13-11.74,85.21-6.374,45.125-.334,96.119-6.374,136.04" transform="translate(3.963 -439.791)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_919" data-name="Path 919" d="M129.525,646.941s70.788-40.253,87.562-42.77" transform="translate(-51.379 -403.227)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_920" data-name="Path 920" d="M172.434,622.831c-8.556,12.081-34.22,27.678-34.22,27.678" transform="translate(-20.309 -336.489)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_921" data-name="Path 921" d="M179.738,598.818s-12.247,46.22-19.386,56.81c1.87,27.731-7.144,54.113-7.144,54.113" transform="translate(33.316 -422.575)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   </g> </svg>' : '<svg xmlns="http://www.w3.org/2000/svg" width="274.243" height="391.068" viewBox="0 0 274.243 391.068">   <g id="Group_2924" data-name="Group 2924" transform="translate(1 1)">     <path id="Path_917" data-name="Path 917" d="M275.988,631.037c7.884-1.511,14.262-10.063,14.262-10.063s-8.387-60.722,39.418-60.722S373.95,597.488,373.95,604.2s10.734,19.96,10.734,25.326-10.062,4.027-10.062,4.027.165,7.046-.338,8.221c-.334,1.172-2.681,1.677-2.681,1.677s1.844,2.347,1.34,3.522c-.334,1.177-3.523,1.68-3.523,1.68s-.838,9.394-4.864,11.237-23.147-3.857-27.344-3.02c-4.022.836-15.095,9.224-15.095,9.224s26.168,23.487,3.354,70.454c9.9,6.877,15.264,17.945,15.1,21.638,14.427,15.6-2.517,59.042-41.266,89.071-7.884,27.338-10.734,60.722-10.734,60.722s13.585,5.537,16.6,6.543c3.02,1.17,8.387-.5,10.739,0s1.34,4.693,1.34,4.693,2.517-.5,3.354.674c2.517,4.695-3.523,7.715-3.523,7.715s-.5,5.033-5.7,4.864c.334,1.509-4.026,1.344-4.026,1.344s-4.36,2.347-6.543,2.009c1.007,9.393-9.9,12.08-9.9,12.08s-14.761,2.013-19.29,1.176-9.9-13.59-9.9-13.59H220.3c-6.373,0-6.2-12.918-6.2-12.918a57.115,57.115,0,0,1,1.674-17.107c2.352-9.06,14.93-31.369,14.93-31.369s-23.147,20.132-52.166,20.132c-55.355,0-66.093-58.041-66.093-65.924,0-40.092,22.48-76.49,22.48-76.49S190.275,652.842,275.988,631.037Z" transform="translate(-112.441 -560.252)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_918" data-name="Path 918" d="M163.11,593.943c2.855,54.683-8.048,72.13-11.74,85.21-6.374,45.125-.334,96.119-6.374,136.04" transform="translate(3.963 -439.791)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_919" data-name="Path 919" d="M129.525,646.941s70.788-40.253,87.562-42.77" transform="translate(-51.379 -403.227)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_920" data-name="Path 920" d="M172.434,622.831c-8.556,12.081-34.22,27.678-34.22,27.678" transform="translate(-20.309 -336.489)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_921" data-name="Path 921" d="M179.738,598.818s-12.247,46.22-19.386,56.81c1.87,27.731-7.144,54.113-7.144,54.113" transform="translate(33.316 -422.575)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   </g> </svg>'),
            width: 40,
            height: 46
          },
          {
            text: '', width: 1
          },
          {
            svg: movementscore[2].pain === 'true' ? '<svg xmlns="http://www.w3.org/2000/svg" width="42" height="48" viewBox="0 0 42 48">   <g id="Group_2895" data-name="Group 2895" transform="translate(-5605 -7803)">     <g id="Rotation_tandem_thumbs_front_2-selected" transform="translate(5614 7808.039)">       <path id="Path_6565" data-name="Path 6565" d="M-34.458-116.6a16.285,16.285,0,0,0,3.206.565,5.1,5.1,0,0,1,3.29.675,8.23,8.23,0,0,0,3.6.185.141.141,0,0,0-.023-.131.141.141,0,0,0-.122-.054s-.8-.035-1.037-.434a4.845,4.845,0,0,1-.345-1.414s-.272-.084-.283-.283a3.762,3.762,0,0,1,.461-.943.753.753,0,0,1-.125-.367,2.32,2.32,0,0,1,1.886-2.389c2.912-.236,2.818,2.023,2.829,2.336a3.825,3.825,0,0,1-.838,2.608,1.694,1.694,0,0,0,.461,1.309,2.974,2.974,0,0,1,1.142,2.122c-.1,2.074-.545,4.075-.608,5.238a20.663,20.663,0,0,0,.649,4.672c.178,4.453-1.372,8.251-1.424,9.7s.315,1.477.272,2.766S-22.815-86.9-22.9-86.374a6.954,6.954,0,0,0,.272,1.823s.634,1.095.5,1.509-1.017.369-1.278.337l-.964-.125a3.878,3.878,0,0,1,.042,1.027c-.084.152-.375.248-1.3.248s-1.288-.145-1.341-.4.45-1.309.461-1.614a12.363,12.363,0,0,0,.084-2.326c-.108-.9-.968-2.933-1.089-4.21s.545-1.922.5-2.786c-.354-3.1-1.371-4.73-1.073-9.429.065-.991.644-3.866.7-5.909a32.52,32.52,0,0,1,.354-3.709c-.471-.079-2.247-1.462-2.681-1.509-2.116-.157-5.009-1.688-5.217-1.65s-.911.125-1.047.165c-.446.21-.589.011-.589.011s-.372,0-.367-.251c-.29-.163-.189-.354-.189-.354a.354.354,0,0,1-.22-.16.354.354,0,0,1-.041-.269c-.145-.383,0-.43,0-.43a.675.675,0,0,1,0-.4.354.354,0,0,1,.067-.265c-.152-.21.242-.236.368-.219a7.037,7.037,0,0,0,.977-.059c.084-.026.052-.236.052-.236s-.418-.838-.262-1.016c.073-.145.167.032.167.032a.118.118,0,0,1,.086-.064.118.118,0,0,1,.1.032,2.317,2.317,0,0,1,.388.649c.061.147.415.248.523.461S-34.657-116.72-34.458-116.6Z" transform="translate(37.435 121.204)" fill="#ee93a1"/>       <path id="Path_6566" data-name="Path 6566" d="M14.69,2.989s.207-.042.471-.118c.394-.149,3.425,1.367,4.558,1.5a6.8,6.8,0,0,1,1.98.487,27.6,27.6,0,0,0,3.944,1.288l.739.126" transform="translate(-12.173 3.126)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.1"/>       <path id="Path_6567" data-name="Path 6567" d="M231.572,474.557a2.657,2.657,0,0,1,0-1.7h0a2.655,2.655,0,0,1,0,1.7Z" transform="translate(-218.461 -444.205)" fill="#ee93a1"/>       <path id="Path_6568" data-name="Path 6568" d="M220.615,547.47c.1.189.138,1.288.265,2.184a2.519,2.519,0,0,0-.332,1.3,12.759,12.759,0,0,0-.118,1.288,15.458,15.458,0,0,0-.377-1.744,27.147,27.147,0,0,1,.562-3.028Z" transform="translate(-207.627 -515.215)" fill="#ee93a1"/>       <path id="Path_6569" data-name="Path 6569" d="M228.936,326.193a14.349,14.349,0,0,0-.193-5.107l-.083-2.326" transform="translate(-215.822 -297.537)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_6570" data-name="Path 6570" d="M231.78,509.951a5.986,5.986,0,0,0,.118-1.9" transform="translate(-218.792 -477.696)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>     </g>     <rect id="Rectangle_1886" data-name="Rectangle 1886" width="42" height="48" transform="translate(5605 7803)" fill="none"/>   </g> </svg>' : (focusarea === "ROTATION" ? '<svg id="Rotation_tandem_thumbs_front_2-selected" xmlns="http://www.w3.org/2000/svg" width="162.848" height="376.813" viewBox="0 0 162.848 376.813">   <path id="Path_6565" data-name="Path 6565" d="M-9.137-77.427a154.755,154.755,0,0,0,30.464,5.365,48.462,48.462,0,0,1,31.26,6.418,78.2,78.2,0,0,0,34.239,1.758,1.344,1.344,0,0,0-.219-1.247,1.343,1.343,0,0,0-1.158-.511s-7.571-.336-9.856-4.122a46.042,46.042,0,0,1-3.282-13.44s-2.587-.8-2.688-2.688A35.75,35.75,0,0,1,74-94.854a7.156,7.156,0,0,1-1.187-3.483,22.042,22.042,0,0,1,17.92-22.7c27.676-2.24,26.78,19.219,26.88,22.2a36.344,36.344,0,0,1-7.963,24.786,16.1,16.1,0,0,0,4.379,12.443,28.258,28.258,0,0,1,10.853,20.16c-.918,19.712-5.174,38.719-5.779,49.773a196.351,196.351,0,0,0,6.171,44.4c1.691,42.314-13.037,78.4-13.53,92.188s2.99,14.034,2.587,26.287-12.813,33.657-13.575,38.629a66.082,66.082,0,0,0,2.587,17.327s6.026,10.4,4.771,14.336-9.666,3.506-12.141,3.2L86.815,243.5a36.848,36.848,0,0,1,.4,9.755c-.8,1.445-3.562,2.352-12.32,2.352s-12.242-1.378-12.746-3.786,4.278-12.443,4.379-15.333a117.479,117.479,0,0,0,.8-22.1c-1.03-8.557-9.2-27.866-10.349-40.007s5.174-18.267,4.782-26.477c-3.36-29.412-13.026-44.946-10.192-89.6.616-9.419,6.115-36.736,6.608-56.146a309.019,309.019,0,0,1,3.36-35.247c-4.48-.75-21.348-13.888-25.48-14.336-20.1-1.49-47.6-16.039-49.572-15.68s-8.658,1.187-9.946,1.568c-4.234,1.994-5.6.1-5.6.1s-3.539,0-3.483-2.386c-2.755-1.546-1.792-3.36-1.792-3.36A3.36,3.36,0,0,1-36.43-68.7a3.36,3.36,0,0,1-.393-2.557c-1.378-3.64,0-4.088,0-4.088a6.417,6.417,0,0,1,0-3.786,3.361,3.361,0,0,1,.638-2.52c-1.445-1.993,2.3-2.24,3.494-2.083a66.874,66.874,0,0,0,9.285-.56c.8-.246.493-2.24.493-2.24S-26.889-94.5-25.4-96.187c.694-1.378,1.59.3,1.59.3a1.12,1.12,0,0,1,.819-.61,1.12,1.12,0,0,1,.973.307,22.017,22.017,0,0,1,3.685,6.171c.582,1.4,3.942,2.352,4.973,4.379S-11.029-78.6-9.137-77.427Z" transform="translate(37.436 121.204)" fill="#2d2d2d"/>   <path id="Path_6566" data-name="Path 6566" d="M14.69,4.079s1.971-.4,4.48-1.12c3.741-1.411,32.548,12.992,43.311,14.213A64.659,64.659,0,0,1,81.3,21.8a262.317,262.317,0,0,0,37.476,12.242l7.022,1.2" transform="translate(9.23 54.035)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6567" data-name="Path 6567" d="M232.755,488.988a25.245,25.245,0,0,1,0-16.128h0A25.231,25.231,0,0,1,232.755,488.988Z" transform="translate(-108.169 -200.567)" fill="#2d2d2d"/>   <path id="Path_6568" data-name="Path 6568" d="M225.4,547.47c.941,1.791,1.311,12.242,2.52,20.754a23.934,23.934,0,0,0-3.159,12.32,121.333,121.333,0,0,0-1.12,12.243,146.9,146.9,0,0,0-3.584-16.576A258.01,258.01,0,0,1,225.4,547.47Z" transform="translate(-101.973 -240.971)" fill="#2d2d2d"/>   <path id="Path_6569" data-name="Path 6569" d="M231.281,389.388a136.359,136.359,0,0,0-1.837-48.531l-.784-22.1" transform="translate(-106.66 -117.094)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   <path id="Path_6570" data-name="Path 6570" d="M231.78,526.116a56.879,56.879,0,0,0,1.12-18.066" transform="translate(-108.358 -219.618)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/> </svg>' : '<svg xmlns="http://www.w3.org/2000/svg" width="162.848" height="376.813" viewBox="0 0 162.848 376.813">   <g id="Rotation_tandem_thumbs_front_2-selected" transform="translate(0 0)">     <path id="Path_6565" data-name="Path 6565" d="M-9.137-77.427a154.755,154.755,0,0,0,30.464,5.365,48.462,48.462,0,0,1,31.26,6.418,78.2,78.2,0,0,0,34.239,1.758,1.344,1.344,0,0,0-.219-1.247,1.343,1.343,0,0,0-1.158-.511s-7.571-.336-9.856-4.122a46.042,46.042,0,0,1-3.282-13.44s-2.587-.8-2.688-2.688A35.75,35.75,0,0,1,74-94.854a7.156,7.156,0,0,1-1.187-3.483,22.042,22.042,0,0,1,17.92-22.7c27.676-2.24,26.78,19.219,26.88,22.2a36.344,36.344,0,0,1-7.963,24.786,16.1,16.1,0,0,0,4.379,12.443,28.258,28.258,0,0,1,10.853,20.16c-.918,19.712-5.174,38.719-5.779,49.773a196.351,196.351,0,0,0,6.171,44.4c1.691,42.314-13.037,78.4-13.53,92.188s2.99,14.034,2.587,26.287-12.813,33.657-13.575,38.629a66.082,66.082,0,0,0,2.587,17.327s6.026,10.4,4.771,14.336-9.666,3.506-12.141,3.2L86.815,243.5a36.848,36.848,0,0,1,.4,9.755c-.8,1.445-3.562,2.352-12.32,2.352s-12.242-1.378-12.746-3.786,4.278-12.443,4.379-15.333a117.479,117.479,0,0,0,.8-22.1c-1.03-8.557-9.2-27.866-10.349-40.007s5.174-18.267,4.782-26.477c-3.36-29.412-13.026-44.946-10.192-89.6.616-9.419,6.115-36.736,6.608-56.146a309.019,309.019,0,0,1,3.36-35.247c-4.48-.75-21.348-13.888-25.48-14.336-20.1-1.49-47.6-16.039-49.572-15.68s-8.658,1.187-9.946,1.568c-4.234,1.994-5.6.1-5.6.1s-3.539,0-3.483-2.386c-2.755-1.546-1.792-3.36-1.792-3.36A3.36,3.36,0,0,1-36.43-68.7a3.36,3.36,0,0,1-.393-2.557c-1.378-3.64,0-4.088,0-4.088a6.417,6.417,0,0,1,0-3.786,3.361,3.361,0,0,1,.638-2.52c-1.445-1.993,2.3-2.24,3.494-2.083a66.874,66.874,0,0,0,9.285-.56c.8-.246.493-2.24.493-2.24S-26.889-94.5-25.4-96.187c.694-1.378,1.59.3,1.59.3a1.12,1.12,0,0,1,.819-.61,1.12,1.12,0,0,1,.973.307,22.017,22.017,0,0,1,3.685,6.171c.582,1.4,3.942,2.352,4.973,4.379S-11.029-78.6-9.137-77.427Z" transform="translate(37.436 121.204)" fill="#bababa"/>     <path id="Path_6566" data-name="Path 6566" d="M14.69,4.079s1.971-.4,4.48-1.12c3.741-1.411,32.548,12.992,43.311,14.213A64.659,64.659,0,0,1,81.3,21.8a262.317,262.317,0,0,0,37.476,12.242l7.022,1.2" transform="translate(9.23 54.035)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6567" data-name="Path 6567" d="M232.755,488.988a25.245,25.245,0,0,1,0-16.128h0A25.231,25.231,0,0,1,232.755,488.988Z" transform="translate(-108.169 -200.567)" fill="#bababa"/>     <path id="Path_6568" data-name="Path 6568" d="M225.4,547.47c.941,1.791,1.311,12.242,2.52,20.754a23.934,23.934,0,0,0-3.159,12.32,121.333,121.333,0,0,0-1.12,12.243,146.9,146.9,0,0,0-3.584-16.576A258.01,258.01,0,0,1,225.4,547.47Z" transform="translate(-101.973 -240.971)" fill="#bababa"/>     <path id="Path_6569" data-name="Path 6569" d="M231.281,389.388a136.359,136.359,0,0,0-1.837-48.531l-.784-22.1" transform="translate(-106.66 -117.094)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_6570" data-name="Path 6570" d="M231.78,526.116a56.879,56.879,0,0,0,1.12-18.066" transform="translate(-108.358 -219.618)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>   </g> </svg>'), width: 38,
            height: 48
          },
          {
            text: '', width: 5
          },
          {
            svg: movementscore[4].pain === 'true' ? '<svg xmlns="http://www.w3.org/2000/svg" width="42" height="48" viewBox="0 0 42 48">   <g id="Group_2894" data-name="Group 2894" transform="translate(-5649 -7803)">     <g id="Group_1831" data-name="Group 1831" transform="translate(5654 7807.151)">       <path id="Path_952" data-name="Path 952" d="M138.214,625.209" transform="translate(-131.165 -587.755)" fill="#2e475b" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <path id="Path_953" data-name="Path 953" d="M153.208,608.328" transform="translate(-137.582 -574.233)" fill="#2e475b" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       <g id="Group_183" data-name="Group 183">         <path id="Path_605" data-name="Path 605" d="M2.794,6.471A4.144,4.144,0,0,0,4.127,3.464S3.815.5,6.538.5A2.43,2.43,0,0,1,9.216,3.182a1.963,1.963,0,0,1-.326.947c-.1.178.118,1.257-.029,1.406s-.592.029-.592.029-.134.415-.192.65-.607.636-.813.71-.7-.252-.873-.192a1.08,1.08,0,0,0-.547.784,34.873,34.873,0,0,1,2.574,4.232c.429,1.377.163,1.761.163,1.761a17.068,17.068,0,0,1,.355,6.614,17.778,17.778,0,0,1,3.906,5.859,9.332,9.332,0,0,1,1.892,2.96c1.288,1.879,2.442,4.6,4.114,6.125.134.178.089-.223.326-.163s.547.621.547.621S22.1,36.9,22.353,36.961s.473-.089.784.163.65,1.125-.355,1.243a24.529,24.529,0,0,1-3.551-.163s-2.826.37-3.092-.223c-.192-.429.291-1.08.291-1.08s.146-1.065.192-1.569a22.045,22.045,0,0,0-2.116-2.515A3.378,3.378,0,0,1,12.451,30.6a4.048,4.048,0,0,0-.976-1.892L10.6,29a4.354,4.354,0,0,1,.163,1.243c-.089.223-.592.192-.592.192L9.061,31.7s-3,3.408-3.279,3.66a1.755,1.755,0,0,0-.489,1.006c0,.192.917.917.917.917s1.79.666,2.145.784c.533.146.636.311.681.547.06.621-.029.636-.266.784a17.79,17.79,0,0,1-3.877.291s-2.248-.146-2.678-.192a.728.728,0,0,1-.65-.65c-.015-.252.384-.681.384-.681s.281-1.257.384-1.495.547-.163.547-.163,2.634-4.232,2.442-4.764c-.237.06-.8.237-.844.029s-2.027-7.3-2.027-7.3a5.246,5.246,0,0,1-1.11-3.167A10.424,10.424,0,0,1,1.8,19.584s-.84-1.576-.976-2.02a2.8,2.8,0,0,1,0-1.006c-.012-.223-.352-3.744-.352-4.5a6.228,6.228,0,0,1,.29-2.735A8.89,8.89,0,0,1,2.794,6.471Z" transform="translate(-0.429 -0.49)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_606" data-name="Path 606" d="M16.4,40.8a8.127,8.127,0,0,0,3.033,1.036" transform="translate(-14.034 -34.822)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_607" data-name="Path 607" d="M12.726,73a13.87,13.87,0,0,1-.873,2.9s-.326,2.411-.784,2.737a18.068,18.068,0,0,1,1.658,3.493s.666.917,1.332,1.79a4.669,4.669,0,0,1,1.406.844,2.609,2.609,0,0,1,.266.873s.489.415.489.5-.178.291-.178.291a.85.85,0,0,1,.029.37c-.089.178-.473.118-.473.118a.728.728,0,0,1-.547.207.757.757,0,0,1-.607.163s-.547.146-.7,0a11.826,11.826,0,0,1-1.006-1.775c-.045-.178-.134-.607-.134-.607L9.9,81.36" transform="translate(-8.495 -62.259)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_608" data-name="Path 608" d="M1.4,88.884a11.351,11.351,0,0,1,3.255.355" transform="translate(-1.253 -75.791)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_609" data-name="Path 609" d="M75,186.87a10.042,10.042,0,0,0,2.8-.77" transform="translate(-63.963 -158.624)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <line id="Line_3" data-name="Line 3" y1="1.302" x2="4.824" transform="translate(4.912 29.961)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_610" data-name="Path 610" d="M58.3,154.9a24.542,24.542,0,0,1,1.6,5.675" transform="translate(-49.734 -132.04)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>         <path id="Path_611" data-name="Path 611" d="M154.4,234.53v1.982l.488,2.574h9.248v-1.332L162.8,234.5Z" transform="translate(-131.615 -199.864)" fill="#ee93a1" stroke="#fff" stroke-miterlimit="10" stroke-width="0.2"/>       </g>     </g>     <rect id="Rectangle_1887" data-name="Rectangle 1887" width="42" height="48" transform="translate(5649 7803)" fill="none"/>   </g> </svg>' : (focusarea === "BALANCE & REACH" ? '<svg xmlns="http://www.w3.org/2000/svg" width="311.032" height="374.73" viewBox="0 0 311.032 374.73">   <g id="Group_1831" data-name="Group 1831" transform="translate(1.012 1.024)">     <path id="Path_952" data-name="Path 952" d="M138.214,625.209" transform="translate(-71.227 -269.305)" fill="#2e475b" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_953" data-name="Path 953" d="M153.208,608.328" transform="translate(-4.718 -284.339)" fill="#2e475b" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <g id="Group_183" data-name="Group 183" transform="translate(0 0)">       <path id="Path_605" data-name="Path 605" d="M22.9,57.32A39.382,39.382,0,0,0,35.569,28.751S32.61.625,58.482.625A23.093,23.093,0,0,1,83.926,26.068a18.654,18.654,0,0,1-3.1,9c-.982,1.687,1.12,11.948-.277,13.358s-5.628.277-5.628.277-1.272,3.941-1.825,6.181-5.766,6.043-7.73,6.748-6.61-2.392-8.3-1.825a10.26,10.26,0,0,0-5.2,7.453,331.373,331.373,0,0,1,24.462,40.212c4.079,13.081,1.549,16.732,1.549,16.732a162.19,162.19,0,0,1,3.374,62.849,168.938,168.938,0,0,1,37.115,55.672,88.68,88.68,0,0,1,17.977,28.126c12.238,17.852,23.2,43.725,39.092,58.2,1.272,1.687.844-2.116,3.1-1.549s5.2,5.9,5.2,5.9,22.637,13.081,25.029,13.635,4.494-.844,7.453,1.549,6.181,10.689-3.374,11.809a233.081,233.081,0,0,1-33.741-1.549s-26.854,3.512-29.385-2.116c-1.825-4.079,2.766-10.26,2.766-10.26s1.383-10.122,1.825-14.907a209.482,209.482,0,0,0-20.106-23.895,32.1,32.1,0,0,1-19.539-21.088,38.47,38.47,0,0,0-9.279-17.977l-8.3,2.766a41.374,41.374,0,0,1,1.549,11.809c-.844,2.116-5.628,1.825-5.628,1.825L82.46,297.1s-28.5,32.385-31.155,34.778a16.677,16.677,0,0,0-4.646,9.555c0,1.825,8.712,8.712,8.712,8.712s17.009,6.333,20.383,7.453c5.061,1.383,6.043,2.959,6.472,5.2.567,5.9-.277,6.043-2.531,7.453a169.046,169.046,0,0,1-36.838,2.766s-21.365-1.383-25.444-1.825a6.914,6.914,0,0,1-6.181-6.181c-.138-2.392,3.651-6.472,3.651-6.472s2.669-11.948,3.651-14.2,5.2-1.549,5.2-1.549,25.029-40.212,23.2-45.273c-2.254.567-7.592,2.254-8.02.277s-19.263-69.32-19.263-69.32A49.85,49.85,0,0,1,9.1,198.381a99.052,99.052,0,0,1,4.356-16.456s-7.979-14.976-9.279-19.193a26.564,26.564,0,0,1,0-9.555C4.068,151.061.833,117.6.833,110.434A59.184,59.184,0,0,1,3.6,84.423a84.476,84.476,0,0,1,19.3-27.1Z" transform="translate(-0.429 -0.49)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_606" data-name="Path 606" d="M16.4,40.8a77.229,77.229,0,0,0,28.818,9.846" transform="translate(6.087 16.002)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_607" data-name="Path 607" d="M36.754,73a131.8,131.8,0,0,1-8.3,27.559S25.36,123.473,21,126.57a171.688,171.688,0,0,1,15.75,33.188s6.333,8.712,12.653,17.009a44.371,44.371,0,0,1,13.358,8.02,24.794,24.794,0,0,1,2.531,8.3s4.646,3.941,4.646,4.785-1.687,2.766-1.687,2.766a8.075,8.075,0,0,1,.277,3.512c-.844,1.687-4.494,1.12-4.494,1.12a6.914,6.914,0,0,1-5.2,1.964,7.19,7.19,0,0,1-5.766,1.549s-5.2,1.383-6.61,0a112.377,112.377,0,0,1-9.555-16.87c-.429-1.687-1.272-5.766-1.272-5.766L9.9,152.443" transform="translate(3.447 29.061)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_608" data-name="Path 608" d="M1.4,88.947a107.866,107.866,0,0,1,30.934,3.374" transform="translate(0 35.474)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_609" data-name="Path 609" d="M75,193.415a95.422,95.422,0,0,0,26.578-7.316" transform="translate(29.876 74.985)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <line id="Line_3" data-name="Line 3" y1="12.376" x2="45.84" transform="translate(46.673 284.703)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_610" data-name="Path 610" d="M58.3,154.9a233.2,233.2,0,0,1,15.211,53.93" transform="translate(23.095 62.322)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_611" data-name="Path 611" d="M154.4,234.789v18.834l4.632,24.462h87.878V265.432L234.258,234.5Z" transform="translate(62.111 94.621)" fill="#2d2d2d" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     </g>   </g> </svg>' : '<svg xmlns="http://www.w3.org/2000/svg" width="311.032" height="374.73" viewBox="0 0 311.032 374.73">   <g id="Group_1831" data-name="Group 1831" transform="translate(1.012 1.024)">     <path id="Path_952" data-name="Path 952" d="M138.214,625.209" transform="translate(-71.227 -269.305)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <path id="Path_953" data-name="Path 953" d="M153.208,608.328" transform="translate(-4.718 -284.339)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     <g id="Group_183" data-name="Group 183" transform="translate(0 0)">       <path id="Path_605" data-name="Path 605" d="M22.9,57.32A39.382,39.382,0,0,0,35.569,28.751S32.61.625,58.482.625A23.093,23.093,0,0,1,83.926,26.068a18.654,18.654,0,0,1-3.1,9c-.982,1.687,1.12,11.948-.277,13.358s-5.628.277-5.628.277-1.272,3.941-1.825,6.181-5.766,6.043-7.73,6.748-6.61-2.392-8.3-1.825a10.26,10.26,0,0,0-5.2,7.453,331.373,331.373,0,0,1,24.462,40.212c4.079,13.081,1.549,16.732,1.549,16.732a162.19,162.19,0,0,1,3.374,62.849,168.938,168.938,0,0,1,37.115,55.672,88.68,88.68,0,0,1,17.977,28.126c12.238,17.852,23.2,43.725,39.092,58.2,1.272,1.687.844-2.116,3.1-1.549s5.2,5.9,5.2,5.9,22.637,13.081,25.029,13.635,4.494-.844,7.453,1.549,6.181,10.689-3.374,11.809a233.081,233.081,0,0,1-33.741-1.549s-26.854,3.512-29.385-2.116c-1.825-4.079,2.766-10.26,2.766-10.26s1.383-10.122,1.825-14.907a209.482,209.482,0,0,0-20.106-23.895,32.1,32.1,0,0,1-19.539-21.088,38.47,38.47,0,0,0-9.279-17.977l-8.3,2.766a41.374,41.374,0,0,1,1.549,11.809c-.844,2.116-5.628,1.825-5.628,1.825L82.46,297.1s-28.5,32.385-31.155,34.778a16.677,16.677,0,0,0-4.646,9.555c0,1.825,8.712,8.712,8.712,8.712s17.009,6.333,20.383,7.453c5.061,1.383,6.043,2.959,6.472,5.2.567,5.9-.277,6.043-2.531,7.453a169.046,169.046,0,0,1-36.838,2.766s-21.365-1.383-25.444-1.825a6.914,6.914,0,0,1-6.181-6.181c-.138-2.392,3.651-6.472,3.651-6.472s2.669-11.948,3.651-14.2,5.2-1.549,5.2-1.549,25.029-40.212,23.2-45.273c-2.254.567-7.592,2.254-8.02.277s-19.263-69.32-19.263-69.32A49.85,49.85,0,0,1,9.1,198.381a99.052,99.052,0,0,1,4.356-16.456s-7.979-14.976-9.279-19.193a26.564,26.564,0,0,1,0-9.555C4.068,151.061.833,117.6.833,110.434A59.184,59.184,0,0,1,3.6,84.423a84.476,84.476,0,0,1,19.3-27.1Z" transform="translate(-0.429 -0.49)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_606" data-name="Path 606" d="M16.4,40.8a77.229,77.229,0,0,0,28.818,9.846" transform="translate(6.087 16.002)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_607" data-name="Path 607" d="M36.754,73a131.8,131.8,0,0,1-8.3,27.559S25.36,123.473,21,126.57a171.688,171.688,0,0,1,15.75,33.188s6.333,8.712,12.653,17.009a44.371,44.371,0,0,1,13.358,8.02,24.794,24.794,0,0,1,2.531,8.3s4.646,3.941,4.646,4.785-1.687,2.766-1.687,2.766a8.075,8.075,0,0,1,.277,3.512c-.844,1.687-4.494,1.12-4.494,1.12a6.914,6.914,0,0,1-5.2,1.964,7.19,7.19,0,0,1-5.766,1.549s-5.2,1.383-6.61,0a112.377,112.377,0,0,1-9.555-16.87c-.429-1.687-1.272-5.766-1.272-5.766L9.9,152.443" transform="translate(3.447 29.061)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_608" data-name="Path 608" d="M1.4,88.947a107.866,107.866,0,0,1,30.934,3.374" transform="translate(0 35.474)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_609" data-name="Path 609" d="M75,193.415a95.422,95.422,0,0,0,26.578-7.316" transform="translate(29.876 74.985)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <line id="Line_3" data-name="Line 3" y1="12.376" x2="45.84" transform="translate(46.673 284.703)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_610" data-name="Path 610" d="M58.3,154.9a233.2,233.2,0,0,1,15.211,53.93" transform="translate(23.095 62.322)" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>       <path id="Path_611" data-name="Path 611" d="M154.4,234.789v18.834l4.632,24.462h87.878V265.432L234.258,234.5Z" transform="translate(62.111 94.621)" fill="#bababa" stroke="#fff" stroke-miterlimit="10" stroke-width="2"/>     </g>   </g> </svg>'),
            width: 39,
            height: 48
          },
          {
            text: '', width: 5
          }

        ]
      });
      s.push({ text: '', margin: [0, 5, 0, 0] });
      s.push({ text: focusarea_description, fontSize: 8, margin: [0, 5, 6, 2], color: '#707070' });
      s.push({ text: '\n' });
      d[0].push([
        { text: [{ text: '\nMOVEPRINT SUMMARY\n', fontSize: 10, margin: [10, 0, 0, 0], bold: true }] },
        { text: 'The chart below represents a summary of your MovePrint scores for each test.', fontSize: 9, margin: [0, 2, 0, 0], color: '#707070' },
        { text: '', margin: [0, 10, 0, 0] },
        {
          margin: [4, 0, 0, 12],
          columns: [
            { text: 'TOE TOUCH', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
            {
              svg: movementscore[0].pain === 'true' ? setProgress(100, '#EE93A1') : setProgress(parseInt(movementscore[0].score), '#414141'),
              width: 150,
              height: 19
            },
            { text: Math.round(parseFloat(movementscore[0].score)) + '%', width: 45, style: 'per' }
          ]
        },
        { text: '', height: 10 },
        {
          margin: [5, 0, 0, 12],
          columns: [
            { text: 'UB MOBILITY', fontSize: 7, color: '#707070', alignment: 'center', width: 45, bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
            {
              svg: movementscore[1].pain === 'true' ? setProgress(100, '#EE93A1') : setProgress(parseInt(movementscore[1].score), '#414141'),
              width: 150,
              height: 19
            },
            { text: Math.round(parseFloat(movementscore[1].score)) + '%', width: 45, style: 'per' }
          ]
        },
        { text: '', height: 10 },
        {
          margin: [5, 0, 0, 12],
          columns: [
            { text: 'ROTATION', fontSize: 7, color: '#707070', width: 45, bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
            {
              svg: movementscore[2].pain === 'true' ? setProgress(100, '#EE93A1') : setProgress(parseInt(movementscore[2].score), '#414141'),
              width: 150,
              height: 19
            },
            { text: Math.round(parseFloat(movementscore[2].score)) + '%', width: 45, style: 'per' }
          ]
        },
        { text: '', height: 10 },
        {
          margin: [5, 0, 0, 12],
          columns: [
            { text: 'SQUAT', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
            {
              svg: movementscore[3].pain === 'true' ? setProgress(100, '#EE93A1') : setProgress(parseInt(movementscore[3].score), '#414141'),
              width: 150,
              height: 19
            },
            { text: Math.round(parseFloat(movementscore[3].score)) + '%', width: 45, style: 'per' }
          ]
        },
        { text: '', height: 10 },
        {
          margin: [5, 0, 0, 12],
          columns: [
            { text: 'BALANCE', fontSize: 7, color: '#707070', width: 45, bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
            {
              svg: movementscore[4].pain === 'true' ? setProgress(100, '#EE93A1') : setProgress(parseInt(movementscore[4].score), '#414141'),
              width: 150,
              height: 19
            },
            { text: Math.round(parseFloat(movementscore[4].score)) + '%', width: 45, style: 'per' }
          ]
        }
      ]
      );
      d.push({});
      d.push(s);
      //d.push({ text: s });
      return d;
    }
    let category = '';
    console.log('input values ', req.query);
    //let userId = await User.findOne({ email: req.query.email }, { _id: 1, first: 1, last: 1, gender: 1, dob: 1 }).exec();
    try {
      if (req.query.mptdate === "") {

        var result = await Result.find({ user_id: ObjectId(req.query.userid), org_id: ObjectId(req.query.id) }).sort({ _id: -1 }).limit(1).exec();
        var mskdetail = await MskResult.find({ user_id: ObjectId(req.query.userid) }).sort({ mskdate: -1 }).limit(1).exec();
        if (mskdetail.length > 0) {
          category = mskdetail[0].mskCategory;
        }

      } else if (req.query.mptdate != "") {

        var result = await Result.find({ user_id: ObjectId(req.query.userid), org_id: ObjectId(req.query.id), mptdate: req.query.mptdate }).sort({ _id: -1 }).limit(1).exec();
        var mskdetail = await MskResult.find({ user_id: ObjectId(req.query.userid), org_id: ObjectId(req.query.id), }).sort({ mskdate: -1 }).limit(1).exec();
        if (mskdetail.length > 0) {
          category = mskdetail[0].mskCategory;
        }
      }
      user = result[0];
      if (user == undefined) {
        return res.status(200).json({
          status: 200,
          message: "User didn't perform Movement exercises",
          isMovementDone: isMovementDone
        })
      } else {

        let currentScore = [];
        user.movementscore.forEach(ex => {
          if (ex.groupid < 6) {
            ex.isDisplay = true; currentScore.push(ex)
          }
          else if ((ex.groupid === 6) && (ex.pain === "yes")) {
            ex.isDisplay = true; currentScore.push(ex)
          } else if ((ex.groupid === 7) && (ex.pain === "yes")) {
            ex.isDisplay = true; currentScore.push(ex)
          }
          else {
            ex.isDisplay = false; currentScore.push(ex)
          }
        })
        focusArea = await util.focusedexercise(user.movementscore);
        focusarea_description = mpDescription[focusArea.replace('TEST', '').trim()];
        //focusarea_features = mpFeatures[focusArea.replace('TEST', '').trim()];
        for (let i = 0; i < 5; i++) {
          if (user.movementscore[i].score === 100) {
            exercisesscore = exercisesscore + 1;
          }
        }
        if (!["SPINE CLEARING", "SHOULDER CLEARING"].includes(focusArea)) {
          for (var i = 0; i < 5; i++) {
            if (result[0].movementscore[i].pain === "true") {
              focusarea_description = mpDescription["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
              //focusarea_features = mpFeatures["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
              break;
            }
          }
        } else {
          focusarea_description = mpDescription["PAIN FLOW"];
        }
        if (focusArea !== undefined) {
          if (focusArea === "PAIN FLOW" || focusArea === "PAIN FLOW") {
            for (var i = 0; i < 5; i++) {
              if (user.movementscore[i].pain === "true") {
                focusArea = user.movementscore[i].title;
                break;
              }
            }
          }
          focusArea = focusArea.replace('TEST', '').trim();
        }

        // let previousScore = [];
        // user.movementscore.forEach(ex => { if (ex.groupid < 6) { isDisplay = true; previousScore.push(ex) } })
        // focusArea = util.focusedexercise(previousScore);
        // focusarea_description = description[focusArea.replace('TEST', '').trim()];
        if (exercisesscore === 5) {
          passAll = true;
          focusArea = 'CONGRATULATIONS';
          focusarea_description = mpDescription["SYMMETRY"];
        }
        let activitydate = new Date(user.mptdate);
        let now = new Date();
        now = moment(now).utc();
        activitydate = moment(activitydate).utc();
        days = now.diff(activitydate, 'days');
        if (days <= 7)
          week = '1'
        else if (days <= 14)
          week = '2'
        else if (days > 14) {
          week = '3';
          isWeekThird = true;
        }
        User.findOne({ _id: ObjectId(req.query.userid) }).exec(async (err, userdetail) => {
          if (err || !userdetail) {
            return res.status(210).json({
              status: 210,
              message: 'User not found'
            })
          } else {
            var ageDifMs = Date.now() - userdetail.dob.getTime();
            var ageDate = new Date(ageDifMs);
            let age = Math.abs(ageDate.getUTCFullYear() - 1970);
            console.log('score', user.movementscore[0].pain, user.movementscore[1].pain, user.movementscore[2].pain, user.movementscore[3].pain, user.movementscore[4].pain)
            console.log('flags', passAll, isWeekThird, focusArea, category)
            var fonts = {
              Roboto: {
                normal: 'fonts/SukhumvitSet-Medium.ttf',
                //normal: 'fonts/Roboto-Medium.ttf',
                //bold: 'fonts/Roboto-Regular.ttf',
                bold: 'fonts/SukhumvitSet-Bold.ttf',
                //italics: 'fonts/SukhumvitSet-Light.ttf',
                italics: 'fonts/HelveticaNeueItalic.ttf',
                bolditalics: 'fonts/Roboto-MediumItalic.ttf'
              }
            };
            var printer = new pdfMakePrinter(fonts);
            var docDefinition = {
              footer: [
                {
                  svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>',
                  margin: [40, 0, 0, 0]
                },
                [{
                  alignment: 'justify',
                  columns: [
                    {

                      svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                      width: 19.4,
                      height: 24.3,
                      margin: [40, 5, 0, 0],
                      alignment: 'left'
                    },
                    {

                      // text: [
                      //   {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                      width: 100,
                      height: 30,
                      margin: [45, 3, 0, 0],
                      alignment: 'left'
                    }
                  ]
                }
                ]
              ],
              content: [
                {
                  layout: 'noBorders', // optional
                  table: {
                    // headers are automatically repeated if the table spans over multiple pages
                    // you can declare how many rows should be treated as headers
                    headerRows: 4,
                    widths: ['100%'],

                    body: [
                      [
                        {
                          alignment: 'justify',
                          columns: [
                            {

                              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                              width: 19.4,
                              height: 24.3,
                              margin: [0, 5, 0, 0],
                              alignment: 'left'
                            },
                            {

                              // text: [
                              //   {
                              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                              width: 100,
                              height: 30,
                              margin: [5, 3, 0, 0],
                              alignment: 'left'
                              //text: '   moveprint',
                              // style: {
                              //   fontSize: 35,
                              //   //bold: true,
                              //   color: organisationColor,
                              //   margin: [0.5, 0, 0, 0],
                              //   alignment: 'left'
                              // }
                            },
                            {
                              text: 'Musculoskeletal Health Management',
                              width: 'auto',
                              italics: true,
                              margin: [13, 15, 13.5, 0],
                              style: {
                                fontSize: 11,
                                color: '#313133',
                                // margin: [13, 37, 13.5, 6]
                                //alignment: 'center'
                              }
                            }

                            //]
                            // }
                          ]
                        }
                      ],
                      [
                        {
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>',
                          //width:500
                        }
                      ],
                      [
                        {
                          columns:
                            [
                              [
                                {
                                  text: [
                                    { text: 'NAME: ', width: 43, fontSize: 10, style: 'label' },
                                    { text: '' + userdetail.first + " " + userdetail.last, width: 55, style: 'value', bold: false }

                                  ]
                                },
                                {

                                  text: [
                                    { text: 'SEX:', width: 43, style: 'label' },
                                    { text: '      ' + userdetail.gender, width: 119, style: 'value', bold: false }
                                  ]
                                },
                                {

                                  text: [
                                    { text: 'DOB:', width: 43, style: 'label' },
                                    { text: '    ' + moment(new Date(userdetail.dob)).format('MM/DD/YYYY'), width: 119, style: 'value' }
                                  ]
                                },
                                {

                                  text: [
                                    { text: 'DATE:', width: 43, style: 'label' },
                                    //{ text: moment(new Date()).format('DD/MM/YYYY hh:mm A'), style: 'date' }
                                    { bold: false, text: '   ' + moment(new Date()).format('MM/DD/YYYY'), width: 119, style: 'date' }
                                  ]
                                }
                              ],
                              [
                                {

                                  width: 230,
                                  text: 'FOR QUESTIONS ABOUT THIS REPORT CONTACT:', fontSize: 8,
                                  bold: true
                                },
                                {
                                  width: 230,
                                  text: organisationDetails.reportName, fontSize: 10, color: "#231F20",

                                },

                                {
                                  width: 230,
                                  text: organisationDetails.reportOrganisationName, fontSize: 10, color: "#231F20",

                                },
                                {
                                  width: 230,
                                  text: organisationDetails.reportContact, fontSize: 10, color: "#231F20",

                                }
                              ],
                              logo != "" ? [{
                                image: logo,
                                width: 123,
                                margin: [50, 10, 0, 0],
                                height: 47,
                              }
                              ] : [{
                                text: ''
                              }]
                            ]
                        }
                      ],
                      [
                        {
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>',
                          //width:500
                        }
                      ],
                      [{
                        text: ''
                      }],
                      [
                        { text: 'MUSCULOSKELETAL REPORT', margin: [15, 5, 10, 0], fontSize: 12, bold: true },
                      ],
                      [{
                        margin: [15, 0, 10, 10],
                        text: 'The musculoskeletal report gauges your overall musculoskeletal (MSK) health by combining your movement quality and specific lifestyle data points. It’s important to be aware of your current musculoskeletal health status and follow the recommendations below for improved health and wellness.\n', fontSize: 9, color: '#707070', width: 230,
                        // fillColor: '#eeff00',       
                        height: 36
                      }],
                      [{
                        text: ''
                      }],
                      category != '' ? [{
                        layout: 'noBorders',
                        margin: [15, 0, 10, 5],
                        fillColor: "#F5F5F5",
                        table: {
                          heights: ['*'],
                          widths: [230, 20, '*'],
                          body: [
                            await mskCategoryDetails(category)
                          ]
                        }
                      }
                      ] : [{
                        text: ''
                      }],
                      // ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ?
                      [{
                        text: ''
                      }],
                      [
                        { text: 'MOVEMENT QUALITY', margin: [15, 5, 10, 0], fontSize: 12, bold: true },
                      ],
                      [{
                        margin: [15, 0, 5, 10],
                        text: 'Your movement quality, how well you move, directly relates to your musculoskeletal health. Movement is the universal language of human expression and builds the foundation necessary to support your health, well-being and occupation\n', fontSize: 9, color: '#707070', width: 270,
                        // fillColor: '#eeff00',       
                        height: 36
                      }],
                      [{
                        text: ''
                      }],
                      [{
                        layout: 'noBorders',
                        margin: [15, 0, 10, 0],
                        fillColor: "#F5F5F5",
                        table: {
                          heights: ['*'],
                          widths: [230, 20, '*'],
                          body: [
                            await mpDetails(user.movementscore, focusArea)
                          ]
                        }
                      }]
                    ]
                  }
                },
              ],
              styles: {
                header: {
                  fontSize: 25,
                  bold: true,
                  alignment: 'center',
                  color: '#ffffff'
                },
                subheader: {
                  fontSize: 15,
                  color: organisationColor
                },
                tableExample: {
                  margin: [0, 5, 0, 15]
                },
                tableHeader: {
                  bold: true,
                  fontSize: 13,
                  fillColor: '#ff0000',
                  color: 'white'
                },
                grayCell: {
                  fillColor: '#d3d3d3',
                  color: organisationColor
                },
                quote: {
                  italics: true
                },
                small: {
                  fontSize: 8
                },
                label: {
                  fontSize: 10,
                  //italics: true,
                  color: '#231F20',
                  margin: [0, 2]
                },
                value: {
                  fontSize: 9,
                  color: '#231F20',
                  //bold: true,
                  margin: [0, 2]
                },
                date: {
                  fontSize: 9,
                  //bold: true,
                  alignment: 'right'
                },
                per: {
                  fontSize: 7,
                  bold: true,
                  alignment: 'left',
                  color: '#959595',
                  margin: [2, 4, 0, 3]
                }
              }
            };
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', 'attachment; filename=individualreport.pdf');
            var pdfDoc = printer.createPdfKitDocument(docDefinition);
            // pdfDoc.pipe(res);
            //pdfDoc.end();
            var temp123;
            pdfDoc.pipe(temp123 = fs.createWriteStream('./moveprint.pdf'), { encoding: 'utf16' });
            pdfDoc.end();
            temp123.on('finish', async function () {
              //res.download('./sun.pdf');
              // res.status(200).json({
              //   status: 200,
              //   message: "Report sent successfully"
              // });
              console.log(userdetail.email)
              // util.sendMail('MP Report', userdetail.email, "MP Report", "Here is your Moveprint report and your program is ready to go. Check it out here or you can always find it in the app.", 'moveprint.pdf').then(data => {
              //   // return res.status(200).json({
              //   //   status: 200,
              //   //   message: "Report sent successfully"
              //   // })
              // });
                 let html ='<html><body><header><img src="https://moveprintstorage.blob.core.windows.net/blobservices/MP_email_Header.png?sp=r&st=2021-04-01T06:36:52Z&se=2023-05-03T14:36:52Z&spr=https&sv=2020-02-10&sr=b&sig=GEZK2d%2FmcYpd%2FE5pE1mDs3%2Bnyc60xaOBL%2FrnsykcV5c%3D" alt="Girl in a jacket" width="550" height="50%"></header><br><br><p style ="font-style: Gibson book;font-size:14;color:#4D256C;">Hi, “User” <br><br>Thank you for completing Moveprint. Please see the attached PDF of your findings<br><br> If you have any questions regarding this report, please feel free to reach out to our Moveprint team at support@moveprint.com.</p><br><br><footer><img src="https://moveprintstorage.blob.core.windows.net/blobservices/MP_email_footer_1.png?sp=r&st=2021-04-01T06:37:39Z&se=2023-07-06T14:37:39Z&spr=https&sv=2020-02-10&sr=b&sig=y9bK2UX%2Bxi7UzwlY7rf36SWXbbUv1mXRk24l1oKRKjc%3D" alt="Girl in a jacket" width="550" height="50%"></footer></body></html>'
                     util.sendMail('', userdetail.email, "REPORT",html , 'moveprint.pdf').then(data => {
                // return res.status(200).json({
                //   status: 200,
                //   message: "Report sent successfully"
                // })
              });
            });
          }
        })
      }
    } catch (e) {
      res.status(210).json({
        status: 210,
        message: e
      })
    }
  },
  moveprintReport: async (req, res) => {
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    let focusarea_description = '';
    let focusarea_features = '';
    let focusArea = '';
    let exercisesscore = 0;
    let passAll = false;
    let startDate = moment(req.body.mptdate, 'YYYY-MM-DD').utc().startOf('day').format()
    let endDate = moment(req.body.mptdate, 'YYYY-MM-DD').utc().endOf('day').format();
    Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id), mptdate: { $gt: new Date(startDate), $lt: new Date(endDate) } }).sort({ _id: -1 }).limit(1).exec((err, result) => {
      if (err || !result) {
        res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        if (result.length > 0) {
          user = result[0];
          for (let i = 0; i < 5; i++) {
            if (user.movementscore[i].score === 100) {
              exercisesscore = exercisesscore + 1;
            }
          }
          focusArea = user.focusarea;
          let activitydate = new Date(user.mptdate);
          let now = new Date();
          now = moment(now).utc();
          activitydate = moment(activitydate).utc();
          days = now.diff(activitydate, 'days');
          if (days <= 7)
            week = '1'
          else if (days <= 14)
            week = '2'
          else if (days > 14) {
            week = '3';
            isWeekThird = true;
            return res.status(200).json({
              status: 200,
              isWeekThird: true,
              message: 'Please complete your moveprint tests again'
            })
          }
          let moveprintScore = [];
          for (let i = 0; i < 5; i++) {
            moveprintScore.push(user.movementscore[i]);
          }
          focusArea = util.focusedexercise(moveprintScore);
          console.log('focus area', focusArea);
          focusarea_description = mpDescription[focusArea.replace('TEST', '').trim()];
          focusarea_features = mpFeatures[focusArea.replace('TEST', '').trim()];
          if (user !== undefined) {
            for (let i = 0; i < 5; i++) {
              if (result[0].movementscore[i].pain === "true") {
                focusarea_description = mpDescription["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
                focusarea_features = mpFeatures["Pain " + result[0].movementscore[i].title.replace('TEST', '').trim()];
                break;
              }
            }
          }
          if (focusArea !== undefined) {
            if (focusArea === "PAIN FLOW" || focusArea === "PAIN FLOW") {
              for (var i = 0; i < 5; i++) {
                if (user.movementscore[i].pain === "true") {
                  focusArea = user.movementscore[i].title;
                  break;
                }
              }
            }
            focusArea = focusArea.replace('TEST', '').trim();
          }
          if (exercisesscore === 5) {
            passAll = true;
            focusarea_description = mpDescription["SYMMETRY"];
            focusarea_features = mpFeatures["SYMMETRY"];
          }
          return res.status(200).json({
            status: 200,
            message: "Moveprint report",
            movementscore: moveprintScore,
            description: focusarea_description || '',
            mpFeatures: focusarea_features || '',
            focusArea: focusArea,
            passAll: passAll,
            mptdate: user.mptdate
          })
        } else {
          return res.status(200).json({
            status: 200,
            message: "Moveprint report",
            movementscore: [],
            description: '',
            mpFeatures: '',
            focusArea: '',
            passAll: passAll,
            mptdate: ''
          })
        }

      }
    })
  },
  userData: async (req, res) => {
    let finalMskResult = [];
    let finalMptResult = [];
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    console.log('user data  input', req.body);
    // let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    //var organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { isMskEnabled: 1, _id: 0 }).exec();
    let matchCondition;
    let resultFlag = true;
    if ((req.body.id == "" && req.body.role_id === "0")) {
      matchCondition = { user_id: ObjectId(req.body.userid) };
    } else if ((req.body.id == "" && req.body.role_id === "2")) {
      resultFlag = false;
    } else if (req.body.id != "") {
      matchCondition = { org_id: { $eq: ObjectId(req.body.id) }, user_id: ObjectId(req.body.userid) };
    }
    if (resultFlag) {
      Result.aggregate([{ $match: matchCondition }, { $project: { email: 1, mptdate: 1, org_id: 1, movementscore: 1, focusarea: 1, _id: 0 } }, { $sort: { mptdate: -1 } }], function (err, result) {

        if (err || !result) {
          return res.status(210).json({
            status: 210,
            message: err
          })
        } else {
          moveprintResult = result;
          if (result.length === 0) {
            return res.status(200).json({
              status: 200,
              message: 'Individual user details',
              moveprintResult: [],
              mskResult: []
            })
          } else {
            for (let mptresult of result) {
              let tempResult = {};
              tempResult.passAll = false;
              tempResult.focusArea = mptresult.focusarea;
              if (mptresult.focusarea === "SYMMETRY") {
                tempResult.focusArea = "WELL DONE";
                tempResult.passAll = true;
              }
              tempResult.mptdate = mptresult.mptdate;
              //tempResult.displayDate = moment(mptresult.mptdate).format('MMMM Do, YYYY');
              tempResult.displayDate = moment(mptresult.mptdate).format('MM/DD/YYYY');
              tempResult.email = mptresult.email;
              tempResult.org_id = ObjectId(mptresult.org_id).valueOf().toString();
              finalMptResult.push(tempResult);
              tempResult = {};
            }
            MskResult.aggregate([{ $match: matchCondition }, { $project: { questions: 0 } }, { $sort: { mskdate: -1 } }], function (err, mskdata) {
              if (err || !mskdata) {
                return res.status(210).json({
                  status: 210,
                  message: err
                })
              } else {
                console.log(mskdata.length)
                if (mskdata.length > 0) {
                  for (let mskresult of mskdata) {
                    let tempResult = {};
                    if (mskresult.mskCategory === "") {
                      tempResult.mskCategory = "";
                    } else {
                      tempResult.mskCategory = mskresult.mskCategory;
                    }
                    tempResult.email = mskresult.email;
                    tempResult.mskdate = mskresult.mskdate;
                    //tempResult.displayDate = moment(mskresult.mskdate).format('MMMM Do, YYYY');
                    tempResult.displayDate = moment(mskresult.mskdate).format('MM/DD/YYYY');
                    tempResult.org_id = ObjectId(mskresult.org_id).valueOf().toString();
                    finalMskResult.push(tempResult);
                    tempResult = {};
                  }
                }
                return res.status(200).json({
                  status: 200,
                  message: 'Individual user details',
                  moveprintResult: finalMptResult,
                  mskResult: finalMskResult
                })
              }
            })
          }
        }
      })
    } else {
      return res.status(200).json({
        status: 200,
        message: 'Individual user details',
        moveprintResult: [],
        mskResult: []
      })
    }
  },
  individualUserMskData: async (req, res) => {
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    console.log("individual user msk input", req.body)
    //let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    var organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
    let lookupdata = await Lookup.findOne({}, { sleep: 1, smoking: 1, bmi: 1, _id: 0 }).exec();
    const mskDescription = {
      "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
      "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
      "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
    };
    const mskFeatures = {
      "HEALTH": organisationSettings.categoryDescription[0].mskFeatures,
      "WELLNESS": organisationSettings.categoryDescription[1].mskFeatures,
      "FITNESS": organisationSettings.categoryDescription[2].mskFeatures,
      "PERFORMANCE": organisationSettings.categoryDescription[3].mskFeatures,
      "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskFeatures
    };
    if (organisationSettings.isMskEnabled === false) {
      return res.status(200).json({
        status: 200,
        message: 'User MSK details',
        name: '',
        email: req.body.email,
        mskResult: {
          smokingStatus: '',
          bmi: '',
          bmiCategory: '',
          pqsiscore: 0,
          pqsiStatus: false,
          mskCategory: '',
          mskDescription: '',
          mskFeatures: '',
          smokingHeading: '',
          smokingSummary: '',
          smokingFeatures: '',
          smokingSummary2: '',
          pqsiHeading: '',
          pqsiSummary: '',
          pqsiFeatures: '',
          pqsiSummary2: '',
          mskDescription: '',
          mskFeatures: '',
          bmiFeatures: '',
          bmiDescription: '',
          mskdate: ''
        }
      })
    } else {
      MskResult.findOne({ user_id: ObjectId(req.body.userid), mskdate: new Date(req.body.mskdate), org_id: ObjectId(req.body.id) }, (err, mskresult) => {
        if (err) {
          return res.status(210).json({
            status: 210,
            message: err
          })
        } else {
          //console.log(userId)
          if (mskresult === null) {
            MskResult.aggregate([{ $match: { user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) } }, { $sort: { mskdate: -1 } }, { $limit: 1 }], (err, latestResult) => {
              if (err) {
                return res.status(210).json({
                  status: 210,
                  message: err
                })
              } else {
                User.findOne({ _id: ObjectId(req.body.userid), isDeleted: false }, {
                  first: 1, last: 1,
                  profileimage: 1
                }, (err, adminDetails) => {
                  if (err || !adminDetails) {
                    return res.status(209).json({
                      status: 209,
                      message: 'Contact your Admin'
                    })
                  }
                  else {
                    profileImage = adminDetails.profileimage;
                    return res.status(200).json({
                      status: 200,
                      message: 'User MSK details',
                      name: adminDetails.first + ' ' + adminDetails.last,
                      email: req.body.email,
                      mskResult: {
                        smokingStatus: latestResult[0].smokingStatus,
                        bmi: latestResult[0].bmi,
                        bmiCategory: latestResult[0].bmiCategory,
                        pqsiscore: latestResult[0].pqsiscore,
                        pqsiStatus: latestResult[0].pqsiStatus,
                        mskCategory: latestResult[0].mskCategory,
                        mskDescription: mskDescription[latestResult[0].mskCategory],
                        mskFeatures: mskFeatures[latestResult[0].mskCategory],
                        bmiDescription: lookupdata.bmi.summary || '',
                        bmiFeatures: lookupdata.bmi.features || '',
                        smokingHeading: lookupdata.smoking.heading,
                        smokingSummary: lookupdata.smoking.summary,
                        smokingFeatures: lookupdata.smoking.features,
                        smokingSummary2: lookupdata.smoking.summary2,
                        pqsiHeading: lookupdata.sleep.heading,
                        pqsiSummary: lookupdata.sleep.summary,
                        pqsiFeatures: lookupdata.sleep.features,
                        pqsiSummary2: lookupdata.sleep.summary2,
                        mskdate: latestResult[0].mskdate
                      }
                    })
                  }
                })
              }
            })
          } else {

            User.findOne({ _id: ObjectId(req.body.userid), isDeleted: false }, { first: 1, last: 1, profileimage: 1 }, (err, adminDetails) => {
              if (err || !adminDetails) {
                return res.status(209).json({
                  status: 209,
                  message: 'Contact your Admin'
                })
              }
              else {
                profileImage = adminDetails.profileimage;
                return res.status(200).json({
                  status: 200,
                  message: 'User MSK details',
                  name: adminDetails.first + ' ' + adminDetails.last,
                  email: req.body.email,
                  mskResult: {
                    smokingStatus: mskresult.smokingStatus,
                    bmi: mskresult.bmi,
                    bmiCategory: mskresult.bmiCategory,
                    pqsiscore: mskresult.pqsiscore,
                    pqsiStatus: mskresult.pqsiStatus,
                    mskCategory: mskresult.mskCategory,
                    mskDescription: mskDescription[mskresult.mskCategory],
                    mskFeatures: mskFeatures[mskresult.mskCategory],
                    bmiDescription: lookupdata.bmi.summary || '',
                    bmiFeatures: lookupdata.bmi.features || '',
                    smokingHeading: lookupdata.smoking.heading,
                    smokingSummary: lookupdata.smoking.summary,
                    smokingFeatures: lookupdata.smoking.features,
                    smokingSummary2: lookupdata.smoking.summary2,
                    pqsiHeading: lookupdata.sleep.heading,
                    pqsiSummary: lookupdata.sleep.summary,
                    pqsiFeatures: lookupdata.sleep.features,
                    pqsiSummary2: lookupdata.sleep.summary2,
                    mskdate: mskresult.mskdate
                  }
                })
              }
            })
          }
        }
      })
    }

  },
  individualUserMoveprintData: async (req, res) => {
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    console.log("individual user mp input", req.body)
    //let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    Result.findOne({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id), mptdate: new Date(req.body.mptdate) }, { _id: 0, focusarea: 1, mptdate: 1, groups: 1 }, async (err, result) => {
      if (err) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        if (result === null) {
          Result.aggregate([{ $match: { user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) } }, { $sort: { mptdate: -1 } }, { $limit: 1 }], (err, latestResult) => {
            if (err) {
              return res.status(210).json({
                status: 210,
                message: err
              })
            } else {
              if (latestResult.length === 0) {
                return res.status(209).json({
                  status: 209,
                  message: "User didn't perform moveprint test"
                })
              } else {
                let finalScore = [];
                for (let i = 0; i < 5; i++) {
                  finalScore.push(latestResult[0].groups[i]);
                }
                User.findOne({ _id: ObjectId(req.body.userid), isDeleted: false }, { first: 1, last: 1, profileimage: 1 }, (err, adminDetails) => {
                  if (err || !adminDetails) {
                    return res.status(209).json({
                      status: 209,
                      message: 'Contact your Admin'
                    })
                  }
                  else {
                    profileImage = adminDetails.profileimage;
                    return res.status(200).json({
                      status: 200,
                      message: 'User Moveprint details',
                      name: adminDetails.first + ' ' + adminDetails.last,
                      email: req.body.email,
                      moveprintResult: finalScore
                    })
                  }
                })
              }
            }
          })
        } else {
          let finalScore = [];
          for (let i = 0; i < 5; i++) {
            finalScore.push(result.groups[i]);
          }

          User.findOne({ _id: ObjectId(req.body.userid), isDeleted: false }, { first: 1, last: 1, profileimage: 1 }, (err, adminDetails) => {
            if (err) {
              return res.status(209).json({
                status: 209,
                message: 'Contact your Admin'
              })
            }
            else {
              profileImage = adminDetails.profileimage;
              return res.status(200).json({
                status: 200,
                message: 'User Moveprint details',
                name: adminDetails.first + ' ' + adminDetails.last,
                email: req.body.email,
                moveprintResult: finalScore
              })
            }
          })
        }
      }
    })
  },
  // oldgroupReport: async (req, res) => {
  //   if (!["0", "3", "2"].includes(req.body.role_id)) {
  //     return res.status(210).json({
  //       status: 210,
  //       message: 'You are not Authorized'
  //     })
  //   }
  //   console.log('group report', req.body)
  //   var mskDescription = {
  //     "HEALTH": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future.",
  //     "WELLNESS": "Individuals in this category have certain areas of their overall health and wellness that will be best served by seeking advice from a fitness or health professional. They should focus on completing their daily MovePrint exercises and recommendations, while avoiding avoid certain higher levels of activity until they progress out of this category.",
  //     "FITNESS": "Individuals need to complete their daily Moveprint exercises and follow their next steps suggestions. If they are already actively pursuing fitness, then it is recommended they continue and re-check Moveprint to keep them on track.",
  //     "PERFORMANCE": "Individuals in this category can optimize their performance and continue what they are doing. Use Moveprint to actively check movement quality to gauge how current activity, lifestyle or job requirements affect movement.",
  //     "BEHAVIORAL HEALTH": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
  //   };
  //   if (req.body.id != '') {
  //     var organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
  //   }

  //   const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
  //   let { type, startDate, endDate } = req.body;
  //   var group = '';
  //   var g = [];
  //   if (req.body.group != undefined) {
  //     if (req.body.group.length === 0) {
  //       group = 'All';
  //     } else if (req.body.group.length > 0 && (req.body.group[0] === "-1" || req.body.group[0] === -1)) {
  //       group = 'All';
  //     } else {
  //       g = req.body.group;
  //     }
  //   }

  //   if (type != "") {
  //     if (type === "7days") {
  //       console.log('in 7days');
  //       startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "30days") {
  //       console.log('in 1 month');
  //       startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "2months") {
  //       console.log('in 2 months');
  //       startDate = moment().utc().subtract(60, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "3months") {
  //       console.log('in 3 months');
  //       startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "1year") {
  //       console.log('in 1 year');
  //       startDate = moment().utc().subtract(1, 'year').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "today") {
  //       console.log('in today');
  //       endDate = moment().utc().format('MM/DD/YYYY');
  //       startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
  //     }
  //   } else if (req.body.startDate != "") {
  //     startDate = moment(req.body.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
  //     endDate = moment(req.body.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
  //     console.log("modified input format", startDate, endDate)
  //   }

  //   let referralCode = '';
  //   let totalMSKCount = 0;
  //   let totalMoveprintCount = 0;
  //   let mskData = [];
  //   let mptData = [];
  //   let finalMskData = [];
  //   let name = '';
  //   let profileImage = '';
  //   let proCode = '';
  //   User.findOne({ _id: ObjectId(req.body.userid) }, { first: 1, last: 1, profileImage: 1, _id: 1, deviceId: 1 }, async (err, adminDetails) => {
  //     if (err || !adminDetails) {
  //       return res.status(209).json({
  //         status: 209,
  //         message: 'Contact your Admin'
  //       })
  //     }
  //     else {
  //       name = adminDetails.first + ' ' + adminDetails.last;
  //       profileImage = adminDetails.profileimage;
  //       if (req.body.id != '') {
  //         var referralDetails = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { code: 1, proCode: 1 }).exec();
  //         referralCode = referralDetails.code;
  //         proCode = referralDetails.proCode;
  //       }
  //       if (type === 'today') {
  //         startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //         endDate = moment().utc().format();

  //       } else if (startDate != "") {
  //         console.log(startDate, endDate)
  //         startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //         endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
  //         // let convertdates = await util.convertDates(startDate, endDate);
  //         // startDate = convertdates.startDate;
  //         // endDate = convertdates.endDate;

  //       }
  //       //  else {
  //       //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //       //     endDate = moment().utc().format();
  //       // }
  //       console.log('final dates', startDate, endDate);
  //       var notificationCount = 0;
  //       notificationCount = await Notification.find({
  //         // $and: [{
  //         $or: [{ user_id: req.body.userid, notification_type: "i", "message.readStatus": false }
  //           //, { notification_type: "i", "message.result_type": { "$in": ["MPRESULT","MSKRESULT","RECOMMENDEDRESULT"] }, user_ids: { $elemMatch: { user_id: ObjectId(req.userid), readStatus: false } } }
  //           //,{ notification_type: "i" , user_ids: { $elemMatch: { user_id: ObjectId(req.body.userid), isDeleted: false, readStatus: false } } }
  //         ]
  //         // } ,
  //         // { $or: [{ user_id: userdetail._id, deviceId: userdetail.deviceId }, { user_ids: { $elemMatch: { user_id: ObjectId(userdetail._id) } } }] }
  //         // ]
  //       }).countDocuments().exec();
  //       console.log("unread count", notificationCount)
  //       var result = [];
  //       var mskData = [];
  //       var MpUsers = [];
  //       var mptData = [];
  //       if (req.body.id != '' && organisationSettings.isMskEnabled === true) {
  //         if (group === "All") {

  //           if (req.body.startDate != "") {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               //var result = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": { $eq:
  //               result = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //             else {
  //               result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //           } else {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               //var result = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": { $eq:
  //               result = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $exists: true }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //             else {
  //               result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $exists: true }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //           }
  //         } else {
  //           if (req.body.startDate != "") {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               //var result = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": { $eq:
  //               result = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //             else {
  //               result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //           } else {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               // result = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": { $eq:
  //               result = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $exists: true }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //             else {
  //               result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $exists: true }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //             }
  //           }

  //         }
  //       } else if (req.body.id === '') {
  //         if (req.body.startDate != "") {

  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  //         } else {
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

  //         }

  //       }
  //       totalMSKCount = await result.length;
  //       console.log('msk', totalMSKCount)

  //       if (result.length > 0) {
  //         if (req.body.id != '' && organisationSettings.isMskEnabled === true) {
  //           if (group === "All") {

  //             if (req.body.startDate != "") {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 // mskData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mskData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

  //               } else {
  //                 mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               }
  //             } else {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 // mskData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mskData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               } else {
  //                 mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               }
  //             }
  //           } else {
  //             if (req.body.startDate != "") {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 // mskData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mskData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               } else {
  //                 mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               }
  //             } else {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 // mskData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mskData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               } else {
  //                 mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //               }
  //             }
  //           }
  //         } else if (req.body.id == '') {
  //           if (req.body.startDate != "") {
  //             mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //           } else {
  //             mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

  //           }
  //         }
  //       }
  //       if (mskData.length > 0) {
  //         let categoryExists = false;
  //         for (let i = 0; i < mskCategories.length; i++) {
  //           for (var categoryData of mskData) {
  //             if (mskCategories[i] === categoryData.category) {
  //               categoryData.description = mskDescription[categoryData.category];
  //               categoryExists = true;
  //               break;
  //             }
  //           }
  //           if (!categoryExists) {
  //             mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0, "description": mskDescription[mskCategories[i]] })
  //           }
  //           categoryExists = false;
  //         }
  //         finalMskData[0] = {};
  //         finalMskData[0].count = 0;
  //         finalMskData[0].percentage = 0;
  //         for (let j = 0; j <= 4; j++) {
  //           if (mskData[j].category === "HEALTH") {
  //             finalMskData[0].category = "HEALTH";
  //             finalMskData[0].count = finalMskData[0].count + mskData[j].count;
  //             finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
  //             finalMskData[0].description = mskDescription["HEALTH"];
  //           } else if (mskData[j].category === "PERFORMANCE") {
  //             finalMskData[3] = mskData[j];
  //             finalMskData[3].percentage = Math.round(mskData[j].percentage);
  //           } else if (mskData[j].category === "WELLNESS") {
  //             finalMskData[1] = mskData[j];
  //             finalMskData[1].percentage = Math.round(mskData[j].percentage);
  //           } else if (mskData[j].category === "FITNESS") {
  //             finalMskData[2] = mskData[j];
  //             finalMskData[2].percentage = Math.round(mskData[j].percentage);
  //           } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
  //             finalMskData[0].count = finalMskData[0].count + mskData[j].count;
  //             finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
  //             finalMskData[0].description = mskDescription["HEALTH"];
  //             finalMskData[0].category = "HEALTH";
  //           }
  //         }
  //       } else if (req.body.proReferral != undefined) {

  //         finalMskData = [
  //           {
  //             "count": 0,
  //             "percentage": 0,
  //             "category": "HEALTH",
  //             "description": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
  //           },
  //           {
  //             "count": 0,
  //             "category": "WELLNESS",
  //             "percentage": 0,
  //             "description": "Individuals in this category have certain areas of their overall health and wellness that will be best served by seeking advice from a fitness or health professional. They should focus on completing their daily MovePrint exercises and recommendations, while avoiding avoid certain higher levels of activity until they progress out of this category."
  //           },
  //           {
  //             "count": 0,
  //             "category": "FITNESS",
  //             "percentage": 0,
  //             "description": "Individuals need to complete their daily Moveprint exercises and follow their next steps suggestions. If they are already actively pursuing fitness, then it is recommended they continue and re-check Moveprint to keep them on track."
  //           },
  //           {
  //             "count": 0,
  //             "category": "PERFORMANCE",
  //             "percentage": 0,
  //             "description": "Individuals in this category can optimize their performance and continue what they are doing. Use Moveprint to actively check movement quality to gauge how current activity, lifestyle or job requirements affect movement."
  //           }
  //         ]
  //       }
  //       console.log('msk data', mskData, finalMskData)
  //       if (req.body.id != '') {
  //         if (group === "All") {

  //           if (req.body.startDate != "") {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               // MpUsers = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //               MpUsers = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();

  //             } else {
  //               console.log('wthout proreferral');
  //               MpUsers = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //             }
  //           } else {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               // MpUsers = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //               MpUsers = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //             } else {
  //               MpUsers = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //             }
  //           }
  //         } else {
  //           if (req.body.startDate != "") {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               // MpUsers = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //               MpUsers = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //             } else {
  //               MpUsers = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //             }
  //           } else {
  //             if (req.body.proReferral != undefined) {
  //               // pro_id input required
  //               // MpUsers = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //               MpUsers = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //             } else {
  //               MpUsers = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id" }, focus: { "$first": "$result.focusarea" } }]).exec();
  //             }
  //           }
  //         }
  //       } else {
  //         if (req.body.startDate != "") {
  //           MpUsers = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //         } else {
  //           MpUsers = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }]).exec();
  //         }

  //       }
  //       if (Array.isArray(MpUsers))
  //         totalMoveprintCount = MpUsers.length;
  //       console.log('mp', totalMoveprintCount);
  //       if (MpUsers.length === 0) {
  //         return res.status(200).json({
  //           status: 200,
  //           message: 'No users were present for this group',
  //           name: name,
  //           mskdata: [
  //             {
  //               "count": 0,
  //               "percentage": 0,
  //               "category": "HEALTH",
  //               "description": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
  //             },
  //             {
  //               "count": 0,
  //               "category": "WELLNESS",
  //               "percentage": 0,
  //               "description": "Individuals in this category have certain areas of their overall health and wellness that will be best served by seeking advice from a fitness or health professional. They should focus on completing their daily MovePrint exercises and recommendations, while avoiding avoid certain higher levels of activity until they progress out of this category."
  //             },
  //             {
  //               "count": 0,
  //               "category": "FITNESS",
  //               "percentage": 0,
  //               "description": "Individuals need to complete their daily Moveprint exercises and follow their next steps suggestions. If they are already actively pursuing fitness, then it is recommended they continue and re-check Moveprint to keep them on track."
  //             },
  //             {
  //               "count": 0,
  //               "category": "PERFORMANCE",
  //               "percentage": 0,
  //               "description": "Individuals in this category can optimize their performance and continue what they are doing. Use Moveprint to actively check movement quality to gauge how current activity, lifestyle or job requirements affect movement."
  //             }
  //           ],
  //           moveprintdata: [
  //             {
  //               "score": 0,
  //               "title": "TOE TOUCH TEST",
  //               "percentage": 0
  //             },
  //             {
  //               "score": 0,
  //               "title": "UPPER BODY MOBILITY TEST",
  //               "percentage": 0
  //             },
  //             {
  //               "score": 0,
  //               "title": "ROTATION TEST",
  //               "percentage": 0
  //             },
  //             {
  //               "score": 0,
  //               "title": "SQUAT TEST",
  //               "percentage": 0
  //             },
  //             {
  //               "score": 0,
  //               "title": "BALANCE & REACH TEST",
  //               "percentage": 0
  //             }
  //           ],
  //           profileimage: profileImage,
  //           notificationCount: notificationCount,
  //           referralCode: referralCode,
  //           proCode: proCode
  //         })
  //       } else {
  //         if (req.body.id != '') {
  //           if (group === "All") {

  //             if (req.body.startDate != "") {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 //  mptData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mptData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               } else {
  //                 console.log('with out proreferral')
  //                 mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               }

  //             } else {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 //  mptData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mptData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               } else {
  //                 mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               }
  //             }
  //           } else {
  //             if (req.body.startDate != "") {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 //  mptData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mptData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               } else {
  //                 mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               }
  //             } else {
  //               if (req.body.proReferral != undefined) {
  //                 // pro_id input required
  //                 //  mptData = await User.aggregate([{ $match: { "roles.pro_id": req.body.pro_id, "roles.org_id": {
  //                 mptData = await User.aggregate([{ $match: { "roles.referralCode": req.body.proReferral, "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               } else {
  //                 mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //               }
  //             }
  //           }
  //         } else {
  //           if (req.body.startDate != "") {
  //             mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();


  //           } else {
  //             mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true, $ne: null } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" } } }, { $project: { _id: 1, movementscore: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id".replace('TEST', '').trim(), "percentage": { "$multiply": [{ "$divide": ["$score", (100 * totalMoveprintCount)] }, 100] } } }]).exec();
  //           }
  //         }
  //       }
  //       mptData = mptData.splice(0, 5);
  //       // let finalScore = [];
  //       // if (mptData.length > 0)
  //       //   for (let i = 0; i < 5; i++) {
  //       //     mptData[i].title = mptData[i].title.replace('TEST', '').trim();
  //       //     finalScore.push(mptData[i]);
  //       //   }
  //       return res.status(200).json({
  //         status: 200,
  //         message: "Group results",
  //         mskdata: finalMskData,
  //         moveprintdata: mptData,
  //         name: name,
  //         notificationCount: notificationCount,
  //         profileimage: profileImage,
  //         referralCode: referralCode,
  //         proCode: proCode
  //       });
  //     }
  //   });
  // },
  groupReport: async (req, res) => {
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    organisationIds = [];
    if (req.body.role_id === "3") {
      req.body.prolist = [req.body.userid];
    }
    if (req.body.adminSuborg != undefined && req.body.adminSuborg == true) {
      organisationIds.push(req.body.id[0]);
      await organisationIdList(req.body.id[0]);
    } else {
      organisationIds = req.body.id;
    }
    console.log('all org list', organisationIds);
    const combinedOutput = {
      "id": "",
      "organisationName": "",
      "parentOrgId": "",
      "mskdata": [
        {
          "count": 0,
          "percentage": 0,
          "category": "HEALTH",
          "description": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
        },
        {
          "count": 0,
          "category": "WELLNESS",
          "percentage": 0,
          "description": "Individuals in this category have certain areas of their overall health and wellness that will be best served by seeking advice from a fitness or health professional. They should focus on completing their daily MovePrint exercises and recommendations, while avoiding avoid certain higher levels of activity until they progress out of this category."
        },
        {
          "count": 0,
          "category": "FITNESS",
          "percentage": 0,
          "description": "Individuals need to complete their daily Moveprint exercises and follow their next steps suggestions. If they are already actively pursuing fitness, then it is recommended they continue and re-check Moveprint to keep them on track."
        },
        {
          "count": 0,
          "category": "PERFORMANCE",
          "percentage": 0,
          "description": "Individuals in this category can optimize their performance and continue what they are doing. Use Moveprint to actively check movement quality to gauge how current activity, lifestyle or job requirements affect movement."

        }
      ],
      "mptdata": [
        {
          "score": 0,
          "title": "TOE TOUCH TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "UPPER BODY MOBILITY TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "ROTATION TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "SQUAT TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "BALANCE & REACH TEST",
          "percentage": 0
        }
      ]
    };
    let inputOrgLength = false;
    if (organisationIds.length > 0) {
      inputOrgLength = true;
      var organisationSettings = await Organisation.findOne({ _id: ObjectId(organisationIds[0]) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
      var mskDescription = {
        "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
        "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
        "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
        "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
        "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
      };
    }
    const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
    let { type, startDate, endDate } = req.body;
    if (type === undefined && startDate == undefined && endDate == undefined) {
      type = "7days";
    } else if ((type === undefined || type === "undefined") && (startDate != undefined || startDate != "")) {
      type = "";
    }
    console.log('final dates', startDate, endDate, req.body);
    var group = '';
    let g = [];
    var finalMskData = [];
    var finalJson = [];
    var mskData = [];
    var result = [];
    let referralCode = '';
    let totalMSKCount = 0;
    let totalMoveprintCount = 0;
    let name = '';
    let profileImage = '';
    let proCode = '';
    var notificationCount = 0;
    notificationCount = await Notification.find({
      // $and: [{
      $or: [{ user_id: req.body.userid, notification_type: "i", "message.readStatus": false }
        //, { notification_type: "i", "message.result_type": { "$in": ["MPRESULT","MSKRESULT","RECOMMENDEDRESULT"] }, user_ids: { $elemMatch: { user_id: ObjectId(req.userid), readStatus: false } } }
        //,{ notification_type: "i" , user_ids: { $elemMatch: { user_id: ObjectId(req.body.userid), isDeleted: false, readStatus: false } } }
      ]
      // } ,
      // { $or: [{ user_id: userdetail._id, deviceId: userdetail.deviceId }, { user_ids: { $elemMatch: { user_id: ObjectId(userdetail._id) } } }] }
      // ]
    }).countDocuments().exec();
    console.log("unread count", notificationCount)
    User.findOne({ _id: ObjectId(req.body.userid) }, { first: 1, last: 1, profileImage: 1, _id: 1, deviceId: 1 }, async (err, adminDetails) => {
      if (err || !adminDetails) {
        return res.status(209).json({
          status: 209,
          message: 'Contact your Admin'
        })
      }
      else {
        name = adminDetails.first + ' ' + adminDetails.last;
        profileImage = adminDetails.profileimage;
        if (req.body.id.length > 0 && req.body.id[0] != '') {
          var referralDetails = await Organisation.findOne({ _id: req.body.id[0] }, { code: 1, proCode: 1 }).exec();
          referralCode = referralDetails.code;
          proCode = referralDetails.proCode;
        }
      }
    })
    if (req.body.group != undefined) {
      if (req.body.group[0] === '0' || req.body.group.length === 0 || req.body.group[0] === '-1' || req.body.group[0] === -1) {
        console.log('ent')
        group = 'All';
      } else {
        for (let i = 0; i < req.body.group.length; i++) {
          g.push(parseInt(req.body.group[i]))
        }
      }
    }
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      } else if (type === "1year") {
        console.log('in 1year');
        startDate = moment().utc().subtract(1, 'year').startOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().endOf('day').format('MM/DD/YYYY');
      }
    } else if (req.body.startDate != "") {
      startDate = moment(req.body.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      endDate = moment(req.body.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      console.log('before', startDate, endDate)
    }
    console.log("modified input format", startDate, endDate)
    if (type === 'today') {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();

    } else if (startDate != "") {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();

    }

    console.log("final", startDate, endDate, organisationIds[0]);

    try {
      let organisationName = "";
      let organisationColor = "#642683";
      let total = 0;
      let finalMskCount = 0;
      let finalMpCount = 0;
      if (organisationIds.length === 0) {
        organisationIds[0] = "";
      }
      console.log("grp", group, 'kk', req.body.group, 'ppp', g, organisationIds.length);
      console.log('total count', finalMpCount, finalMskCount);
      for (let i = 0; i < organisationIds.length; i++) {
        finalMskData = [];
        mskData = [];
        total = total + 1;
        if (organisationIds[0] != "") {
          var parent_org = await Organisation.findOne({ _id: ObjectId(organisationIds[i]) }, { parentOrgId: 1, organisationName: 1 }).exec();
        } else {
          var parent_org = {};
        }
        if (organisationIds[i] != '' && organisationSettings.isMskEnabled === true) {
          if (group === "All") {

            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
                console.log('sssss', result)
              }
            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              else
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
            }
          } else {

            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              else
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(organisationIds[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              else
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(organisationIds[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
            }
          }
        } else if (organisationIds[i] === '') {

          if (req.body.startDate != "") {

            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();


          } else {
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

          }
        }
        if (Array.isArray(result))
          totalMSKCount = await result.length;
        console.log('msk', totalMSKCount)
        if (result.length > 0) {
          if (organisationIds[i] != '' && organisationSettings.isMskEnabled === true) {
            if (group === "All") {

              if (req.body.startDate != "") {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              }
            } else {

              if (req.body.startDate != "") {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              }
            }
          } else if (organisationIds[i] === '') {

            if (req.body.startDate != "") {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();


            } else {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

            }

          }
        }
        if (mskData.length > 0) {
          let categoryExists = false;
          for (let i = 0; i < mskCategories.length; i++) {
            for (var categoryData of mskData) {
              if (mskCategories[i] === categoryData.category) {
                //categoryData.description = mskDescription[categoryData.category];
                categoryExists = true;
                break;
              }
            }
            if (!categoryExists) {
              mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0 })
            }
            categoryExists = false;
          }

          finalMskData[0] = {};
          finalMskData[0].count = 0;
          finalMskData[0].percentage = 0;
          for (let j = 0; j <= 4; j++) {
            if (mskData[j].category === "HEALTH") {
              finalMskData[0].category = "HEALTH";
              finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              // finalMskData[0].description = mskDescription["HEALTH"];
            } else if (mskData[j].category === "PERFORMANCE") {
              finalMskData[3] = mskData[j];
              finalMskData[3].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "WELLNESS") {
              finalMskData[1] = mskData[j];
              finalMskData[1].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "FITNESS") {
              finalMskData[2] = mskData[j];
              finalMskData[2].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
              finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              //finalMskData[0].description = mskDescription["HEALTH"];
              finalMskData[0].category = "HEALTH";
            }
          }
        } else {
          finalMskData = [
            {
              "count": 0,
              "percentage": 0,
              "category": "HEALTH"
            },
            {
              "count": 0,
              "category": "WELLNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "FITNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "PERFORMANCE",
              "percentage": 0
            }
          ]
        }
        console.log('updated', finalMskData);

        if (organisationIds[i] != "") {
          if (group === "All") {

            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            }
          } else {

            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            }
          }
        } else {

          if (req.body.startDate != "") {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" }, "email": { "$first": "$email" } } }]).exec();
          } else {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

          }

        }
        totalMoveprintCount = MpUser.length;
        console.log('mp count', totalMoveprintCount);
        finalMpCount = finalMpCount + totalMoveprintCount;
        if (MpUser.length > 0) {
          if (organisationIds[i] != "") {
            if (group === "All") {

              if (req.body.startDate != "") {
                console.log("----5969-----",req.body.prolist )
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                else
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                else
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              }
            } else {
              if (req.body.startDate != "") {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                else
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                else
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              }
            }
          } else {

            if (req.body.startDate != "") {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

            } else {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

            }

          }
        } else {
          mptData = [
            {
              "score": 0,
              "title": "TOE TOUCH TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "UPPER BODY MOBILITY TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "ROTATION TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "SQUAT TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "BALANCE & REACH TEST",
              "percentage": 0
            }
          ]
        }
        if (req.body.id.length > 0) {
          if (parent_org.parentOrgId === "NA") {
            combinedOutput.id = organisationIds[i];
            combinedOutput.organisationName = parent_org.organisationName;
            combinedOutput.parentOrgId = "";
          }
        }
        combinedOutput.mskdata[0].count = combinedOutput.mskdata[0].count + finalMskData[0].count;
        combinedOutput.mskdata[1].count = combinedOutput.mskdata[1].count + finalMskData[1].count;
        combinedOutput.mskdata[2].count = combinedOutput.mskdata[2].count + finalMskData[2].count;
        combinedOutput.mskdata[3].count = combinedOutput.mskdata[3].count + finalMskData[3].count;
        // combinedOutput.mskdata[4].count = combinedOutput.mskdata[4].count + finalMskData[4].count;
        combinedOutput.mskdata[0].percentage = combinedOutput.mskdata[0].percentage + finalMskData[0].percentage;
        combinedOutput.mskdata[1].percentage = combinedOutput.mskdata[1].percentage + finalMskData[1].percentage;
        combinedOutput.mskdata[2].percentage = combinedOutput.mskdata[2].percentage + finalMskData[2].percentage;
        combinedOutput.mskdata[3].percentage = combinedOutput.mskdata[3].percentage + finalMskData[3].percentage;
        // combinedOutput.mskdata[4].percentage = combinedOutput.mskdata[4].percentage + finalMskData[4].percentage;
        combinedOutput.mptdata[0].percentage = Math.round(combinedOutput.mptdata[0].percentage) + Math.round(mptData[0].percentage);
        combinedOutput.mptdata[1].percentage = Math.round(combinedOutput.mptdata[1].percentage) + Math.round(mptData[1].percentage);
        combinedOutput.mptdata[2].percentage = Math.round(combinedOutput.mptdata[2].percentage) + Math.round(mptData[2].percentage);
        combinedOutput.mptdata[3].percentage = Math.round(combinedOutput.mptdata[3].percentage) + Math.round(mptData[3].percentage);
        combinedOutput.mptdata[4].percentage = Math.round(combinedOutput.mptdata[4].percentage) + Math.round(mptData[4].percentage);

        combinedOutput.mptdata[0].score = combinedOutput.mptdata[0].score + mptData[0].score;
        combinedOutput.mptdata[1].score = combinedOutput.mptdata[1].score + mptData[1].score;
        combinedOutput.mptdata[2].score = combinedOutput.mptdata[2].score + mptData[2].score;
        combinedOutput.mptdata[3].score = combinedOutput.mptdata[3].score + mptData[3].score;
        combinedOutput.mptdata[4].score = combinedOutput.mptdata[4].score + mptData[4].score;
        //finalMpCount = finalMpCount + mptData[0].score + mptData[1].score + mptData[2].score + mptData[3].score + mptData[4].score
        finalMskCount = finalMskCount + finalMskData[0].count + finalMskData[1].count + finalMskData[2].count + finalMskData[3].count
      }
      console.log('mp  total count', finalMpCount, finalMskCount, combinedOutput.mptdata);
      if (inputOrgLength == true) {
        if (total === organisationIds.length) {
          organisationIds = [];
          combinedOutput.mskdata.forEach(a => {
            if (finalMskCount === 0)
              a.percentage = 0;
            else
              a.percentage = Math.round((a.count / finalMskCount) * 100);
          })
          combinedOutput.mptdata.forEach(a => {
            if (finalMpCount === 0)
              a.percentage = 0;
            else
              a.percentage = Math.round((a.score / finalMpCount));
          })
          return res.status(200).json({
            status: 200,
            message: "Organization Report results",
            mskdata: combinedOutput.mskdata,
            moveprintdata: combinedOutput.mptdata,
            name: name,
            notificationCount: notificationCount,
            profileimage: profileImage,
            referralCode: referralCode,
            proCode: proCode
          })
        }
      } else {
        organisationIds = [];
        return res.status(200).json({
          status: 200,
          message: "Organization Report results",
          mskdata: combinedOutput.mskdata,
          moveprintdata: combinedOutput.mptdata,
          name: name,
          notificationCount: notificationCount,
          // profileimage: profileImage,
          referralCode: referralCode,
          proCode: proCode
        })
      }

    } catch (e) {
      console.log(e)
      return res.status(210).json({
        status: 210,
        message: "Organization Report results",
        finalData: e,
      })
    }
  },
  // group web start
   groupReportweb: async (req, res) => {
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    organisationIds = [];
    if (req.body.role_id === "3") {
      req.body.prolist = [req.body.userid];
    }
    if (req.body.adminSuborg != undefined && req.body.adminSuborg == true) {
      organisationIds.push(req.body.id[0]);
      await organisationIdList(req.body.id[0]);
    } else {
      organisationIds = req.body.id;
    }
    console.log('all org list', organisationIds);
    const combinedOutput = {
      "id": "",
      "organisationName": "",
      "parentOrgId": "",
      "mskdata": [
        {
          "count": 0,
          "percentage": 0,
          "category": "HEALTH",
          "description": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
        },
        {
          "count": 0,
          "category": "WELLNESS",
          "percentage": 0,
          "description": "Individuals in this category have certain areas of their overall health and wellness that will be best served by seeking advice from a fitness or health professional. They should focus on completing their daily MovePrint exercises and recommendations, while avoiding avoid certain higher levels of activity until they progress out of this category."
        },
        {
          "count": 0,
          "category": "FITNESS",
          "percentage": 0,
          "description": "Individuals need to complete their daily Moveprint exercises and follow their next steps suggestions. If they are already actively pursuing fitness, then it is recommended they continue and re-check Moveprint to keep them on track."
        },
        {
          "count": 0,
          "category": "PERFORMANCE",
          "percentage": 0,
          "description": "Individuals in this category can optimize their performance and continue what they are doing. Use Moveprint to actively check movement quality to gauge how current activity, lifestyle or job requirements affect movement."
  
        }
      ],
      "mptdata": [
        {
          "score": 0,
          "title": "TOE TOUCH",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "UPPER BODY MOBILITY",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "ROTATION",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "SQUAT",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "BALANCE & REACH",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "PAIN",
          "percentage": 0
        },
       
        {
          "score": 0,
          "title": "PASS",
          "percentage": 0
        }
      ]
    };
    let inputOrgLength = false;
    if (organisationIds.length > 0) {
      inputOrgLength = true;
      var organisationSettings = await Organisation.findOne({ _id: ObjectId(organisationIds[0]) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
      var mskDescription = {
        "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
        "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
        "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
        "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
        "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
      };
    }
    const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
    let { type, startDate, endDate } = req.body;
    if (type === undefined && startDate == undefined && endDate == undefined) {
      type = "7days";
    } else if ((type === undefined || type === "undefined") && (startDate != undefined || startDate != "")) {
      type = "";
    }
    console.log('final dates', startDate, endDate, req.body);
    var group = '';
    let g = [];
    var finalMskData = [];
    var finalJson = [];
    var mskData = [];
    var result = [];
    let referralCode = '';
    let totalMSKCount = 0;
    let totalMoveprintCount = 0;
    let name = '';
    let profileImage = '';
    let proCode = '';
    var notificationCount = 0;
    let focusArray = {
      'TOE TOUCH': 0,
      'UPPER BODY MOBILITY': 0,
      'ROTATION': 0,
      'SQUAT': 0,
      'BALANCE & REACH': 0,
      // 'SHOULDER CLEARING': 0,
      // 'SPINE CLEARING': 0,
      'SYMMETRY': 0,
      'PAIN FLOW': 0
    };
    notificationCount = await Notification.find({
      // $and: [{
      $or: [{ user_id: req.body.userid, notification_type: "i", "message.readStatus": false }
        //, { notification_type: "i", "message.result_type": { "$in": ["MPRESULT","MSKRESULT","RECOMMENDEDRESULT"] }, user_ids: { $elemMatch: { user_id: ObjectId(req.userid), readStatus: false } } }
        //,{ notification_type: "i" , user_ids: { $elemMatch: { user_id: ObjectId(req.body.userid), isDeleted: false, readStatus: false } } }
      ]
      // } ,
      // { $or: [{ user_id: userdetail._id, deviceId: userdetail.deviceId }, { user_ids: { $elemMatch: { user_id: ObjectId(userdetail._id) } } }] }
      // ]
    }).countDocuments().exec();
    console.log("unread count", notificationCount)
    User.findOne({ _id: ObjectId(req.body.userid) }, { first: 1, last: 1, profileImage: 1, _id: 1, deviceId: 1 }, async (err, adminDetails) => {
      if (err || !adminDetails) {
        return res.status(209).json({
          status: 209,
          message: 'Contact your Admin'
        })
      }
      else {
        name = adminDetails.first + ' ' + adminDetails.last;
        profileImage = adminDetails.profileimage;
        if (req.body.id.length > 0 && req.body.id[0] != '') {
          var referralDetails = await Organisation.findOne({ _id: req.body.id[0] }, { code: 1, proCode: 1 }).exec();
          referralCode = referralDetails.code;
          proCode = referralDetails.proCode;
        }
      }
    })
    if (req.body.group != undefined) {
      if (req.body.group[0] === '0' || req.body.group.length === 0 || req.body.group[0] === '-1' || req.body.group[0] === -1) {
        console.log('ent')
        group = 'All';
      } else {
        for (let i = 0; i < req.body.group.length; i++) {
          g.push(parseInt(req.body.group[i]))
        }
      }
    }
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      } else if (type === "1year") {
        console.log('in 1year');
        startDate = moment().utc().subtract(1, 'year').startOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().endOf('day').format('MM/DD/YYYY');
      }
    } else if (req.body.startDate != "") {
      startDate = moment(req.body.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      endDate = moment(req.body.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      console.log('before', startDate, endDate)
    }
    console.log("modified input format", startDate, endDate)
    if (type === 'today') {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();
  
    } else if (startDate != "") {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
  
    }
  
    console.log("final", startDate, endDate, organisationIds[0]);
  
    try {
      let organisationName = "";
      let organisationColor = "#642683";
      let total = 0;
      let finalMskCount = 0;
      let finalMpCount = 0;
      if (organisationIds.length === 0) {
        organisationIds[0] = "";
      }
      console.log("grp", group, 'kk', req.body.group, 'ppp', g, organisationIds.length);
      console.log('total count', finalMpCount, finalMskCount);
      for (let i = 0; i < organisationIds.length; i++) {
        finalMskData = [];
        mskData = [];
        total = total + 1;
        if (organisationIds[0] != "") {
          var parent_org = await Organisation.findOne({ _id: ObjectId(organisationIds[i]) }, { parentOrgId: 1, organisationName: 1 }).exec();
        } else {
          var parent_org = {};
        }
        if (organisationIds[i] != '' && organisationSettings.isMskEnabled === true) {
          if (group === "All") {
  
            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
                console.log('sssss', result)
              }
            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              else
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
            }
          } else {
  
            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              else
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(organisationIds[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              else
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(organisationIds[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
            }
          }
        } else if (organisationIds[i] === '') {
  
          if (req.body.startDate != "") {
  
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  
  
          } else {
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  
          }
        }
        if (Array.isArray(result))
          totalMSKCount = await result.length;
        console.log('msk', totalMSKCount)
        if (result.length > 0) {
          if (organisationIds[i] != '' && organisationSettings.isMskEnabled === true) {
            if (group === "All") {
  
              if (req.body.startDate != "") {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  
              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              }
            } else {
  
              if (req.body.startDate != "") {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                else
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              }
            }
          } else if (organisationIds[i] === '') {
  
            if (req.body.startDate != "") {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  
  
            } else {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  
            }
  
          }
        }
        if (mskData.length > 0) {
          let categoryExists = false;
          for (let i = 0; i < mskCategories.length; i++) {
            for (var categoryData of mskData) {
              if (mskCategories[i] === categoryData.category) {
                //categoryData.description = mskDescription[categoryData.category];
                categoryExists = true;
                break;
              }
            }
            if (!categoryExists) {
              mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0 })
            }
            categoryExists = false;
          }
  
          finalMskData[0] = {};
          finalMskData[0].count = 0;
          finalMskData[0].percentage = 0;
          for (let j = 0; j <= 4; j++) {
            if (mskData[j].category === "HEALTH") {
              finalMskData[0].category = "HEALTH";
              finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              // finalMskData[0].description = mskDescription["HEALTH"];
            } else if (mskData[j].category === "PERFORMANCE") {
              finalMskData[3] = mskData[j];
              finalMskData[3].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "WELLNESS") {
              finalMskData[1] = mskData[j];
              finalMskData[1].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "FITNESS") {
              finalMskData[2] = mskData[j];
              finalMskData[2].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
              finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              //finalMskData[0].description = mskDescription["HEALTH"];
              finalMskData[0].category = "HEALTH";
            }
          }
        } else {
          finalMskData = [
            {
              "count": 0,
              "percentage": 0,
              "category": "HEALTH"
            },
            {
              "count": 0,
              "category": "WELLNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "FITNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "PERFORMANCE",
              "percentage": 0
            }
          ]
        }
        console.log('updated', finalMskData);
  
        if (organisationIds[i] != "") {
          if (group === "All") {
  
            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  
            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            }
          } else {
  
            if (req.body.startDate != "") {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  
            } else {
              if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
              else
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            }
          }
        } else {
  
          if (req.body.startDate != "") {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" }, "email": { "$first": "$email" } } }]).exec();
          } else {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  
          }
  
        }
        totalMoveprintCount = MpUser.length;
        console.log('mp count', totalMoveprintCount);
        finalMpCount = finalMpCount + totalMoveprintCount;
        if (MpUser.length > 0) {
          if (organisationIds[i] != "") {
            if (group === "All") {
  
              if (req.body.startDate != "") {
                console.log("------6554----",req.body.prolist )
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)){
                  console.log("------6556----")
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  console.log('hello' , mptData)
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                  console.log('focusData',focusData)
                }
                else{

                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) },"roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) },"result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }  }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)){
  
            
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
                else{
  
                  console.log("-----6576-----")
               
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) },"roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              }
            } else {
              if (req.body.startDate != "") {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)){
  
            
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) },"result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }   }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                  
                }
                else{
  
             
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g },"roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) },"result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }   }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              } else {
                if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)){
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) }  }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
                else
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g },"roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) }  }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
              }
            }
          } else {
            if (req.body.startDate != "") {
              console.log("------6611------")
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              console.log("-----6613-----" , mptData)
              var focusData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: { $arrayElemAt: ["$focusarea", -1] } } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec()
  
            } else {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              var focusData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: { $arrayElemAt: ["$focusarea", -1] } } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec()
            }
  
          }
        } else {
          mptData = [
            {
              "score": 0,
              "title": "TOE TOUCH TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "UPPER BODY MOBILITY TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "ROTATION TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "SQUAT TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "BALANCE & REACH TEST",
              "percentage": 0
            }
          ]
        }
        if (req.body.id.length > 0) {
          if (parent_org.parentOrgId === "NA") {
            combinedOutput.id = organisationIds[i];
            combinedOutput.organisationName = parent_org.organisationName;
            combinedOutput.parentOrgId = "";
          }
        }
       
        combinedOutput.mskdata[0].count = combinedOutput.mskdata[0].count + finalMskData[0].count;
        combinedOutput.mskdata[1].count = combinedOutput.mskdata[1].count + finalMskData[1].count;
        combinedOutput.mskdata[2].count = combinedOutput.mskdata[2].count + finalMskData[2].count;
        combinedOutput.mskdata[3].count = combinedOutput.mskdata[3].count + finalMskData[3].count;
        // combinedOutput.mskdata[4].count = combinedOutput.mskdata[4].count + finalMskData[4].count;
        combinedOutput.mskdata[0].percentage = combinedOutput.mskdata[0].percentage + finalMskData[0].percentage;
        combinedOutput.mskdata[1].percentage = combinedOutput.mskdata[1].percentage + finalMskData[1].percentage;
        combinedOutput.mskdata[2].percentage = combinedOutput.mskdata[2].percentage + finalMskData[2].percentage;
        combinedOutput.mskdata[3].percentage = combinedOutput.mskdata[3].percentage + finalMskData[3].percentage;
        // combinedOutput.mskdata[4].percentage = combinedOutput.mskdata[4].percentage + finalMskData[4].percentage;
        // combinedOutput.mskdata[5].percentage = combinedOutput.mskdata[5].percentage + finalMskData[5].percentage;
        // combinedOutput.mskdata[6].percentage = combinedOutput.mskdata[6].percentage + finalMskData[6].percentage;
        // combinedOutput.mskdata[7].percentage = combinedOutput.mskdata[7].percentage + finalMskData[7].percentage;
        // combinedOutput.mskdata[8].percentage = combinedOutput.mskdata[8].percentage + finalMskData[8].percentage;
        // combinedOutput.mskdata[4].percentage = combinedOutput.mskdata[4].percentage + finalMskData[4].percentage;
        console.log('mptData'+JSON.stringify( mptData))
        combinedOutput.mptdata[0].percentage = Math.round(combinedOutput.mptdata[0].percentage) + Math.round(mptData[0].percentage);
        combinedOutput.mptdata[1].percentage = Math.round(combinedOutput.mptdata[1].percentage) + Math.round(mptData[1].percentage);
        combinedOutput.mptdata[2].percentage = Math.round(combinedOutput.mptdata[2].percentage) + Math.round(mptData[2].percentage);
        combinedOutput.mptdata[3].percentage = Math.round(combinedOutput.mptdata[3].percentage) + Math.round(mptData[3].percentage);
        combinedOutput.mptdata[4].percentage = Math.round(combinedOutput.mptdata[4].percentage) + Math.round(mptData[4].percentage);
      if (focusData != undefined) {
          if(focusData[7] != undefined ){
            combinedOutput.mptdata[5].percentage =Math.round((focusData[3].count *finalMpCount)/100);
            combinedOutput.mptdata[6].percentage =Math.round((focusData[7].count *finalMpCount)/100);
          } else {
            if (focusData != undefined) {
            focusData.forEach(async f => {
            if((f.focus == 'PAIN FLOW' && f.focus == 'SYMMETRY') ){
            combinedOutput.mptdata[5].percentage =Math.round((focusData[3].count *finalMpCount)/100);
            combinedOutput.mptdata[6].percentage =Math.round((focusData[7].count *finalMpCount)/100);
            } else if (f.focus == 'SYMMETRY'){
                combinedOutput.mptdata[6].percentage = await Math.round((f.count*finalMpCount)/100);
                  console.log(combinedOutput.mptdata[6].percentage)
            } else if (f.focus == 'PAIN FLOW') {
                combinedOutput.mptdata[5].percentage =Math.round((f.count *finalMpCount)/100);
            } else {
            }
            })
          }
        }
        }
        
           
      
      
        // combinedOutput.mptdata[5].percentage =Math.round((focusData[3].count *finalMpCount)/100);
        // combinedOutput.mptdata[6].percentage =Math.round((focusData[7].count *finalMpCount)/100);
        // combinedOutput.mptdata[7].percentage = Math.round(combinedOutput.mptdata[7].percentage) + Math.round(mptData[7].percentage);
        // combinedOutput.mptdata[8].percentage = Math.round(combinedOutput.mptdata[8].percentage) + Math.round(mptData[8].percentage);
  
        combinedOutput.mptdata[0].score = combinedOutput.mptdata[0].score + mptData[0].score;
        combinedOutput.mptdata[1].score = combinedOutput.mptdata[1].score + mptData[1].score;
        combinedOutput.mptdata[2].score = combinedOutput.mptdata[2].score + mptData[2].score;
        combinedOutput.mptdata[3].score = combinedOutput.mptdata[3].score + mptData[3].score;
        combinedOutput.mptdata[4].score = combinedOutput.mptdata[4].score + mptData[4].score;
        
        // combinedOutput.mptdata[5].score = combinedOutput.mptdata[5].score + mptData[5].score;
        // combinedOutput.mptdata[6].score = combinedOutput.mptdata[6].score + mptData[6].score;
        // combinedOutput.mptdata[7].score = combinedOutput.mptdata[7].score + mptData[7].score;
        // combinedOutput.mptdata[8].score = combinedOutput.mptdata[8].score + mptData[8].score;
        //finalMpCount = finalMpCount + mptData[0].score + mptData[1].score + mptData[2].score + mptData[3].score + mptData[4].score
        finalMskCount = finalMskCount + finalMskData[0].count + finalMskData[1].count + finalMskData[2].count + finalMskData[3].count
      }
            if (focusData != undefined) {
          focusData.forEach(f => {
                 // 'SHOULDER CLEARING': 0,
      // 'SPINE CLEARING': 0,
      console.log('heloooooooo',f)
      if(f.focus != 'SHOULDER CLEARING' && f.focus != 'SPINE CLEARING'){
        focusArray[f.focus] = focusArray[f.focus] + f.count;
      }
          
          })
        }
      console.log('mp  total count', finalMpCount, finalMskCount, combinedOutput.mptdata);
      if (inputOrgLength == true) {
        if (total === organisationIds.length) {
          organisationIds = [];
          combinedOutput.mskdata.forEach(a => {
            if (finalMskCount === 0)
              a.percentage = 0;
            else
              a.percentage = Math.round((a.count / finalMskCount) * 100);
          })
          combinedOutput.mptdata.forEach(a => {
            if (finalMpCount === 0)
              a.percentage = 0;
            else
              a.percentage = Math.round((a.score / finalMpCount));
          })
          return res.status(200).json({
            status: 200,
            message: "Organization Report results",
            mskdata: combinedOutput.mskdata,
            moveprintdata: combinedOutput.mptdata,
            name: name,
            notificationCount: notificationCount,
            profileimage: profileImage,
            referralCode: referralCode,
            proCode: proCode,
            focusData:focusArray
          })
        }
      } else {
        organisationIds = [];
        return res.status(200).json({
          status: 200,
          message: "Organization Report results",
          mskdata: combinedOutput.mskdata,
          moveprintdata: combinedOutput.mptdata,
          name: name,
          notificationCount: notificationCount,
          // profileimage: profileImage,
          referralCode: referralCode,
          proCode: proCode,
          focusData:focusArray
        })
      }
  
    } catch (e) {
      console.log(e)
      return res.status(210).json({
        status: 210,
        message: "Organization Report results",
        finalData: e,
      })
    }
  },
  // group web end
  organisationUsers: (req, res) => {

    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    User.findOne({ _id: ObjectId(req.userid) }, { first: 1, last: 1, profileimage: 1, isReferredBy: 1 }, async (err, adminDetails) => {
      if (err || !adminDetails) {
        return res.status(209).json({
          status: 209,
          message: 'User not found'
        })
      }
      else {
        let profileImage = adminDetails.profileimage;
        if (req.body.proReferral === undefined) {
          const recordsPerPage = 15; // recordss per page
          const currentPage = parseInt(req.body.page) || 1; // Page 
          let totalUsers;
          let parentUsers;
          let availableClients;
          let isSuborganisation = false;
          let totalClients = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { root_org_id: 1, totalClients: 1 }).exec();
          if (totalClients.root_org_id === "") {
            parentUsers = await User.find({ roles: { $elemMatch: { root_org_id: req.body.id, role_id: "1" } } }).countDocuments();
          } else {
            isSuborganisation = true;
            availableClients = await User.find({ roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }).countDocuments();
          }
          let matchCondition;
          console.log('available clients in organisation', availableClients);
          if (totalClients.root_org_id === "") {
            matchCondition = { "roles.root_org_id": req.body.id };
            totalUsers = await User.find(matchCondition).countDocuments();
          } else {
            matchCondition = { "roles.org_id": ObjectId(req.body.id) };
            totalUsers = await User.find(matchCondition).countDocuments();
          }
          let totalPages = Math.ceil(totalUsers / recordsPerPage);
          if (currentPage < 0 || currentPage === 0) {
            return res.status(200).json({
              status: 200,
              message: "invalid page number, should start with 1",
              users: [],
              totalusers: totalUsers,
              totalpages: totalPages,
              currentpage: req.body.page
            })
          } else {
            User.find(matchCondition, { "roles.organisationName": 1, "roles.role_name": 1, "roles.org_id": 1, "roles.isDeleted": 1, userid: 1, email: 1, _id: 1, isDeleted: 1, profileimage: '', first: 1, last: 1 }).sort({ "first": 1 }).skip((recordsPerPage * (currentPage - 1))).limit(recordsPerPage).exec(async function (err, result) {
              // Mongo command to fetch all data from collection.
              if (err) {
                return res.status(209).json({
                  status: 209,
                  message: err
                })
              } else {
                // let finalUsers = [];
                if (result.length === 0) {
                  return res.status(200).json({
                    status: 200,
                    message: 'No users were present',
                    users: [],
                    totalusers: totalUsers,
                    totalpages: totalPages,
                    currentpage: req.body.page,
                    referralCode: adminDetails.isReferredBy,
                    name: adminDetails.first + ' ' + adminDetails.last,
                    totalClients: totalClients.totalClients,
                    availableClients: totalClients.root_org_id === "" ? parentUsers : availableClients,
                    profileimage: profileImage,
                    isSuborganisation: isSuborganisation
                  })
                } else {

                  // result.forEach(user => {
                  //   finalUsers.push({
                  //     "isDeleted": user.isDeleted,
                  //     "profileimage": user.profileimage,
                  //     "_id": user._id,
                  //     "email": user.email,
                  //     "roles": user.roles,
                  //     "name": (user.first === undefined ? user.email : (user.first + ' ' + user.last))
                  //   })
                  // })
                  return res.status(200).json({
                    status: 200,
                    message: "All Organization Users",
                    users: result,
                    totalusers: totalUsers,
                    totalpages: totalPages,
                    currentpage: req.body.page,
                    referralCode: adminDetails.isReferredBy,
                    name: adminDetails.first + ' ' + adminDetails.last,
                    totalClients: totalClients.totalClients,
                    availableClients: totalClients.root_org_id === "" ? parentUsers : availableClients,
                    profileimage: profileImage,
                    isSuborganisation: isSuborganisation
                  })
                }
              }
            });
          }
        } else {
          const recordsPerPage = 15; // recordss per page
          const currentPage = parseInt(req.body.page) || 1; // Page 
          // let totalUsers = await User.find({ roles: { $elemMatch: { org_id: ObjectId(req.body.id), pro_id: req.body.pro_id } }, email: { $ne: "superadmin@yopmail.com" } }).countDocuments();
          let totalUsers = await User.find({ roles: { $elemMatch: { org_id: ObjectId(req.body.id), referralCode: req.body.proReferral } } }).countDocuments();
          let totalPages = Math.ceil(totalUsers / recordsPerPage);
          if (currentPage < 0 || currentPage === 0) {
            return res.status(200).json({
              status: 200,
              message: "invalid page number, should start with 1",
              users: [],
              totalusers: totalUsers,
              totalpages: totalPages,
              currentpage: req.body.page
            })
          } else {
            // User.find({ roles: { $elemMatch: { org_id: ObjectId(req.body.id), pro_id: req.body.pro_id } }, email: {
            User.find({ roles: { $elemMatch: { org_id: ObjectId(req.body.id), referralCode: req.body.proReferral } } }, { "roles.organisationName": 1, "roles.role_name": 1, "roles.org_id": 1, "roles.isDeleted": 1, userid: 1, email: 1, _id: 1, isDeleted: 1, profileimage: '', first: 1, last: 1 }).sort({ "first": 1 }).skip((recordsPerPage * (currentPage - 1))).limit(recordsPerPage).exec(async function (err, result) {
              // Mongo command to fetch all data from collection.
              if (err) {
                return res.status(209).json({
                  status: 209,
                  message: err
                })
              } else {
                //let finalUsers = [];
                if (result.length === 0) {
                  return res.status(200).json({
                    status: 200,
                    message: 'No users were present',
                    users: [],
                    totalusers: totalUsers,
                    totalpages: totalPages,
                    currentpage: req.body.page,
                    referralCode: req.body.proReferral,
                    name: adminDetails.first + ' ' + adminDetails.last,
                    profileimage: profileImage,
                    isSuborganisation: isSuborganisation
                  })
                } else {

                  // result.forEach(user => {
                  //   finalUsers.push({
                  //     "isDeleted": user.isDeleted,
                  //     "profileimage": user.profileimage,
                  //     "_id": user._id,
                  //     "id": user._id,
                  //     "email": user.email,
                  //     "roles": user.roles,
                  //     "name": (user.first === undefined ? user.email : (user.first + ' ' + user.last))
                  //   })
                  // })
                  return res.status(200).json({
                    status: 200,
                    message: "All Organization Users",
                    users: finalUsers,
                    totalusers: totalUsers,
                    totalpages: totalPages,
                    currentpage: req.body.page,
                    referralCode: req.body.proReferral,
                    name: adminDetails.first + ' ' + adminDetails.last,
                    profileimage: profileImage,
                    isSuborganisation: isSuborganisation
                  })
                }
              }
            });
          }
        }

      }
    })
  },
  // oldusersByCategory: (req, res) => {
  //   if (!["0", "3", "2"].includes(req.body.role_id)) {
  //     return res.status(210).json({
  //       status: 210,
  //       message: 'You are not Authorized'
  //     })
  //   }
  //   let category = req.body.mskCategory;
  //   if (category == "ALL") {
  //     category = "";
  //   }
  //   // if (category === "BEHAVIORAL HEALTH") {
  //   //   category = "HEALTH";
  //   // }
  //   let { type, startDate, endDate } = req.body;
  //   let group = '';
  //   let g = [];
  //   if (req.body.group != undefined) {
  //     if (req.body.group.length === 0) {
  //       group = 'All';
  //     } else if (req.body.group.length > 0 && (req.body.group[0] === "-1" || req.body.group[0] === -1)) {
  //       group = 'All';
  //     } else {
  //       g = req.body.group;
  //     }
  //   }
  //   if (req.body.focusArea === undefined) {
  //     req.body.focusArea = 'ALL';
  //   }
  //   console.log('grp', group, 'modified group', g, 'request', req.body)
  //   if (type != "") {
  //     if (type === "7days") {
  //       console.log('in 7days');
  //       startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "1month") {
  //       console.log('in 1 month');
  //       startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "3months") {
  //       console.log('in 3 months');
  //       startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "today") {
  //       console.log('in today');
  //       endDate = moment().utc().format('MM/DD/YYYY');
  //       startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
  //     }
  //   } else if (req.body.startDate != "") {
  //     startDate = moment(req.body.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
  //     endDate = moment(req.body.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
  //     console.log("modified input format", startDate, endDate)
  //   }
  //   User.findOne({ _id: ObjectId(req.userid) }, async (err, adminDetails) => {
  //     if (err || !adminDetails) {
  //       return res.status(209).json({
  //         status: 209,
  //         message: 'User not found'
  //       })
  //     }
  //     else {
  //       let referralCode = "";
  //       if (req.body.id != '') {
  //         var referralDetails = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { code: 1, organisationName: 1, isMskEnabled: 1 }).exec();
  //         referralCode = referralDetails.code;
  //       }
  //       console.log(referralCode)
  //       let finalMptResult = [];
  //       if (type === 'today') {
  //         startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //         endDate = moment().utc().format();

  //       } else if (startDate != '') {
  //         console.log(startDate, endDate)
  //         startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //         endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
  //         // let convertdates = await util.convertDates(startDate, endDate);
  //         // startDate = convertdates.startDate;
  //         // endDate = convertdates.endDate;

  //       }
  //       // else {
  //       //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //       //     endDate = moment().utc().format();
  //       // }
  //       console.log('final dates', startDate, endDate);
  //       let result = [];
  //       if (category === "") {
  //         if (req.body.startDate == "") {
  //           if (req.body.id != '' && referralDetails.isMskEnabled === true) {
  //             if (group === 'All') {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMSKDone": true, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //             } else {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //             }
  //           } else if (req.body.id == '') {
  //             if (req.body.focusArea != "ALL")
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, profileimage: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //             else
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //           }
  //           console.log('no dates', result.length)
  //         } else {
  //           if (req.body.id != '' && referralDetails.isMskEnabled === true) {
  //             if (group === 'All') {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.isMovementDone": true, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //             } else {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //             }

  //           } else if (req.body.id == '') {
  //             console.log('entered')
  //             if (req.body.focusArea != "ALL")
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //             else
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();

  //           }
  //         }
  //       } else if (category != "" && category != "NONE") {

  //         if (req.body.startDate == "") {
  //           if (req.body.id != '' && referralDetails.isMskEnabled === true) {
  //             if (group === 'All') {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
  //                 { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
  //                 { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //             } else {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //             }

  //           } else if (req.body.id == '') {
  //             if (req.body.focusArea != "ALL")
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, mskCategory: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //             else
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //           }
  //         } else {
  //           if (req.body.id != '' && referralDetails.isMskEnabled === true) {
  //             if (group === 'All') {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //             } else {
  //               if (req.body.focusArea != "ALL")
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskCategory: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //               else
  //                 result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //             }

  //           } else if (req.body.id == '') {
  //             if (req.body.focusArea != "ALL")
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, profileimage: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //             else
  //               result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, mskCategory: 1, profileimage: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //           }
  //         }
  //       }

  //       if (Array.isArray(result))
  //         totalMSKCount = result.length;
  //       console.log(totalMSKCount)
  //       if (result.length > 0) {
  //         let count = 0;
  //         for (let user of result) {
  //           count = count + 1;
  //           let obj = {};
  //           let exercisesscore = 0;
  //           if (user.first === null) {
  //             user.last = '';
  //             user.first = '';
  //           }
  //           obj.pain = 'N';
  //           obj.mskdate = user.mskdate;
  //           obj.org_id = user.org_id;
  //           obj.bmi = parseInt(user.bmi);
  //           obj.email = user.email;
  //           obj.mskCategory = user.mskCategory;
  //           if (req.body.id != '') {
  //             obj.organisationName = referralDetails.organisationName;
  //           } else {
  //             let orgName = Organisation.findOne({ _id: user.org_id }, { organisationName: 1 }).exec();
  //             obj.organisationName = orgName.organisationName;
  //           }
  //           obj.profileimage = user.profileimage;
  //           obj.name = user.first != undefined ? user.first + " " + user.last : user.email;
  //           obj.mptdate = user.mptdate;
  //           obj.focusArea = user.focusarea;
  //           for (let i = 0; i < 5; i++) {
  //             if (user.movementscore[i].score === 100) {
  //               exercisesscore = exercisesscore + 1;
  //             }
  //           }
  //           if (exercisesscore === 5) {
  //             obj.focusArea = "WELL DONE";
  //           }
  //           for (let i = 0; i < 5; i++) {
  //             if (user.movementscore[i].pain === true) {
  //               obj.pain = 'Y';
  //               break;
  //             }
  //           }
  //           finalMptResult.push(obj);
  //           if (count === totalMSKCount) {
  //             return res.status(200).json({
  //               status: 200,
  //               message: 'Users Moveprint details',
  //               moveprintResult: finalMptResult
  //             })
  //           }
  //         }
  //       } else {
  //         var mptData = [];
  //         if (category === "NONE" || (result.length === 0) || ((req.body.id != "" && referralDetails.isMskEnabled === false))) {
  //           if (req.body.id != "") {
  //             if (group === "All") {

  //               if (req.body.startDate != "") {
  //                 if (req.body.focusArea != "ALL")
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //                 else
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();

  //               } else {
  //                 if (req.body.focusArea != "ALL")
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //                 else
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //               }
  //             } else {

  //               if (req.body.startDate != "") {
  //                 if (req.body.focusArea != "ALL")
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.focusarea": req.body.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //                 else
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //               } else {
  //                 if (req.body.focusArea != "ALL")
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.body.focusArea, "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //                 else
  //                   mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //               }
  //             }
  //           } else {

  //             if (req.body.startDate != "") {
  //               if (req.body.focusArea != "ALL")
  //                 mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.body.focusArea, "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //               else
  //                 mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //             } else {
  //               if (req.body.focusArea != "ALL")
  //                 mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.body.focusArea, "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //               else
  //                 mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //             }

  //           }
  //           let finalMptResult = [];
  //           console.log('only focus', mptData.length);
  //           if (mptData.length > 0) {
  //             mptData.forEach(async user => {
  //               let obj = {};
  //               let exercisesscore = 0;
  //               if (user.first === null) {
  //                 user.last = '';
  //                 user.first = '';
  //               }
  //               obj.pain = 'N';
  //               obj.mskdate = "";
  //               obj.mskCategory = "";
  //               obj.org_id = user.org_id;
  //               if (req.body.id != '') {
  //                 obj.organisationName = referralDetails.organisationName;
  //               } else {
  //                 let orgName = await Organisation.findOne({ _id: user.org_id }, { organisationName: 1 }).exec();
  //                 obj.organisationName = orgName.organisationName;
  //               }
  //               if (user.height === null) {
  //                 obj.bmi = 0;
  //               } else {
  //                 obj.bmi = (user.weightUnit === "kg" ? parseInt(user.weight) : (parseFloat(user.weight) * 0.453592)) / Math.pow(((parseInt((user.height.split("'")[0] * 12)) + parseInt(user.height.split("'")[1])) * 0.0254), 2);
  //               }
  //               obj.email = user._id;
  //               obj.profileimage = user.profileimage;
  //               obj.name = user.first + " " + user.last;
  //               obj.mptdate = user.mptdate;
  //               obj.focusArea = user.focus;
  //               for (let i = 0; i < 5; i++) {
  //                 if (user.movementscore[i].score === 100) {
  //                   exercisesscore = exercisesscore + 1;
  //                 }
  //               }
  //               if (exercisesscore === 5) {
  //                 obj.focusArea = "WELL DONE";
  //               }
  //               for (let i = 0; i < 5; i++) {
  //                 if (user.movementscore[i].pain === true) {
  //                   obj.pain = 'Y';
  //                   break;
  //                 }
  //               }
  //               finalMptResult.push(obj);
  //               if (finalMptResult.length === mptData.length) {
  //                 return res.status(200).json({
  //                   status: 200,
  //                   message: 'Users Moveprint details',
  //                   moveprintResult: finalMptResult
  //                 })
  //               }
  //             })
  //           } else {
  //             return res.status(200).json({
  //               status: 200,
  //               message: 'No users Present',
  //               moveprintResult: []
  //             })
  //           }
  //         } else {
  //           return res.status(200).json({
  //             status: 200,
  //             message: 'No users Present',
  //             moveprintResult: []
  //           })
  //         }
  //       }
  //     }
  //   })
  // },
  usersByCategory: async (req, res) => {
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    var category = [];
    if (!Array.isArray(req.body.mskCategory)) {
      category = [req.body.mskCategory];
    } else if (req.body.mskCategory.length === 0) {
      category.push('ALL');
    } else if (req.body.mskCategory.length > 0) {
      category = req.body.mskCategory;
    }
    let { type, startDate, endDate } = req.body;
    let group = '';
    let g = [];
    if (req.body.group != undefined) {
      if (req.body.group.length === 0) {
        group = 'All';
      } else if (req.body.group.length > 0 && (req.body.group[0] === "-1" || req.body.group[0] === -1)) {
        group = 'All';
      } else {
        g = req.body.group;
      }
    }
    if (req.body.focusArea === undefined) {
      let a = ["ALL"];
      req.body.focusArea = a
    } else if (!Array.isArray(req.body.focusArea)) {
      let a = [req.body.focusArea];
      req.body.focusArea = a
    }
    // if (req.body.loginFlag == true) {
    //   organisationIds.push(req.body.id[0]);
    //   await organisationIdList(req.body.id[0]);
    //   req.body.id = organisationIds;
    //   organisationIds = [];
    // }
    console.log('grp', group, 'modified group', g, 'request', req.body)
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      }
    } else if (req.body.startDate != "") {
      startDate = moment(req.body.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      endDate = moment(req.body.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      console.log("modified input format", startDate, endDate)
    }
    User.findOne({ _id: ObjectId(req.body.userid) }, async (err, adminDetails) => {
      if (err || !adminDetails) {
        return res.status(209).json({
          status: 209,
          message: 'User not found'
        })
      }
      else {
        let referralCode = "";
        if (req.body.id.length > 0) {
          if (req.body.id[0] != '') {
            var referralDetails = await Organisation.findOne({ _id: ObjectId(req.body.id[0]) }, { code: 1, organisationName: 1, isMskEnabled: 1 }).exec();
            referralCode = referralDetails.code;
          }
          console.log(referralCode)
        }
        let finalMptResult = [];
        if (type === 'today') {
          startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
          endDate = moment().utc().format();

        } else if (startDate != '') {
          console.log(startDate, endDate)
          startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
          endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
          // let convertdates = await util.convertDates(startDate, endDate);
          // startDate = convertdates.startDate;
          // endDate = convertdates.endDate;

        }
        // else {
        //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
        //     endDate = moment().utc().format();
        // }
        console.log('final dates', startDate, endDate);
        let result = [];
        if (req.body.id.length === 0) {
          req.body.id[0] = "";
        }
        for (let i = 0; i < req.body.id.length; i++) {
          if (category[0] === "ALL") {
            if (req.body.startDate == "") {
              if (req.body.id[i] != '' && referralDetails.isMskEnabled === true) {
                if (group === 'All') {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)) {
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    } else {
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    }
                  } else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0)) {
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    }
                    else {
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.body.prolist } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    }
                  }
                } else {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                  else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]) },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                }
              } else if (req.body.id[i] == '') {
                if (req.body.focusArea[0] != "ALL")
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

              }
              console.log('no dates', result.length)
            } else {
              if (req.body.id[i] != '' && referralDetails.isMskEnabled === true) {
                if (group === 'All') {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.isMovementDone": true, isDeleted: false } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.isMovementDone": true, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                  else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.body.prolist } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                } else {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                  else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                      { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                      {
                        $match: {
                          $or: [
                            { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                            { "mskresult.mskdate": { $exists: false } }
                          ]
                        }
                      }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                }

              } else if (req.body.id[i] == '') {
                console.log('entered')
                if (req.body.focusArea[0] != "ALL") {
                  // result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.body.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } }, {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, focusarea: { "$first": "$focusarea" }, movementscore: { "$first": "$movementscore" }, mptdate: { "$first": "$mptdate" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $sort: { first: 1 } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, focusarea: 1, movementscore: 1, mskCategory: { $ifNull: ["$mskCategory", ""] }, mptdate: 1, _id: 0 } }]).exec();
                } else {
                  //  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();


                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } }, {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  },
                  { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                  // result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } }, {
                  //   $match: {
                  //     $or: [
                  //       { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                  //       { "mskresult.mskdate": { $exists: false } }
                  //     ]
                  //   }
                  // }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, focusarea: { "$first": "$focusarea" }, movementscore: { "$first": "$movementscore" }, mptdate: { "$first": "$mptdate" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $sort: { first: 1 } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, focusarea: 1, movementscore: 1, mskCategory: { $ifNull: ["$mskCategory", ""] }, mptdate: 1, _id: 0 } }]).exec();

                }
              }
            }
          } else if (category[0] != "ALL" && category[0] != "NONE") {

            if (req.body.startDate == "") {
              if (req.body.id[i] != '' && referralDetails.isMskEnabled === true) {
                if (group === 'All') {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  } else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                } else {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  } else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                }

              } else if (req.body.id[i] == '') {
                if (req.body.focusArea[0] != "ALL")
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, mskCategory: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

              }
            } else {
              if (req.body.id[i] != '' && referralDetails.isMskEnabled === true) {
                if (group === 'All') {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, mskCategory: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  } else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                } else {
                  if (req.body.focusArea[0] != "ALL") {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskCategory: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskCategory: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  } else {
                    if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                    else
                      result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.body.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                  }
                }

              } else if (req.body.id[i] == '') {
                if (req.body.focusArea[0] != "ALL")
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, focusarea: 1, movementscore: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, mskCategory: 1, bmi: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

              }
            }
          }

          if (Array.isArray(result))
            totalMSKCount = result.length;
          console.log(totalMSKCount)
          if (result.length > 0) {
            let count = 0;
            for (let user of result) {
              count = count + 1;
              let obj = {};
              let exercisesscore = 0;
              if (user.first === null) {
                user.last = '';
                user.first = '';
              }
              obj.pain = 'N';
              obj.mskdate = user.mskdate;
              obj.org_id = user.org_id;
              obj.bmi = parseInt(user.bmi);
              obj.email = user.email;
              obj.mskCategory = user.mskCategory;
              if (req.body.id[i] != '') {
                obj.organisationName = referralDetails.organisationName;
              } else {
                let orgName = await Organisation.findOne({ _id: user.org_id }, { organisationName: 1 }).exec();
                obj.organisationName = orgName.organisationName;
              }
              //obj.profileimage = user.profileimage;
              obj.name = user.first != undefined ? user.first + " " + user.last : user.email;
              obj.mptdate = user.mptdate;
              obj.focusArea = user.focusarea;
              for (let i = 0; i < 5; i++) {
                if (user.movementscore[i].score === 100) {
                  exercisesscore = exercisesscore + 1;
                }
              }
              if (exercisesscore === 5) {
                obj.focusArea = "WELL DONE";
              }
              for (let i = 0; i < 5; i++) {
                if (user.movementscore[i].pain === true) {
                  obj.pain = 'Y';
                  break;
                }
              }
              finalMptResult.push(obj);
              // if (count === totalMSKCount) {
              //   return res.status(200).json({
              //     status: 200,
              //     message: 'Users Moveprint details',
              //     moveprintResult: finalMptResult
              //   })
              // }
            }
          } else {
            var mptData = [];
            if (category[0] === "NONE" || ((req.body.id[i] != "" && referralDetails.isMskEnabled === false))) {
              if (req.body.id[i] != "") {
                if (group === "All") {

                  if (req.body.startDate != "") {
                    if (req.body.focusArea[0] != "ALL") {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    } else {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    }
                  } else {
                    if (req.body.focusArea[0] != "ALL") {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    } else {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.body.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    }
                  }
                } else {

                  if (req.body.startDate != "") {
                    if (req.body.focusArea[0] != "ALL") {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    } else {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    }
                  } else {
                    if (req.body.focusArea[0] != "ALL") {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea }, "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea }, "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    } else {
                      if (req.body.prolist == undefined || (req.body.prolist != undefined && req.body.prolist.length === 0))
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                      else
                        mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.body.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.body.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                    }
                  }
                }
              } else {

                if (req.body.startDate != "") {
                  if (req.body.focusArea[0] != "ALL")
                    mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                } else {
                  if (req.body.focusArea[0] != "ALL")
                    mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.body.focusArea }, "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                }

              }
              let finalMptResult = [];
              console.log('only focus', mptData.length);
              if (mptData.length > 0) {
                mptData.forEach(async user => {
                  let obj = {};
                  let exercisesscore = 0;
                  if (user.first === null) {
                    user.last = '';
                    user.first = '';
                  }
                  obj.pain = 'N';
                  obj.mskdate = "";
                  obj.mskCategory = "";
                  obj.org_id = user.org_id;
                  if (req.body.id[i] != '') {
                    obj.organisationName = referralDetails.organisationName;
                  } else {
                    let orgName = await Organisation.findOne({ _id: user.org_id }, { organisationName: 1 }).exec();
                    obj.organisationName = orgName.organisationName;
                  }
                  if (user.height === null) {
                    obj.bmi = 0;
                  } else {
                    obj.bmi = (user.weightUnit === "kg" ? parseInt(user.weight) : (parseFloat(user.weight) * 0.453592)) / Math.pow(((parseInt((user.height.split("'")[0] * 12)) + parseInt(user.height.split("'")[1])) * 0.0254), 2);
                  }
                  obj.email = user._id;
                  //obj.profileimage = user.profileimage;
                  obj.name = user.first + " " + user.last;
                  obj.mptdate = user.mptdate;
                  obj.focusArea = user.focus;
                  for (let i = 0; i < 5; i++) {
                    if (user.movementscore[i].score === 100) {
                      exercisesscore = exercisesscore + 1;
                    }
                  }
                  if (exercisesscore === 5) {
                    obj.focusArea = "WELL DONE";
                  }
                  for (let i = 0; i < 5; i++) {
                    if (user.movementscore[i].pain === true) {
                      obj.pain = 'Y';
                      break;
                    }
                  }
                  finalMptResult.push(obj);
                  // if (finalMptResult.length === mptData.length) {
                  //   return res.status(200).json({
                  //     status: 200,
                  //     message: 'Users Moveprint details',
                  //     moveprintResult: finalMptResult
                  //   })
                  // }
                })
              }
              //  else {
              //   return res.status(200).json({
              //     status: 200,
              //     message: 'No users Present',
              //     moveprintResult: []
              //   })
              // }
            }
            // else {
            //   return res.status(200).json({
            //     status: 200,
            //     message: 'No users Present',
            //     moveprintResult: []
            //   })
            // }
          }
        }
        return res.status(200).json({
          status: 200,
          message: 'MP result',
          moveprintResult: finalMptResult
        })
      }
    })
  },
  // reportByCategory: async (req, res) => {

  //   if (!["0", "3", "2"].includes(req.query.role_id)) {
  //     return res.status(210).json({
  //       status: 210,
  //       message: 'You are not Authorized'
  //     })
  //   }
  //   if (req.query.focusArea === undefined || req.query.focusArea === 'undefined') {
  //     req.query.focusArea = "ALL";
  //   }
  //   if (req.query.focusArea === "BALANCE") {
  //     req.query.focusArea = "BALANCE & REACH";
  //   }
  //   if (req.query.mskCategory === "BEHAVIORAL") {
  //     req.query.mskCategory = "BEHAVIORAL HEALTH";
  //   }
  //   let category = req.query.mskCategory;
  //   if (category == "ALL") {
  //     category = "";
  //   }
  //   let { type, startDate, endDate } = req.query;
  //   let group = '';
  //   let g = [];
  //   if (req.query.group != undefined) {
  //     if (req.query.group[0] === '0' || req.query.group[0] === "-1" || req.query.group[0] === -1) {
  //       console.log('ent')
  //       group = 'All';
  //     } else {
  //       for (let i = 0; i < req.query.group.length; i++) {
  //         g.push(parseInt(req.query.group[i]))
  //       }
  //       // g = JSON.parse(req.query.group);
  //     }
  //   }
  //   console.log('grp', group, 'modified group', g, 'input', req.query)
  //   if (type != "") {
  //     if (type === "7days") {
  //       console.log('in 7days');
  //       startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "1month") {
  //       console.log('in 1 month');
  //       startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "3months") {
  //       console.log('in 3 months');
  //       startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "today") {
  //       console.log('in today');
  //       endDate = moment().utc().format('MM/DD/YYYY');
  //       startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
  //     }
  //   } else if (startDate != "") {
  //     startDate = moment(req.query.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
  //     endDate = moment(req.query.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
  //     console.log("modified input format", startDate, endDate)
  //   }
  //   let referralCode = "";
  //   let organisationName = "";
  //   let organisationColor = "#642683";
  //   if (req.query.id != '') {
  //     var referralDetails = await Organisation.findOne({ _id: ObjectId(req.query.id) }, { code: 1, isMskEnabled: 1, organisationName: 1, "theme.color": 1 }).exec();
  //     referralCode = referralDetails.code;
  //     organisationColor = referralDetails.theme.color;
  //     organisationName = referralDetails.organisationName;
  //   }
  //   let finalMptResult = [];
  //   if (type === 'today') {
  //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //     endDate = moment().utc().format();

  //   } else if (req.query.startDate != "") {
  //     console.log(startDate, endDate);
  //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //     endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
  //     // let convertdates = await util.convertDates(startDate, endDate);
  //     // startDate = convertdates.startDate;
  //     // endDate = convertdates.endDate;

  //   } else if (["3months", "1month", "7days"].includes(type)) {
  //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //     endDate = moment().utc().format();
  //   }
  //   console.log('final dates', startDate, endDate, req.query, req.query.group);
  //   let result = [];
  //   if (category === "") {
  //     if (req.query.startDate == "") {
  //       if (req.query.id != '' && referralDetails.isMskEnabled === true) {
  //         if (group === 'All') {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, profileimage: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, profileimage: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         } else {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, profileimage: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         }
  //       } else if (req.query.id == '') {
  //         if (req.query.focusArea != "ALL")
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         else
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //       }
  //       console.log('no dates', result.length)
  //     } else {
  //       if (req.query.id != '' && referralDetails.isMskEnabled === true) {
  //         if (group === 'All') {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, profileimage: 1, focusarea: 1, movementscore: 1, bmi: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, profileimage: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //         } else {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //         }

  //       } else if (req.query.id == '') {
  //         console.log('entered')
  //         if (req.query.focusArea != "ALL")
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, profileimage: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         else
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //       }
  //     }
  //   }
  //   else if (category != "" && category != "NONE") {

  //     if (req.query.startDate == "") {
  //       if (req.query.id != '' && referralDetails.isMskEnabled === true) {
  //         if (group === 'All') {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
  //             { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
  //             { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, profileimage: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         } else {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, profileimage: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, profileimage: 1, focusarea: 1, movementscore: 1, bmi: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
  //         }

  //       } else if (req.query.id == '') {
  //         if (req.query.focusArea != "ALL")
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         else
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": category } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, profileimage: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //       }
  //     } else {
  //       if (req.query.id != '' && referralDetails.isMskEnabled === true) {
  //         if (group === 'All') {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //         } else {
  //           if (req.query.focusArea != "ALL")
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, profileimage: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //           else
  //             result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //         }

  //       } else if (req.query.id == '') {
  //         if (req.query.focusArea != "ALL")
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": req.query.focusArea } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, profileimage: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
  //         else
  //           result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": category } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, profileimage: { "$first": "$profileimage" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, profileimage: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

  //       }
  //     }
  //   }
  //   if (Array.isArray(result))
  //     totalMSKCount = result.length;
  //   if (result.length > 0) {
  //     let count = 0;
  //     for (let user of result) {
  //       count = count + 1;
  //       let obj = {};
  //       if (user.first === null) {
  //         user.last = '';
  //         user.first = '';
  //       }
  //       obj.pain = "N";
  //       obj.bmi = parseInt(user.bmi);
  //       obj.mskdate = await moment(user.mskdate).format('MM/DD/YYYY');
  //       obj.mskCategory = await getHealthImage(user.mskCategory);
  //       obj.group = organisationName;
  //       //obj.email = user.email;
  //       let exercisesscore = 0;
  //       obj.name = user.first + " " + user.last;
  //       obj.focusArea = user.focusarea;
  //       for (let i = 0; i < 5; i++) {
  //         if (user.movementscore[i].score === 100) {
  //           exercisesscore = exercisesscore + 1;
  //         }
  //       }
  //       if (exercisesscore === 5) {
  //         obj.focusArea = 'WELL DONE';
  //       }
  //       for (let i = 0; i < 5; i++) {
  //         if (user.movementscore[i].pain === "true") {
  //           obj.pain = "Y";
  //           break;
  //         }
  //       }
  //       finalMptResult.push(obj);
  //       if (count === totalMSKCount) {
  //         var fonts = {
  //           Roboto: {
  //             normal: 'fonts/Roboto-Regular.ttf',
  //             bold: 'fonts/Roboto-Medium.ttf',
  //             italics: 'fonts/Roboto-Italic.ttf',
  //             bolditalics: 'fonts/Roboto-MediumItalic.ttf'
  //           }
  //         };
  //         var printer = new pdfMakePrinter(fonts);
  //         var docDefinition = {
  //           content: [
  //             {
  //               layout: 'noBorders', // optional
  //               table: {
  //                 // headers are automatically repeated if the table spans over multiple pages
  //                 // you can declare how many rows should be treated as headers
  //                 headerRows: 1,
  //                 widths: ['*'],

  //                 body: [
  //                   [{
  //                     fillColor: organisationColor,
  //                     text: {
  //                       text: 'GROUP CATEGORY REPORT',
  //                       style: 'header'
  //                     }
  //                   }],
  //                   [{
  //                     columns:
  //                       [{
  //                         width: '*',
  //                         text: [
  //                           { text: 'ORGANIZATION NAME : ', style: 'label' },
  //                           { text: organisationName, style: 'value' }
  //                         ]
  //                       },
  //                       {
  //                         width: 100,
  //                         text: [
  //                           //{ text: moment(new Date()).format("DD/MM/YYYY hh:mm A"), style: 'date' }
  //                           { text: moment(new Date()).format('MM/DD/YYYY'), style: 'date' }
  //                         ]
  //                       }
  //                       ]
  //                   }],
  //                   [{
  //                     text: [
  //                       { text: 'No OF USERS : ', style: 'label' },
  //                       { text: finalMptResult.length.toString(), style: 'value' }
  //                     ]
  //                   }],
  //                   [
  //                     {
  //                       svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                     }
  //                   ],
  //                   [{
  //                     text: ' '
  //                   }],
  //                   [{
  //                     text: req.query.mskCategory + ' CATEGORY',
  //                     style: 'subheader'
  //                   }],
  //                   [
  //                     {
  //                       svg: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                     }
  //                   ],
  //                   [{
  //                     style: 'value',
  //                     layout: 'headerLineOnly', // optional
  //                     table: {
  //                       // headers are automatically repeated if the table spans over multiple pages
  //                       // you can declare how many rows should be treated as headers
  //                       headerRows: 1,
  //                       widths: [50, 50, 50, '*', 60, 50, 50, 90],
  //                       body: scoreCalculation(finalMptResult)
  //                     }
  //                   }],
  //                 ]
  //               }
  //             }
  //           ],
  //           styles: {
  //             header: {
  //               fontSize: 18,
  //               bold: true,
  //               alignment: 'center',
  //               color: '#ffffff'
  //             },
  //             subheader: {
  //               fontSize: 15,
  //               color: organisationColor
  //             },
  //             quote: {
  //               italics: true
  //             },
  //             small: {
  //               fontSize: 8
  //             },
  //             label: {
  //               fontSize: 8,
  //               bold: true,
  //               color: organisationColor,
  //               margin: [0, 2]
  //             },
  //             value: {
  //               fontSize: 8,
  //               bold: true,
  //               margin: [0, 2]
  //             },
  //             date: {
  //               fontSize: 8,
  //               bold: true,
  //               alignment: 'right'
  //             },
  //             per: {
  //               fontSize: 8,
  //               margin: [5, 0]
  //             }
  //           }
  //         };
  //         res.setHeader('Content-Type', 'application/pdf');
  //         res.setHeader('Content-Disposition', 'attachment; filename=pdfmake.pdf');
  //         var pdfDoc = printer.createPdfKitDocument(docDefinition);
  //         pdfDoc.pipe(res);
  //         pdfDoc.end();
  //       }
  //     }
  //   } else {
  //     var mptData = [];
  //     if (category === "NONE" || (result.length === 0) || ((req.query.id != "" && referralDetails.isMskEnabled === false))) {
  //       if (req.query.id != "") {
  //         if (group === "All") {

  //           if (req.query.startDate != "") {
  //             if (req.query.focusArea != "ALL")
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //             else
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();

  //           } else {
  //             if (req.query.focusArea != "ALL")
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //             else
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //           }
  //         } else {

  //           if (req.query.startDate != "") {
  //             if (req.query.focusArea != "ALL")
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.focusarea": req.query.focusArea, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //             else
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //           } else {
  //             if (req.query.focusArea != "ALL")
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.query.focusArea, "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //             else
  //               mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //           }
  //         }
  //       } else {

  //         if (req.query.startDate != "") {
  //           if (req.query.focusArea != "ALL")
  //             mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.query.focusArea, "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //           else
  //             mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //         } else {
  //           if (req.query.focusArea != "ALL")
  //             mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": req.query.focusArea, "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //           else
  //             mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, profileimage: { "$first": "$profileimage" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, profileimage: 1, org_id: 1 } }]).exec();
  //         }

  //       }
  //       console.log('only focus', mptData.length);
  //       if (mptData.length != 0) {
  //         mptData.forEach(user => {
  //           let obj = {};
  //           let exercisesscore = 0;
  //           if (user.first === null) {
  //             user.last = '';
  //             user.first = '';
  //           }
  //           obj.pain = 'N';
  //           obj.mskdate = "";
  //           obj.org_id = user.org_id;
  //           if (user.height === null) {
  //             obj.bmi = 0;
  //           } else {
  //             obj.bmi = (user.weightUnit === "kg" ? parseInt(user.weight) : (parseFloat(user.weight) * 0.453592)) / Math.pow(((parseInt((user.height.split("'")[0] * 12)) + parseInt(user.height.split("'")[1])) * 0.0254), 2);
  //           }
  //           obj.email = user._id;
  //           obj.profileimage = user.profileimage;
  //           obj.name = user.first + " " + user.last;
  //           obj.mptdate = user.mptdate;
  //           obj.mskCategory = "";
  //           obj.group = organisationName;
  //           obj.focusArea = user.focus;
  //           for (let i = 0; i < 5; i++) {
  //             if (user.movementscore[i].score === 100) {
  //               exercisesscore = exercisesscore + 1;
  //             }
  //           }
  //           if (exercisesscore === 5) {
  //             obj.focusArea = "WELL DONE";
  //           }
  //           for (let i = 0; i < 5; i++) {
  //             if (user.movementscore[i].pain === true) {
  //               obj.pain = 'Y';
  //               break;
  //             }
  //           }
  //           finalMptResult.push(obj);
  //           if (finalMptResult.length === mptData.length) {
  //             var fonts = {
  //               Roboto: {
  //                 normal: 'fonts/Roboto-Regular.ttf',
  //                 bold: 'fonts/Roboto-Medium.ttf',
  //                 italics: 'fonts/Roboto-Italic.ttf',
  //                 bolditalics: 'fonts/Roboto-MediumItalic.ttf'
  //               }
  //             };
  //             var printer = new pdfMakePrinter(fonts);
  //             var docDefinition = {
  //               content: [
  //                 {
  //                   layout: 'noBorders', // optional
  //                   table: {
  //                     // headers are automatically repeated if the table spans over multiple pages
  //                     // you can declare how many rows should be treated as headers
  //                     headerRows: 1,
  //                     widths: ['*'],

  //                     body: [
  //                       [{
  //                         fillColor: organisationColor,
  //                         text: {
  //                           text: 'GROUP CATEGORY REPORT',
  //                           style: 'header'
  //                         }
  //                       }],
  //                       [{
  //                         columns:
  //                           [{
  //                             width: '*',
  //                             text: [
  //                               { text: 'ORGANIZATION NAME : ', style: 'label' },
  //                               { text: organisationName, style: 'value' }
  //                             ]
  //                           },
  //                           {
  //                             width: 100,
  //                             text: [
  //                               //{ text: moment(new Date()).format("DD/MM/YYYY hh:mm A"), style: 'date' }
  //                               { text: moment(new Date()).format('MM/DD/YYYY'), style: 'date' }
  //                             ]
  //                           }
  //                           ]
  //                       }],
  //                       [{
  //                         text: [
  //                           { text: 'No OF USERS : ', style: 'label' },
  //                           { text: finalMptResult.length.toString(), style: 'value' }
  //                         ]
  //                       }],
  //                       [
  //                         {
  //                           svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                         }
  //                       ],
  //                       [{
  //                         text: ' '
  //                       }],
  //                       [{
  //                         text: req.query.mskCategory + ' CATEGORY',
  //                         style: 'subheader'
  //                       }],
  //                       [
  //                         {
  //                           svg: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                         }
  //                       ],
  //                       [{
  //                         style: 'value',
  //                         layout: 'headerLineOnly', // optional
  //                         table: {
  //                           // headers are automatically repeated if the table spans over multiple pages
  //                           // you can declare how many rows should be treated as headers
  //                           headerRows: 1,
  //                           widths: [50, 50, 50, '*', 60, 50, 50, 90],
  //                           body: scoreCalculation(finalMptResult)
  //                         }
  //                       }],
  //                     ]
  //                   }
  //                 }
  //               ],
  //               styles: {
  //                 header: {
  //                   fontSize: 18,
  //                   bold: true,
  //                   alignment: 'center',
  //                   color: '#ffffff'
  //                 },
  //                 subheader: {
  //                   fontSize: 15,
  //                   color: organisationColor
  //                 },
  //                 quote: {
  //                   italics: true
  //                 },
  //                 small: {
  //                   fontSize: 8
  //                 },
  //                 label: {
  //                   fontSize: 8,
  //                   bold: true,
  //                   color: organisationColor,
  //                   margin: [0, 2]
  //                 },
  //                 value: {
  //                   fontSize: 8,
  //                   bold: true,
  //                   margin: [0, 2]
  //                 },
  //                 date: {
  //                   fontSize: 8,
  //                   bold: true,
  //                   alignment: 'right'
  //                 },
  //                 per: {
  //                   fontSize: 8,
  //                   margin: [5, 0]
  //                 }
  //               }
  //             };
  //             res.setHeader('Content-Type', 'application/pdf');
  //             res.setHeader('Content-Disposition', 'attachment; filename=pdfmake.pdf');
  //             var pdfDoc = printer.createPdfKitDocument(docDefinition);
  //             pdfDoc.pipe(res);
  //             pdfDoc.end();
  //           }
  //         })
  //       } else {
  //         return res.status(200).json({
  //           status: 200,
  //           message: 'No users Present',
  //           moveprintResult: []
  //         })
  //       }
  //     } else {
  //       return res.status(200).json({
  //         status: 200,
  //         message: 'Users Moveprint details',
  //         moveprintResult: []
  //       })
  //     }
  //   }
  // },
  reportByCategory: async (req, res) => {

    if (!["0", "3", "2"].includes(req.query.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }

    let { type, startDate, endDate } = req.query;
    let group = '';
    let g = [];
    console.log('before parsed', req.query)
    let df = JSON.parse(req.query.params)
    console.log('parsed content', df, df.id, df.group)
    req.query.group = df.group;
    req.query.prolist = df.prolist;
    req.query.id = df.id;
    if (df.focusArea != undefined && df.mskCategory != undefined) {
      req.query.focusArea = df.focusArea;
      req.query.mskCategory = df.mskCategory;
    }

    if (req.query.group != undefined) {
      console.log('group check')
      if (req.query.group[0] === '0' || req.query.group[0] === "-1" || req.query.group[0] === -1) {
        console.log('group 1 value')
        group = 'All';
      } else {
        for (let i = 0; i < req.query.group.length; i++) {
          g.push(parseInt(req.query.group[i]))
        }
        // g = JSON.parse(req.query.group);
      }
    }
    if (req.query.focusArea === undefined || req.query.focusArea === 'undefined') {
      let a = ["ALL"];
      req.query.focusArea = a
    } else if (!Array.isArray(req.query.focusArea)) {
      let a = [req.query.focusArea];
      req.query.focusArea = a
    } else if (req.query.focusArea.length === 0) {
      let a = ["ALL"];
      req.query.focusArea = a
    }
    // if (req.query.focusArea === undefined || req.query.focusArea === 'undefined') {
    //   req.query.focusArea = "ALL";
    // }
    if (req.query.focusArea.includes("BALANCE")) {
      let f = req.query.focusArea.indexOf("BALANCE");
      console.log(f);
      req.query.focusArea[f] = "BALANCE & REACH";
    }

    // if (req.query.mskCategory === "BEHAVIORAL") {
    //   req.query.mskCategory = "BEHAVIORAL HEALTH";
    // }
    var category = [];
    if (!Array.isArray(req.query.mskCategory)) {
      category = [req.query.mskCategory];
    } else if (req.query.mskCategory.length === 0) {
      category.push('ALL');
    } else if (req.query.mskCategory.length > 0) {
      category = req.query.mskCategory;
    }

    if (req.query.mskCategory.includes("BEHAVIORAL")) {
      let f = req.query.mskCategory.indexOf("BEHAVIORAL");
      console.log(f);
      req.query.mskCategory[f] = "BEHAVIORAL HEALTH";
    }
    // if (req.query.loginFlag == true) {
    //   organisationIds.push(req.query.id[0]);
    //   await organisationIdList(req.query.id[0]);
    //   req.query.id = organisationIds;
    //   organisationIds = [];
    // }
    console.log('grp', group, 'modified group', g, 'final input', req.query)
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      }
    } else if (startDate != "") {
      startDate = moment(req.query.startDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      endDate = moment(req.query.endDate, 'YYYY-MM-DD').format('MM/DD/YYYY');
      console.log("modified input format", startDate, endDate)
    }
    let referralCode = "";
    let logo = '';
    let organisationName = "";
    let organisationColor = "#642683";
    if (req.query.id.length > 0) {
      var referralDetails = await Organisation.findOne({ _id: ObjectId(req.query.id[0]) }, { code: 1, settings: 1, isMskEnabled: 1, "theme.color": 1, logo: 1, organisationName: 1, reportContact: 1, reportName: 1, reportLogo: 1, reportOrganisationName: 1 }).exec();
      organisationColor = referralDetails.theme.color;
      organisationName = referralDetails.organisationName;
      referralCode = referralDetails.code;
      logo = referralDetails.logo;
      if (referralDetails.reportLogo != '') {
        logo = referralDetails.reportLogo;
      }
    }
    let finalMptResult = [];
    if (type === 'today') {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();

    } else if (req.query.startDate != "") {
      console.log(startDate, endDate);
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
      // let convertdates = await util.convertDates(startDate, endDate);
      // startDate = convertdates.startDate;
      // endDate = convertdates.endDate;

    } else if (["3months", "1month", "7days"].includes(type)) {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();
    }
    let reportFinal = false;
    console.log('final dates', startDate, endDate, req.query, req.query.group);
    let result = [];
    let totalCount = 0;
    if (req.query.id.length === 0) {
      req.query.id[0] = "";
    }
    for (let i = 0; i < req.query.id.length; i++) {
      totalCount = totalCount + 1;
      if (category[0] === "ALL") {
        if (req.query.startDate == "") {
          if (req.query.id[i] != '' && referralDetails.isMskEnabled === true) {
            if (group === 'All') {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            } else {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            }
          } else if (req.query.id[i] == '') {
            if (req.query.focusArea[0] != "ALL")
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
              { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
              { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
            else
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } }
                , { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

          }
          console.log('no dates', result.length)
        } else {
          if (req.query.id[i] != '' && referralDetails.isMskEnabled === true) {
            if (group === 'All') {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, movementscore: 1, bmi: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.query.prolist } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, movementscore: 1, bmi: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.query.prolist } } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            } else {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
                  { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
                  {
                    $match: {
                      $or: [
                        { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.org_id": ObjectId(req.query.id[i]) },
                        { "mskresult.mskdate": { $exists: false } }
                      ]
                    }
                  }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, org_id: { "$first": "$mskresult.org_id" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, org_id: 1, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            }

          } else if (req.query.id[i] == '') {
            console.log('entered')
            if (req.query.focusArea[0] != "ALL")
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
              { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
              {
                $match: {
                  $or: [
                    { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                    { "mskresult.mskdate": { $exists: false } }
                  ]
                }
              }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
            else
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } },
              { $unwind: { path: "$mskresult", preserveNullAndEmptyArrays: true } },
              {
                $match: {
                  $or: [
                    { "mskresult.mskdate": { $exists: true }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } },
                    { "mskresult.mskdate": { $exists: false } }
                  ]
                }
              }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: { $ifNull: ["$mskdate", ""] }, bmi: { $ifNull: ["$bmi", 0] }, mskCategory: { $ifNull: ["$mskCategory", ""] }, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

          }
        }
      } else if (category[0] != "ALL" && category[0] != "NONE") {

        if (req.query.startDate == "") {
          if (req.query.id[i] != '' && referralDetails.isMskEnabled === true) {
            if (group === 'All') {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
                  { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
                  { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
                  { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } },
                  { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            } else {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, movementscore: 1, bmi: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, movementscore: 1, bmi: 1, mskCategory: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            }

          } else if (req.query.id[i] == '') {
            if (req.query.focusArea[0] != "ALL")
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
            else
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskCategory": { "$in": category } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

          }
        } else {
          if (req.query.id[i] != '' && referralDetails.isMskEnabled === true) {
            if (group === 'All') {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, bmi: 1, mskCategory: 1, focusarea: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            } else {
              if (req.query.focusArea[0] != "ALL") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
                else
                  result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
              }
            }

          } else if (req.query.id[i] == '') {
            if (req.query.focusArea[0] != "ALL")
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();
            else
              result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $sort: { "mskresult.mskdate": -1 } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskresult.mskdate" }, org_id: { "$first": "$mskresult.org_id" }, bmi: { "$first": "$mskresult.bmi" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": { "$in": category } } }, { $project: { email: 1, first: 1, last: 1, bmi: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { $sort: { first: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, movementscore: { "$first": "$result.movementscore" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, bmi: { "$first": "$bmi" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, focusarea: 1, bmi: 1, mskCategory: 1, movementscore: 1, mptdate: 1, _id: 0 } }]).exec();

          }
        }
      }
      if (Array.isArray(result))
        totalMSKCount = result.length;
      console.log("total msk count", result.length, req.query.id[i])
      if (result.length > 0) {
        let count = 0;
        for (let user of result) {
          count = count + 1;
          let obj = {};
          if (user.first === null) {
            user.last = '';
            user.first = '';
          }
          obj.pain = "N";
          obj.bmi = parseInt(user.bmi);
          obj.mskdate = await moment(user.mskdate).format('MM/DD/YYYY');
          //obj.mskCategory = await getHealthImage(user.mskCategory);
          obj.mskCategory = user.mskCategory;
          let referralDetails = await Organisation.findOne({ _id: user.org_id }, { organisationName: 1 }).exec();
          obj.group = referralDetails.organisationName;
          //obj.group = organisationName;
          //obj.email = user.email;
          let exercisesscore = 0;
          obj.name = user.first + " " + user.last;
          obj.focusArea = user.focusarea;
          for (let i = 0; i < 5; i++) {
            if (user.movementscore[i].score === 100) {
              exercisesscore = exercisesscore + 1;
            }
          }
          if (exercisesscore === 5) {
            obj.focusArea = 'NONE';
          }
          for (let i = 0; i < 5; i++) {
            if (user.movementscore[i].pain === "true") {
              obj.pain = "Y";
              break;
            }
          }
          finalMptResult.push(obj);
        }
      } else {
        var mptData = [];
        if (category[0] === "NONE" || ((req.query.id[i] != "" && referralDetails.isMskEnabled === false))) {
          if (req.query.id[i] != "") {
            if (group === "All") {

              if (req.query.startDate != "") {
                if (req.query.focusArea[0] != "ALL") {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                } else {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                }
              } else {
                if (req.query.focusArea[0] != "ALL") {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                } else {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                }
              }
            } else {

              if (req.query.startDate != "") {
                if (req.query.focusArea[0] != "ALL") {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                } else {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                }
              } else {
                if (req.query.focusArea[0] != "ALL") {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.query.focusArea }, "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.query.focusArea }, "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                } else {
                  if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0))
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                  else
                    mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
                }
              }
            }
          } else {

            if (req.query.startDate != "") {
              if (req.query.focusArea[0] != "ALL")
                mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
              else
                mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true }, "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
            } else {
              if (req.query.focusArea[0] != "ALL")
                mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { "$in": req.query.focusArea }, "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
              else
                mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $exists: true } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, height: { "$first": "$height" }, weight: { "$first": "$weight" }, weightUnit: { "$first": "$weightUnit" }, last: { "$first": "$last" }, movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1, first: 1, last: 1, height: 1, weight: 1, weightUnit: 1, org_id: 1 } }]).exec();
            }

          }
          console.log('only focus', mptData.length);
          if (mptData.length != 0) {
            mptData.forEach(user => {
              let obj = {};
              let exercisesscore = 0;
              if (user.first === null) {
                user.last = '';
                user.first = '';
              }
              obj.pain = 'N';
              obj.mskdate = "";
              obj.org_id = user.org_id;
              if (user.height === null) {
                obj.bmi = 0;
              } else {
                obj.bmi = (user.weightUnit === "kg" ? parseInt(user.weight) : (parseFloat(user.weight) * 0.453592)) / Math.pow(((parseInt((user.height.split("'")[0] * 12)) + parseInt(user.height.split("'")[1])) * 0.0254), 2);
              }
              obj.email = user._id;
              //obj.profileimage = user.profileimage;
              obj.name = user.first + " " + user.last;
              obj.mptdate = user.mptdate;
              obj.mskCategory = "";
              obj.group = organisationName;
              obj.focusArea = user.focus;
              for (let i = 0; i < 5; i++) {
                if (user.movementscore[i].score === 100) {
                  exercisesscore = exercisesscore + 1;
                }
              }
              if (exercisesscore === 5) {
                obj.focusArea = "NONE";
              }
              for (let i = 0; i < 5; i++) {
                if (user.movementscore[i].pain === true) {
                  obj.pain = 'Y';
                  break;
                }
              }
              finalMptResult.push(obj);
              // if (finalMptResult.length === mptData.length) {
              //   var fonts = {
              //     Roboto: {
              //       normal: 'fonts/Roboto-Regular.ttf',
              //       bold: 'fonts/Roboto-Medium.ttf',
              //       italics: 'fonts/Roboto-Italic.ttf',
              //       bolditalics: 'fonts/Roboto-MediumItalic.ttf'
              //     }
              //   };
              //   var printer = new pdfMakePrinter(fonts);
              //   var docDefinition = {
              //     content: [
              //       {
              //         layout: 'noBorders', // optional
              //         table: {
              //           // headers are automatically repeated if the table spans over multiple pages
              //           // you can declare how many rows should be treated as headers
              //           headerRows: 1,
              //           widths: ['*'],

              //           body: [
              //             [{
              //               fillColor: organisationColor,
              //               text: {
              //                 text: 'GROUP CATEGORY REPORT',
              //                 style: 'header'
              //               }
              //             }],
              //             [{
              //               columns:
              //                 [{
              //                   width: '*',
              //                   text: [
              //                     { text: 'ORGANIZATION NAME : ', style: 'label' },
              //                     { text: organisationName, style: 'value' }
              //                   ]
              //                 },
              //                 {
              //                   width: 100,
              //                   text: [
              //                     //{ text: moment(new Date()).format("DD/MM/YYYY hh:mm A"), style: 'date' }
              //                     { text: moment(new Date()).format('MM/DD/YYYY'), style: 'date' }
              //                   ]
              //                 }
              //                 ]
              //             }],
              //             [{
              //               text: [
              //                 { text: 'No OF USERS : ', style: 'label' },
              //                 { text: finalMptResult.length.toString(), style: 'value' }
              //               ]
              //             }],
              //             [
              //               {
              //                 svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
              //               }
              //             ],
              //             [{
              //               text: ' '
              //             }],
              //             [{
              //               text: req.query.mskCategory + ' CATEGORY',
              //               style: 'subheader'
              //             }],
              //             [
              //               {
              //                 svg: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
              //               }
              //             ],
              //             [{
              //               style: 'value',
              //               layout: 'headerLineOnly', // optional
              //               table: {
              //                 // headers are automatically repeated if the table spans over multiple pages
              //                 // you can declare how many rows should be treated as headers
              //                 headerRows: 1,
              //                 widths: [50, 50, 50, '*', 60, 50, 50, 90],
              //                 body: scoreCalculation(finalMptResult)
              //               }
              //             }],
              //           ]
              //         }
              //       }
              //     ],
              //     styles: {
              //       header: {
              //         fontSize: 18,
              //         bold: true,
              //         alignment: 'center',
              //         color: '#ffffff'
              //       },
              //       subheader: {
              //         fontSize: 15,
              //         color: organisationColor
              //       },
              //       quote: {
              //         italics: true
              //       },
              //       small: {
              //         fontSize: 8
              //       },
              //       label: {
              //         fontSize: 8,
              //         bold: true,
              //         color: organisationColor,
              //         margin: [0, 2]
              //       },
              //       value: {
              //         fontSize: 8,
              //         bold: true,
              //         margin: [0, 2]
              //       },
              //       date: {
              //         fontSize: 8,
              //         bold: true,
              //         alignment: 'right'
              //       },
              //       per: {
              //         fontSize: 8,
              //         margin: [5, 0]
              //       }
              //     }
              //   };
              //   res.setHeader('Content-Type', 'application/pdf');
              //   res.setHeader('Content-Disposition', 'attachment; filename=pdfmake.pdf');
              //   var pdfDoc = printer.createPdfKitDocument(docDefinition);
              //   pdfDoc.pipe(res);
              //   pdfDoc.end();
              // }
            })
          }
        }
        // else {
        //   return res.status(200).json({
        //     status: 200,
        //     message: 'Users Moveprint details',
        //     moveprintResult: []
        //   })
        // }
      }
      console.log('focus', req.query.id.length, totalCount);
      if (req.query.id.length > 0) {
        if (totalCount === req.query.id.length) {
          reportFinal = true;
        } else {
          reportFinal = false;
        }
      } else {
        reportFinal = true;
      }
      if (reportFinal === true) {
        var fonts = {
          Roboto: {
            // normal: 'fonts/Roboto-Regular.ttf',
            // bold: 'fonts/Roboto-Medium.ttf',
            // italics: 'fonts/Roboto-Italic.ttf',
            // bolditalics: 'fonts/Roboto-MediumItalic.ttf'
            normal: 'fonts/SukhumvitSet-Text.ttf',
            bold: 'fonts/SukhumvitSet-Bold.ttf',
            italics: 'fonts/HelveticaNeueItalic.ttf',
            bolditalics: 'fonts/Roboto-MediumItalic.ttf'
          }
        };
        var printer = new pdfMakePrinter(fonts);
        var docDefinition = {

          footer: [
            {
              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>',
              margin: [40, 0, 0, 0]
            },
            [{
              alignment: 'justify',
              columns: [
                {

                  svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                  width: 19.4,
                  height: 24.3,
                  margin: [40, 5, 0, 0],
                  alignment: 'left'
                },
                {

                  // text: [
                  //   {
                  svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                  width: 100,
                  height: 30,
                  margin: [45, 3, 0, 0],
                  alignment: 'left'
                }
              ]
            }
            ]
          ],
          content: [
            {
              layout: 'noBorders', // optional
              table: {
                // headers are automatically repeated if the table spans over multiple pages
                // you can declare how many rows should be treated as headers
                headerRows: 4,
                widths: ['*'],

                body: [
                  [
                    {
                      alignment: 'justify',
                      columns: [
                        {

                          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                          width: 19.4,
                          height: 24.3,
                          margin: [0, 5, 0, 0],
                          alignment: 'left'
                        },
                        {

                          // text: [
                          //   {
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                          width: 100,
                          height: 30,
                          margin: [5, 3, 0, 0],
                          alignment: 'left'
                          //text: '   moveprint',
                          // style: {
                          //   fontSize: 35,
                          //   //bold: true,
                          //   color: organisationColor,
                          //   margin: [0.5, 0, 0, 0],
                          //   alignment: 'left'
                          // }
                        },
                        {
                          text: 'Musculoskeletal Health Management',
                          width: 'auto',
                          italics: true,
                          margin: [13, 15, 13.5, 0],
                          style: {
                            fontSize: 11,
                            color: '#313133',
                            // margin: [13, 37, 13.5, 6]
                            //alignment: 'center'
                          }
                        }

                        //]
                        // }
                      ]
                    }
                  ],
                  [
                    {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                    }
                  ],
                  [
                    {
                      columns:
                        [
                          [{
                            text: [
                              { text: 'ORGANIZATION NAME: ', style: 'label' },
                              { text: organisationName + '\n', style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'GROUP:', style: 'label' },
                              { text: '                           N/A', style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'TOTAL USERS:', style: 'label' },
                              { text: '                ' + finalMptResult.length.toString(), style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'DATE:', style: 'label' },
                              //{ text: moment(new Date()).format('DD/MM/YYYY hh:mm A'), style: 'date' }
                              { bold: false, text: '                              ' + moment(new Date()).format('MM/DD/YYYY') + '\n', style: 'value' }
                            ]
                          }

                          ],
                          {
                            columns: [
                              logo != "" ? {
                                image: logo,
                                width: 100,
                                margin: [150, 10, 0, 0],
                                height: 47,
                              } : ""
                            ]
                          }
                        ]
                    }
                  ],
                  [
                    {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

                    }
                  ],
                  [{
                    text: 'ORGANIZATION SUMMARY',
                    bold: true,
                    fontSize: 10,
                    margin: [0, 13, 0, 5]
                  }],
                  [
                    {
                      text: 'The data below represents a breakdown of all your users and their current musculoskeletal health status. It displays the user’s MSK category, the organization they belong to, if they had pain during movement, current BMI, and Moveprint focus. Your organization can use this data to identify and monitor users in the high musculoskeletal risk categories and drive decision making regarding professional referrals.',
                      width: 270,
                      fontSize: 8,
                      color: '#707070',
                      margin: [2, 0, 0, 10]
                    }
                  ],

                  [{
                    style: 'value',
                    //layout: 'noBorders', // optional
                    table: {
                      // headers are automatically repeated if the table spans over multiple pages
                      // you can declare how many rows should be treated as headers
                      //headerRows: 0,
                      widths: [120, 110, 90, 75, 90],
                      body: mskTableResults(finalMptResult)
                    },
                    layout: {

                      hLineColor: function (i, node) {
                        return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
                      },
                      vLineColor: function (i, node) {
                        return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
                      }
                    }
                  }]
                ]
              }
            }
          ],
          styles: {
            header: {
              fontSize: 18,
              bold: true,
              alignment: 'center',
              color: '#ffffff'
            },
            subheader: {
              fontSize: 15,
              color: organisationColor
            },
            quote: {
              italics: true
            },
            small: {
              fontSize: 7,
              bold: true
            },
            label: {
              fontSize: 10,
              bold: true,
              color: '#414141',
              margin: [0, 2]
            },
            value: {
              fontSize: 10,
              color: '#414141',
              //bold: true,
              //margin: [0, 2]
            },
            date: {
              fontSize: 9,
              //bold: true,
              alignment: 'right'
            },
            per: {
              fontSize: 7,
              bold: true,
              alignment: 'left',
              color: '#959595',
              margin: [2, 4, 0, 3]
            }
          }
        };
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=category.pdf');
        var pdfDoc = printer.createPdfKitDocument(docDefinition);
        pdfDoc.pipe(res);
        pdfDoc.end();
        // .then(()=>{
        //   pdfDoc.end();
        // });
      }
    }
  },
  // groupMskReport: async (req, res) => {

  //   if (!["0", "3", "2"].includes(req.query.role_id)) {
  //     return res.status(210).json({
  //       status: 210,
  //       message: 'You are not Authorized'
  //     })
  //   }

  //   let mskDescription = {
  //     "HEALTH": "Your results indicate that you have underlying health issue that needs to be identified and treated by a healthcare professional.",
  //     "WELLNESS": "Your best opportunity for improvement is to focus on your MovePrint exercises and connect with a fitness and/or nutritional professional.\nYou can improve your health and wellness by focusing on your movement quality, physical activity and nutrition.",
  //     "FITNESS": "Your best opportunity for improvement is to focus on your MovePrint exercises and continue to increase your activity and fitness levels.",
  //     "PERFORMANCE": "Congratulations keep up the good work!\nTake this oppurtunity to establish specific goals to improve and enhance your performance. Continue to monitor your health and movement to ensure you mantain your category and performance levels.",
  //     "BEHAVIORAL HEALTH": "The results of this health screening process suggest you are in need of professional help from a qualified  behavioral  health specialist such as a clinical psychologist or counselor."
  //   };
  //   if (req.query.id != '') {
  //     var organisationSettings = await Organisation.findOne({ _id: ObjectId(req.query.id) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
  //     mskDescription = {
  //       "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
  //       "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
  //       "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
  //       "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
  //       "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
  //     };
  //   }
  //   const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
  //   let { type, startDate, endDate } = req.query;
  //   if (type === undefined && startDate == undefined && endDate == undefined) {
  //     type = "7days";
  //   } else if ((type === undefined || type === "undefined") && (startDate != undefined || startDate != "")) {
  //     type = "";
  //   }
  //   console.log('final dates', startDate, endDate, req.query);
  //   var group = '';
  //   let g = [];
  //   var finalMskData = [];
  //   var mskData = [];
  //   var result = [];
  //   if (req.query.group != undefined) {
  //     if (req.query.group[0] === '0' || req.query.group[0] === '-1' || req.query.group[0] === -1) {
  //       console.log('ent')
  //       group = 'All';
  //     } else {
  //       for (let i = 0; i < req.query.group.length; i++) {
  //         g.push(parseInt(req.query.group[i]))
  //       }
  //     }
  //   }
  //   if (type != "") {
  //     if (type === "7days") {
  //       console.log('in 7days');
  //       startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "1month") {
  //       console.log('in 1 month');
  //       startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "3months") {
  //       console.log('in 3 months');
  //       startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
  //       endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
  //     } else if (type === "today") {
  //       console.log('in today');
  //       endDate = moment().utc().format('MM/DD/YYYY');
  //       startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
  //     }
  //   } else if (req.query.startDate != "") {
  //     startDate = moment(req.query.startDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
  //     endDate = moment(req.query.endDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
  //     console.log('before', startDate, endDate)
  //   }

  //   if (type === 'today') {
  //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //     endDate = moment().utc().format();

  //   } else if (startDate != "") {
  //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //     endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
  //     // let convertdates = await util.convertDates(startDate, endDate);
  //     // startDate = convertdates.startDate;
  //     // endDate = convertdates.endDate;

  //   }
  //   // else {
  //   //     startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
  //   //     endDate = moment().utc().format();
  //   // }
  //   console.log("final", startDate, endDate);

  //   try {
  //     let referralCode = '';
  //     let organisationName = "";
  //     let organisationColor = "#642683";
  //     if (req.query.id != "") {
  //       var referralDetails = await Organisation.findOne({ _id: ObjectId(req.query.id) }, { code: 1, organisationName: 1, "theme.color": 1 }).exec();
  //       referralCode = referralDetails.code;
  //       organisationColor = referralDetails.theme.color;
  //       organisationName = referralDetails.organisationName;
  //     }
  //     console.log("grp", group, 'kk', req.query.group, 'ppp', g)

  //     if (req.query.id != '' && organisationSettings.isMskEnabled === true) {
  //       if (group === "All") {

  //         if (req.query.startDate != "") {

  //           var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

  //         } else {

  //           var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

  //         }
  //       } else {

  //         if (req.query.startDate != "") {

  //           var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

  //         } else {
  //           var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(req.query.id) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

  //         }
  //       }
  //     } else if (req.query.id === '') {

  //       if (req.query.startDate != "") {

  //         var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();


  //       } else {
  //         var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

  //       }
  //     }
  //     if (Array.isArray(result))
  //       totalMSKCount = await result.length;
  //     console.log('msk', totalMSKCount)
  //     // if ((req.query.id != '' && organisationSettings.isMskEnabled === true && result.length === 0) || (req.query.id === '' && result.length === 0)) {
  //     //   return res.status(200).json({
  //     //     status: 200,
  //     //     message: 'No users were present for this group'
  //     //   })
  //     // }
  //     if (result.length > 0) {
  //       if (req.query.id != '' && organisationSettings.isMskEnabled === true) {
  //         if (group === "All") {

  //           if (req.query.startDate != "") {
  //             var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();


  //           } else {

  //             var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

  //           }
  //         } else {

  //           if (req.query.startDate != "") {

  //             var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

  //           } else {
  //             var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  //           }
  //         }
  //       } else if (req.query.id === '') {

  //         if (req.query.startDate != "") {
  //           var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();


  //         } else {
  //           var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

  //         }

  //       }
  //     }
  //     // if ((req.query.id != '' && organisationSettings.isMskEnabled === true && mskData.length === 0) || (req.query.id == '' && mskData.length === 0)) {
  //     //   return res.status(200).json({
  //     //     status: 200,
  //     //     message: 'No users were present for this group',
  //     //     name: name,
  //     //     mskdata: [],
  //     //     moveprintdata: [],
  //     //     profileimage: profileImage,
  //     //     referralCode: referralCode,
  //     //     proCode: proCode
  //     //   })
  //     // }
  //     if (mskData.length > 0) {
  //       let categoryExists = false;
  //       for (var i = 0; i < mskCategories.length; i++) {
  //         for (var categoryData of mskData) {
  //           if (mskCategories[i] === categoryData.category) {
  //             categoryData.description = mskDescription[categoryData.category];
  //             categoryExists = true;
  //             break;
  //           }
  //         }
  //         if (!categoryExists) {
  //           mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0, "description": mskDescription[mskCategories[i]] })
  //         }
  //         categoryExists = false;
  //       }

  //       finalMskData[0] = {};
  //       finalMskData[0].count = 0;
  //       finalMskData[0].percentage = 0;
  //       for (let j = 0; j <= 4; j++) {
  //         if (mskData[j].category === "HEALTH") {
  //           finalMskData[0].category = "HEALTH";
  //           finalMskData[0].count = finalMskData[0].count + mskData[j].count;
  //           finalMskData[0].percentage = finalMskData[0].percentage + mskData[j].percentage;
  //           finalMskData[0].description = mskDescription["HEALTH"];
  //         } else if (mskData[j].category === "PERFORMANCE") {
  //           finalMskData[3] = mskData[j];
  //         } else if (mskData[j].category === "WELLNESS") {
  //           finalMskData[1] = mskData[j];
  //         } else if (mskData[j].category === "FITNESS") {
  //           finalMskData[2] = mskData[j];
  //         } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
  //           finalMskData[0].count = finalMskData[0].count + mskData[j].count;
  //           finalMskData[0].percentage = finalMskData[0].percentage + mskData[j].percentage;
  //           finalMskData[0].description = mskDescription["HEALTH"];
  //           finalMskData[0].category = "HEALTH";
  //         }
  //       }
  //     } else {
  //       finalMskData = [
  //         {
  //           "count": 0,
  //           "percentage": 0,
  //           "category": "HEALTH",
  //           "description": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
  //         },
  //         {
  //           "count": 0,
  //           "category": "WELLNESS",
  //           "percentage": 0,
  //           "description": "Individuals in this category have certain areas of their overall health and wellness that will be best served by seeking advice from a fitness or health professional. They should focus on completing their daily MovePrint exercises and recommendations, while avoiding avoid certain higher levels of activity until they progress out of this category."
  //         },
  //         {
  //           "count": 0,
  //           "category": "FITNESS",
  //           "percentage": 0,
  //           "description": "Individuals need to complete their daily Moveprint exercises and follow their next steps suggestions. If they are already actively pursuing fitness, then it is recommended they continue and re-check Moveprint to keep them on track."
  //         },
  //         {
  //           "count": 0,
  //           "category": "PERFORMANCE",
  //           "percentage": 0,
  //           "description": "Individuals in this category can optimize their performance and continue what they are doing. Use Moveprint to actively check movement quality to gauge how current activity, lifestyle or job requirements affect movement."
  //         }
  //       ]
  //     }
  //     console.log('updated', finalMskData);

  //     if (req.query.id != "") {
  //       if (group === "All") {

  //         if (req.query.startDate != "") {
  //           var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();


  //         } else {

  //           var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

  //         }
  //       } else {

  //         if (req.query.startDate != "") {

  //           var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

  //         } else {
  //           var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  //         }
  //       }
  //     } else {

  //       if (req.query.startDate != "") {
  //         var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  //       } else {
  //         var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

  //       }

  //     }
  //     totalMoveprintCount = MpUser.length;
  //     console.log('mp count', totalMoveprintCount);
  //     if (MpUser.length > 0) {
  //       if (req.query.id != "") {
  //         if (group === "All") {

  //           if (req.query.startDate != "") {
  //             var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();


  //           } else {
  //             var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

  //           }
  //         } else {
  //           if (req.query.startDate != "") {
  //             var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

  //           } else {
  //             var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

  //           }
  //         }
  //       } else {

  //         if (req.query.startDate != "") {
  //           var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

  //         } else {
  //           var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

  //         }

  //       }
  //     } else {
  //       mptData = [
  //         {
  //           "score": 0,
  //           "title": "TOE TOUCH TEST",
  //           "percentage": 0
  //         },
  //         {
  //           "score": 0,
  //           "title": "UPPER BODY MOBILITY TEST",
  //           "percentage": 0
  //         },
  //         {
  //           "score": 0,
  //           "title": "ROTATION TEST",
  //           "percentage": 0
  //         },
  //         {
  //           "score": 0,
  //           "title": "SQUAT TEST",
  //           "percentage": 0
  //         },
  //         {
  //           "score": 0,
  //           "title": "BALANCE & REACH TEST",
  //           "percentage": 0
  //         }
  //       ]
  //     }

  //     if (Array.isArray(mptData))
  //       console.log('mp', mptData)
  //     function setProgress(per) {
  //       return '<svg viewBox="0 0 458.751 15.391" width="458.751" height="15.391" xmlns="http://www.w3.org/2000/svg"> <rect width="100%" height="10" rx="5"  fill="#e6e7e8"/><rect x="0" width="' + per + '%" height="10" rx="5" fill="' + organisationColor + '" /></svg>'
  //     }
  //     var fonts = {
  //       Roboto: {
  //         normal: 'fonts/Roboto-Regular.ttf',
  //         bold: 'fonts/Roboto-Medium.ttf',
  //         italics: 'fonts/Roboto-Italic.ttf',
  //         bolditalics: 'fonts/Roboto-MediumItalic.ttf'
  //       }
  //     };

  //     //var PdfPrinter = require('pdfmake');
  //     var printer = new pdfMakePrinter(fonts);
  //     var docDefinition = {
  //       content: [
  //         {
  //           layout: 'noBorders', // optional
  //           table: {
  //             // headers are automatically repeated if the table spans over multiple pages
  //             // you can declare how many rows should be treated as headers
  //             headerRows: 1,
  //             widths: ['*'],

  //             body: [
  //               [{
  //                 fillColor: organisationColor,
  //                 text: {
  //                   text: 'AGGREGATE MSK REPORT',
  //                   style: 'header'
  //                 }
  //               }],

  //               [{
  //                 columns:
  //                   [{
  //                     width: '*',
  //                     text: [
  //                       { text: 'ORGANIZATION NAME:  ', style: 'label' },
  //                       { text: organisationName, style: 'value' }
  //                     ]
  //                   },
  //                   {
  //                     width: 100,
  //                     text: [
  //                       //{ text: moment(new Date()).format('DD/MM/YYYY hh:mm A'), style: 'date' }
  //                       { text: moment(new Date()).format('MM/DD/YYYY'), style: 'date' }
  //                     ]
  //                   }
  //                   ]
  //               }],
  //               [{
  //                 text: ''
  //               }],
  //               [{
  //                 text: [
  //                   { text: 'No OF USERS:  ', style: 'label' },
  //                   { text: (result.length > 0) ? totalMSKCount : totalMoveprintCount, style: 'value' }
  //                 ]
  //               }],

  //               [
  //                 {
  //                   svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                 }
  //               ],
  //               ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ? [{
  //                 text: ' '
  //               }] : [{
  //                 text: ''
  //               }],
  //               ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ? [{
  //                 text: 'GROUP MSK REPORT',
  //                 style: 'subheader'
  //               }] : [{
  //                 text: ''
  //               }],
  //               ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ? [
  //                 {
  //                   svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                 }
  //               ] : [{
  //                 text: ''
  //               }],
  //               ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ? [{
  //                 text: ' '
  //               }] : [{
  //                 text: ''
  //               }],
  //               // [{
  //               // 	columns: [
  //               // 		{
  //               // 			width: 200,
  //               // 			svg: generateDonutChart(finalMskData[0].percentage, finalMskData[3].percentage, finalMskData[1].percentage, finalMskData[2].percentage)

  //               // 		},
  //               // 		[
  //               // 			{
  //               // 				columns: [
  //               // 					{
  //               // 						margin: [15, 10, 0, 0], text: '      ' + finalMskData[0].count + '(' + parseInt(finalMskData[0].percentage) + '%)', bold: true, color: '#EE93A1'
  //               // 					},
  //               // 					{ margin: [5, 10, 0, 0], text: '    ' + finalMskData[1].count + '(' + parseInt(finalMskData[1].percentage) + '%)', bold: true, color: '#FBC698' },
  //               // 					{ margin: [5, 10, 0, 0], text: '    ' + finalMskData[2].count + '(' + parseInt(finalMskData[2].percentage) + '%)', bold: true, color: '#FCD783' },
  //               // 					{ margin: [0, 10, 0, 0], text: ' ' + finalMskData[3].count + '(' + parseInt(finalMskData[3].percentage) + '%)', bold: true, color: '#BED6A7' }
  //               // 				]
  //               // 			},
  //               // 			{
  //               // 				margin: [15, 20, 0, 0],
  //               // 				svg: '<svg xmlns="http://www.w3.org/2000/svg" width="316" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

  //               // 			},
  //               // 			{
  //               // 				columns: [
  //               // 					{ margin: [15, 20, 0, 0], text: '   HEALTH ', bold: true,	fontSize: 11 },
  //               // 					{ margin: [2, 20, 0, 0], text: 'WELLNESS', bold: true,	fontSize: 11 },
  //               // 					{ margin: [2, 20, 0, 0], text: 'FITNESS', bold: true,	fontSize: 11 },
  //               // 					{ margin: [0, 20, 0, 0], text: 'PERFORMANCE', bold: true,	fontSize: 11 }
  //               // 				]
  //               // 			}
  //               // 		]
  //               // 	]
  //               // }],
  //               ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ? [
  //                 {
  //                   layout: 'noBorders',
  //                   table: {
  //                     headerRows: 0,
  //                     widths: [250, '*'],
  //                     body: [
  //                       [{
  //                         svg: generateDonutChart(finalMskData[0].percentage, finalMskData[3].percentage, finalMskData[1].percentage, finalMskData[2].percentage),

  //                         rowSpan: 4
  //                       },
  //                       [{
  //                         margin: [15, 10, 0, 0],
  //                         text: [
  //                           {
  //                             text: '      ' + finalMskData[0].count + ' (' + Math.round(parseFloat(finalMskData[0].percentage)) + '%)',
  //                             bold: true, color: '#EE93A1'
  //                           },
  //                           { text: (Math.round(parseFloat(finalMskData[0].percentage)).toString().length === 2 ? '            HEALTH CATEGORY' : (Math.round(parseFloat(finalMskData[0].percentage)).toString().length === 1 ? '              HEALTH CATEGORY' : '         HEALTH CATEGORY')), bold: true }
  //                         ]
  //                       },
  //                       {
  //                         text: ' '
  //                       },
  //                       {
  //                         svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

  //                       },
  //                       {
  //                         text: ' '
  //                       }
  //                       ]
  //                       ],
  //                       [
  //                         {
  //                           text: ' ',
  //                           rowSpan: 4
  //                         },
  //                         [{
  //                           margin: [15, 0, 0, 0],
  //                           text: [
  //                             { text: '      ' + finalMskData[1].count + ' (' + Math.round(parseFloat(finalMskData[1].percentage)) + '%)', bold: true, color: '#FBC698' },
  //                             { text: (Math.round(parseFloat(finalMskData[1].percentage)).toString().length === 2 ? '           WELLNESS CATEGORY' : (Math.round(parseFloat(finalMskData[1].percentage)).toString().length === 1 ? '             WELLNESS CATEGORY' : '        WELLNESS CATEGORY')), bold: true }
  //                           ]
  //                         },
  //                         {
  //                           text: ' '
  //                         },
  //                         {
  //                           svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

  //                         },
  //                         {
  //                           text: ' '
  //                         }
  //                         ],
  //                       ],
  //                       [
  //                         {
  //                           text: ' ',
  //                           rowSpan: 4
  //                         },
  //                         [{
  //                           margin: [15, 0, 0, 0],
  //                           text: [
  //                             { text: '      ' + finalMskData[2].count + ' (' + Math.round(parseFloat(finalMskData[2].percentage)) + '%)', bold: true, color: '#FCD783' },
  //                             { text: (Math.round(parseFloat(finalMskData[2].percentage)).toString().length === 2 ? '            FITNESS CATEGORY' : (Math.round(parseFloat(finalMskData[2].percentage)).toString().length === 1 ? '             FITNESS CATEGORY' : '            FITNESS CATEGORY')), bold: true }
  //                           ]
  //                         },
  //                         {
  //                           text: ' '
  //                         },
  //                         {
  //                           svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

  //                         },
  //                         {
  //                           text: ' '
  //                         }
  //                         ]
  //                       ]
  //                       ,
  //                       [
  //                         {
  //                           text: ' ',
  //                           rowSpan: 4
  //                         },
  //                         [{
  //                           margin: [15, 0, 0, 10],
  //                           text: [
  //                             { text: '      ' + finalMskData[3].count + ' (' + Math.round(parseFloat(finalMskData[3].percentage)) + '%)', bold: true, color: '#BED6A7' },
  //                             { text: (Math.round(parseFloat(finalMskData[3].percentage)).toString().length === 2 ? '           PERFORMANCE CATEGORY' : (Math.round(parseFloat(finalMskData[3].percentage)).toString().length === 1 ? '            PERFORMANCE CATEGORY' : '        PERFORMANCE CATEGORY')), bold: true }
  //                           ]
  //                         },
  //                         {
  //                           text: ' '
  //                         },
  //                         {
  //                           svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                         },
  //                         {
  //                           text: ' '
  //                         }]
  //                       ]
  //                     ]
  //                   }
  //                 }
  //               ] : [{
  //                 text: ''
  //               }],
  //               [{
  //                 text: ' '
  //               }],
  //               [{
  //                 text: 'GROUP MOVEPRINT REPORT',
  //                 style: 'subheader'
  //               }],
  //               [
  //                 {
  //                   svg: '<svg xmlns="http://www.w3.org/2000/svg" width="532.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
  //                 }
  //               ],
  //               [{ text: 'TOE TOUCH', style: 'value' }],
  //               [{
  //                 columns: [{
  //                   svg: setProgress(parseInt(mptData[0].percentage)),
  //                   width: 450
  //                 },
  //                 { text: Math.round(parseFloat(mptData[0].percentage)) + '%', style: 'per' }
  //                 ]
  //               }],
  //               [{ text: 'UPPER BODY MOBILITY', style: 'value' }],
  //               [{
  //                 columns: [{
  //                   svg: setProgress(parseInt(mptData[1].percentage)),
  //                   width: 450
  //                 },
  //                 { text: Math.round(parseFloat(mptData[1].percentage)) + '%', style: 'per' }
  //                 ]
  //               }],
  //               [{ text: 'ROTATION', style: 'value' }],
  //               [{
  //                 columns: [{
  //                   svg: setProgress(mptData[2].percentage),
  //                   width: 450
  //                 },
  //                 { text: Math.round(parseFloat(mptData[2].percentage)) + '%', style: 'per' }
  //                 ]
  //               }],
  //               [{ text: 'SQUAT', style: 'value' }],
  //               [{
  //                 columns: [{
  //                   svg: setProgress(mptData[3].percentage),
  //                   width: 450
  //                 },
  //                 { text: Math.round(parseFloat(mptData[3].percentage)) + '%', style: 'per' }
  //                 ]
  //               }],
  //               [{ text: 'BALANCE & REACH', style: 'value' }],
  //               [{
  //                 columns: [{
  //                   svg: setProgress(mptData[4].percentage),
  //                   width: 450
  //                 },
  //                 { text: Math.round(parseFloat(mptData[4].percentage)) + '%', style: 'per' }
  //                 ]
  //               }]
  //             ]
  //           }
  //         }
  //       ],
  //       styles: {
  //         header: {
  //           fontSize: 18,
  //           bold: true,
  //           alignment: 'center',
  //           color: '#ffffff'
  //         },
  //         subheader: {
  //           fontSize: 15,
  //           color: organisationColor
  //         },
  //         quote: {
  //           italics: true
  //         },
  //         small: {
  //           fontSize: 8
  //         },
  //         label: {
  //           fontSize: 8,
  //           bold: true,
  //           color: organisationColor,
  //           margin: [0, 2]
  //         },
  //         value: {
  //           fontSize: 8,
  //           bold: true,
  //           margin: [0, 2]
  //         },
  //         date: {
  //           fontSize: 8,
  //           bold: true,
  //           alignment: 'right'
  //         },
  //         per: {
  //           fontSize: 8,
  //           margin: [5, 0]
  //         }
  //       }
  //     };
  //     res.setHeader('Content-Type', 'application/pdf');
  //     res.setHeader('Content-Disposition', 'attachment; filename=pdfmake.pdf');
  //     var pdfDoc = printer.createPdfKitDocument(docDefinition);
  //     pdfDoc.pipe(res);
  //     pdfDoc.end();

  //   } catch (e) {
  //     return res.status(210).json({
  //       status: 210,
  //       message: e
  //     })
  //   }
  // },
  getReportCustomization: (req, res) => {
    if (!["0", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }

    Organisation.findOne({ _id: req.body.id }, { _id: 0, reportLogo: 1, reportOrganisationName: 1, reportName: 1, reportContact: 1 }, (err, reportdetails) => {
      if (err) {
        return res.status(210).json({
          status: 210,
          message: 'Report Details',
          data: err
        })
      } else {

        return res.status(200).json({
          status: 200,
          message: 'Report Details',
          data: reportdetails
        })
      }
    })
  },
  updateReportCustomization: async (req, res) => {
    if (!["0", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    Organisation.updateOne({ _id: req.body.id }, { $set: { reportLogo: req.body.reportLogo, reportOrganisationName: req.body.reportOrganisationName, reportName: req.body.reportName, reportContact: req.body.reportContact } }, (err, updatedreportdetails) => {
      if (err) {
        return res.status(210).json({
          status: 210,
          message: 'Report Details'
        })
      } else {

        return res.status(200).json({
          status: 200,
          message: 'Report details updated successfully'
        })
      }
    })
  },
  groupOrganisationData: async (req, res) => {
    console.log("group org data", req.body)
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    organisationIds.push(req.body.id);
    await organisationIdList(req.body.id);
    const combinedOutput = {
      "id": "",
      "organisationName": "",
      "parentOrgId": "",
      "mskdata": [
        {
          "count": 0,
          "percentage": 0,
          "category": "HEALTH"
        },
        {
          "count": 0,
          "category": "WELLNESS",
          "percentage": 0
        },
        {
          "count": 0,
          "category": "FITNESS",
          "percentage": 0
        },
        {
          "count": 0,
          "category": "PERFORMANCE",
          "percentage": 0
        }
      ],
      "mptdata": [
        {
          "score": 0,
          "title": "TOE TOUCH TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "UPPER BODY MOBILITY TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "ROTATION TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "SQUAT TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "BALANCE & REACH TEST",
          "percentage": 0
        }
      ]
    };
    console.log("org id", organisationIds)
    if (organisationIds.length > 0) {
      var organisationSettings = await Organisation.findOne({ _id: ObjectId(organisationIds[0]) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
      var mskDescription = {
        "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
        "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
        "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
        "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
        "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
      };
    }
    const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
    let { type, startDate, endDate } = req.body;
    if (type === undefined && startDate == undefined && endDate == undefined) {
      type = "7days";
    } else if ((type === undefined || type === "undefined") && (startDate != undefined || startDate != "")) {
      type = "";
    }
    console.log('final dates', startDate, endDate);
    var group = '';
    let g = [];
    var finalMskData = [];
    var finalJson = [];
    var mskData = [];
    var result = [];
    if (req.body.group != undefined) {
      if (req.body.group[0] === '0' || req.body.group[0] === '-1' || req.body.group[0] === -1) {
        console.log('ent')
        group = 'All';
      } else {
        for (let i = 0; i < req.body.group.length; i++) {
          g.push(parseInt(req.body.group[i]))
        }
      }
    }
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      } else if (type === "1year") {
        console.log('in 1year');
        startDate = moment().utc().subtract(1, 'year').startOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().endOf('day').format('MM/DD/YYYY');
      }
    } else if (req.body.startDate != "") {
      startDate = moment(req.body.startDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
      endDate = moment(req.body.endDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
      console.log('before', startDate, endDate)
    }

    if (type === 'today') {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();

    } else if (startDate != "") {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();

    }

    console.log("final", startDate, endDate, organisationIds[0]);

    try {
      let referralCode = '';
      let organisationName = "";
      let organisationColor = "#642683";
      console.log("grp", group, 'kk', req.body.group, 'ppp', g)
      for (let i = 0; i < organisationIds.length; i++) {
        finalMskData = [];
        mskData = [];
        result = [];
        var parent_org = await Organisation.findOne({ _id: ObjectId(organisationIds[i]) }, { parentOrgId: 1, organisationName: 1 }).exec();
        var compliance = await User.find({ "roles.role_id": "1", "roles.org_id": ObjectId(organisationIds[i]) }).countDocuments();
        if (organisationIds[i] != '' && organisationSettings.isMskEnabled === true) {
          if (group === "All") {

            if (req.body.startDate != "") {

              var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

            } else {

              var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

            }
          } else {

            if (req.body.startDate != "") {

              var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

            } else {
              var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(organisationIds[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

            }
          }
        } else if (organisationIds[i] === '') {

          if (req.body.startDate != "") {

            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();


          } else {
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

          }
        }
        if (Array.isArray(result))
          totalMSKCount = await result.length;
        console.log('msk', totalMSKCount)
        if (result.length > 0) {
          if (organisationIds[i] != '' && organisationSettings.isMskEnabled === true) {
            if (group === "All") {

              if (req.body.startDate != "") {
                var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();


              } else {

                var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

              }
            } else {

              if (req.body.startDate != "") {

                var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

              } else {
                var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(organisationIds[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
              }
            }
          } else if (organisationIds[i] === '') {

            if (req.body.startDate != "") {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();


            } else {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

            }

          }
        }
        if (mskData.length > 0) {
          let categoryExists = false;
          for (let i = 0; i < mskCategories.length; i++) {
            for (var categoryData of mskData) {
              if (mskCategories[i] === categoryData.category) {
                //categoryData.description = mskDescription[categoryData.category];
                categoryExists = true;
                break;
              }
            }
            if (!categoryExists) {
              mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0 })
            }
            categoryExists = false;
          }

          finalMskData[0] = {};
          finalMskData[0].count = 0;
          finalMskData[0].percentage = 0;
          for (let j = 0; j <= 4; j++) {
            if (mskData[j].category === "HEALTH") {
              finalMskData[0].category = "HEALTH";
              finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              // finalMskData[0].description = mskDescription["HEALTH"];
            } else if (mskData[j].category === "PERFORMANCE") {
              finalMskData[3] = mskData[j];
              finalMskData[3].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "WELLNESS") {
              finalMskData[1] = mskData[j];
              finalMskData[1].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "FITNESS") {
              finalMskData[2] = mskData[j];
              finalMskData[2].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
              finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              //finalMskData[0].description = mskDescription["HEALTH"];
              finalMskData[0].category = "HEALTH";
            }
          }
        } else {
          finalMskData = [
            {
              "count": 0,
              "percentage": 0,
              "category": "HEALTH"
            },
            {
              "count": 0,
              "category": "WELLNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "FITNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "PERFORMANCE",
              "percentage": 0
            }
          ]
        }
        console.log('updated', finalMskData);

        if (organisationIds[i] != "") {
          if (group === "All") {

            if (req.body.startDate != "") {
              var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();


            } else {

              var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

            }
          } else {

            if (req.body.startDate != "") {

              var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

            } else {
              var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            }
          }
        } else {

          if (req.body.startDate != "") {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
          } else {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

          }

        }
        totalMoveprintCount = MpUser.length;
        console.log('mp count', totalMoveprintCount);
        if (MpUser.length > 0) {
          if (organisationIds[i] != "") {
            if (group === "All") {

              if (req.body.startDate != "") {
                var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              } else {
                var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              }
            } else {
              if (req.body.startDate != "") {
                var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              } else {
                var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(organisationIds[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(organisationIds[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

              }
            }
          } else {

            if (req.body.startDate != "") {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

            } else {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();

            }

          }
        } else {
          mptData = [
            {
              "score": 0,
              "title": "TOE TOUCH TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "UPPER BODY MOBILITY TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "ROTATION TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "SQUAT TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "BALANCE & REACH TEST",
              "percentage": 0
            }
          ]
        }
        console.log(parent_org.organisationName, result.length, compliance)
        finalJson.push({
          "id": organisationIds[i],
          "organisationName": parent_org.organisationName,
          "parentOrgId": parent_org.parentOrgId,
          "mskdata": finalMskData,
          compliance: (compliance != 0) ? ((result.length * 100) / compliance) : 0,
          "mptdata": mptData.slice(0, 5)
        })
        // if (parent_org.parentOrgId === "NA") {
        //   combinedOutput.id = organisationIds[i];
        //   combinedOutput.organisationName = parent_org.organisationName;
        //   combinedOutput.parentOrgId = "";
        // }
        // combinedOutput.mskdata[0].count = combinedOutput.mskdata[0].count + finalMskData[0].count;
        // combinedOutput.mskdata[1].count = combinedOutput.mskdata[1].count + finalMskData[1].count;
        // combinedOutput.mskdata[2].count = combinedOutput.mskdata[2].count + finalMskData[2].count;
        // combinedOutput.mskdata[3].count = combinedOutput.mskdata[3].count + finalMskData[3].count;
        // // combinedOutput.mskdata[4].count = combinedOutput.mskdata[4].count + finalMskData[4].count;
        // combinedOutput.mskdata[0].percentage = combinedOutput.mskdata[0].percentage + finalMskData[0].percentage;
        // combinedOutput.mskdata[1].percentage = combinedOutput.mskdata[1].percentage + finalMskData[1].percentage;
        // combinedOutput.mskdata[2].percentage = combinedOutput.mskdata[2].percentage + finalMskData[2].percentage;
        // combinedOutput.mskdata[3].percentage = combinedOutput.mskdata[3].percentage + finalMskData[3].percentage;
        // // combinedOutput.mskdata[4].percentage = combinedOutput.mskdata[4].percentage + finalMskData[4].percentage;
        // combinedOutput.mptdata[0].percentage = combinedOutput.mptdata[0].percentage + mptData[0].percentage;
        // combinedOutput.mptdata[1].percentage = combinedOutput.mptdata[1].percentage + mptData[1].percentage;
        // combinedOutput.mptdata[2].percentage = combinedOutput.mptdata[2].percentage + mptData[2].percentage;
        // combinedOutput.mptdata[3].percentage = combinedOutput.mptdata[3].percentage + mptData[3].percentage;
        // // combinedOutput.mptdata[4].percentage = combinedOutput.mptdata[4].percentage + mptData[4].percentage;
      }
      console.log(result.length, compliance)
      if (finalJson.length === organisationIds.length) {
        organisationIds = [];
        return res.status(200).json({
          status: 200,
          message: "Organisation Report results",
          finalData: finalJson,
          combinedop: combinedOutput
        })
      }
    } catch (e) {
      return res.status(210).json({
        status: 210,
        message: "Organisation Report results",
        finalData: e,
      })
    }
  },
  groupMskReport: async (req, res) => {
    if (!["0", "3", "2"].includes(req.query.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    console.log(' before parsed ', req.query)
    let df = JSON.parse(req.query.params)
    console.log('parsed content', df, df.id, df.group)
    let root_org_exists = false;
    req.query.id = df.id;
    req.query.group = df.group;
    req.query.prolist = df.prolist;
    console.log('query params');
    var mskDescription = {
      "HEALTH": "Users in this category exhibit multiple or significant musculoskeletal health risk factors and need to seek a professional referral to a healthcare provider or a behavioral health specialist.  ",
      "WELLNESS": "Users in this category exhibit manageable musculoskeletal health risk factors and may need to be under the supervision of fitness, healthcare or nutritional specialists while improving their movement quality.",
      "FITNESS": "Users in this category exhibit minimal musculoskeletal health risk factors, do not currently require professional guidance and should follow Moveprint suggestions to progress toward individualized goals. ",
      "PERFORMANCE": "Users in this category exhibit no current musculoskeletal health risk factors and should be encouraged to continue to monitor their health and wellness. ",
      "BEHAVIORAL HEALTH": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
    }
    async function orgResult(inputjson) {
      let r = [];
      r.push([]);
      for (let i = 0; i < inputjson.length; i++) {
        console.log(inputjson[i].organisationName, inputjson[i].parentOrgId)
        if (inputjson[i].parentOrgId != "NA") {
          r[0].push([{
            //layout: 'noBorders',
            layout: {
              hLineColor: function (i, node) {
                return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
              },
              vLineColor: function (i, node) {
                return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
              }
            },
            table: {
              widths: [150, 66, 66, 66, 66, 58],
              heights: [19, 25],
              body: [
                [{ text: inputjson[i].organisationName.toUpperCase(), border: [true, true, true, false], margin: [3, 15, 0, 0], alignment: 'left', fillColor: '#f9f9f9', bold: true, fontSize: 8 }, { text: Math.round(inputjson[i].mskdata[4].percentage) + '%', margin: [0, 10, 0, 5], border: [true, true, true, true], fillColor: "#f9f9f9", style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[0].percentage) + '%', border: [true, true, true, true], margin: [0, 10, 0, 5], fillColor: "#f9f9f9", style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[1].percentage) + '%', fillColor: "#f9f9f9", border: [true, true, true, true], margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[2].percentage) + '%', border: [true, true, true, true], fillColor: "#f9f9f9", margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[3].percentage) + '%', fillColor: "#f9f9f9", border: [true, true, true, true], margin: [0, 10, 0, 5], style: 'tablerow' }],


                [{ fillColor: '#f9f9f9', margin: [0, 6, 0, 5], border: [true, false, true, true], text: [{ text: 'USERS  ', fontSize: 7, color: '#959595', alignment: 'right', bold: true }, { text: inputjson[i].totalUsers, style: 'userdata' }] }, { text: inputjson[i].mskdata[4].count, margin: [0, 10, 0, 5], style: 'healthdata' }, { text: inputjson[i].mskdata[0].count, margin: [0, 10, 0, 5], style: 'healthdata' }, { text: inputjson[i].mskdata[1].count, margin: [0, 10, 0, 5], style: 'wellnessdata' }, { text: inputjson[i].mskdata[2].count, margin: [0, 10, 0, 5], style: 'fitnessdata' }, { text: inputjson[i].mskdata[3].count, margin: [0, 10, 0, 5], style: 'performancedata' }]
              ]
            }
          }]);
          r[0].push([{ text: '\n' }]);
        }
      }
      console.log("r")
      return r;
    }
    var combinedOutput = {
      "id": "",
      "organisationName": "",
      "parentOrgId": "",
      "logo": "",
      "mskdata": [
        {
          "count": 0,
          "percentage": 0,
          "category": "HEALTH"
        },
        {
          "count": 0,
          "category": "WELLNESS",
          "percentage": 0
        },
        {
          "count": 0,
          "category": "FITNESS",
          "percentage": 0
        },
        {
          "count": 0,
          "category": "PERFORMANCE",
          "percentage": 0
        }
      ],
      "mptdata": [
        {
          "score": 0,
          "title": "TOE TOUCH TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "UPPER BODY MOBILITY TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "ROTATION TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "SQUAT TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "BALANCE & REACH TEST",
          "percentage": 0
        }
      ]
    };
    let logo = '';
    let inputOrgLength = false;
    if (req.query.id.length > 0) {
      inputOrgLength = true;
      var organisationSettings = await Organisation.findOne({ _id: ObjectId(req.query.id[0]) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, "theme.color": 1, logo: 1, organisationName: 1, categoryDescription: 1, reportContact: 1, reportName: 1, reportLogo: 1, reportOrganisationName: 1 }).exec();
      organisationColor = organisationSettings.theme.color;
      logo = organisationSettings.logo;
      if (organisationSettings.reportLogo != '') {
        logo = organisationSettings.reportLogo;
      }
      mskDescription = {
        "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
        "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
        "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
        "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
        "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
      };
    }
    const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
    let { type, startDate, endDate } = req.query;
    if (type === undefined && startDate == undefined && endDate == undefined) {
      type = "7days";
    } else if ((type === undefined || type === "undefined") && (startDate != undefined || startDate != "")) {
      type = "";
    }
    console.log('final dates', startDate, endDate);
    var group = '';
    let g = [];
    var finalMskData = [];
    var finalJson = [];
    var mskData = [];
    var result = [];
    let focusArray = {
      'TOE TOUCH': 0,
      'UPPER BODY MOBILITY': 0,
      'ROTATION': 0,
      'SQUAT': 0,
      'BALANCE & REACH': 0,
      'SHOULDER CLEARING': 0,
      'SPINE CLEARING': 0,
      'SYMMETRY': 0,
      'PAIN FLOW': 0
    };
    var orgFocus = "";
    var bhealthCount = 0;
    var bhealthPercentage = 0;
    var healthCount = 0;
    var healthPercentage = 0;
    var orgFocusCount = 0;
    var totalPainUsers = 0;
    let finalMpCount = 0;
    let finalMskCount = 0;
    if (req.query.group != undefined) {
      if (req.query.group[0] === '0' || req.query.group[0] === '-1' || req.query.group[0] === -1) {
        console.log('ent')
        group = 'All';
      } else {
        for (let i = 0; i < req.query.group.length; i++) {
          g.push(parseInt(req.query.group[i]))
        }
      }
    }
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      }
    } else if (req.query.startDate != "") {
      startDate = moment(req.query.startDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
      endDate = moment(req.query.endDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
      console.log('before', startDate, endDate)
    }

    if (type === 'today') {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();

    } else if (startDate != "") {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();

    }

    console.log("final", startDate, endDate, req.query.id[0]);

    try {
      let referralCode = '';
      let organisationName = "";
      let organisationColor = "#642683";
      console.log("grp", group, 'kk', req.query.group, 'ppp', g);
      let totalUsers = 0;
      if (req.query.id.length === 0) {
        req.query.id[0] = "";
      }
      for (let i = 0; i < req.query.id.length; i++) {
        finalMskData = [];
        mskData = [];
        mptData = [];
        if (req.query.id != '') {
          var parent_org = await Organisation.findOne({ _id: ObjectId(req.query.id[i]) }, { parentOrgId: 1, logo: 1, organisationName: 1 }).exec();
        }
        if (req.query.id[i] != '' && organisationSettings.isMskEnabled === true) {
          if (group === "All") {

            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

              }

            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              }

            }
          } else {

            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              }

            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(req.query.id[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(req.query.id[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              }

            }
          }
        } else if (req.query.id[i] === '') {

          if (req.query.startDate != "") {

            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();


          } else {
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();

          }
        }
        if (Array.isArray(result))
          totalMSKCount = await result.length;
        console.log('msk', totalMSKCount);
        totalUsers = totalUsers + result.length;
        if (result.length > 0) {
          if (req.query.id[i] != '' && organisationSettings.isMskEnabled === true) {
            if (group === "All") {

              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
                else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }

              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                } else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }

              }
            } else {

              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                } else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }

              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                } else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
              }
            }
          } else if (req.query.id[i] === '') {

            if (req.query.startDate != "") {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();


            } else {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();

            }

          }
        }
        if (mskData.length > 0) {
          let categoryExists = false;
          for (let i = 0; i < mskCategories.length; i++) {
            for (var categoryData of mskData) {
              if (mskCategories[i] === categoryData.category) {
                //categoryData.description = mskDescription[categoryData.category];
                categoryExists = true;
                break;
              }
            }
            if (!categoryExists) {
              mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0 })
            }
            categoryExists = false;
          }

          finalMskData[0] = {};
          finalMskData[0].count = 0;
          finalMskData[0].percentage = 0;
          for (let j = 0; j <= 4; j++) {
            if (mskData[j].category === "HEALTH") {
              finalMskData[0] = mskData[j];
              finalMskData[0].percentage = Math.round(mskData[j].percentage);
              // finalMskData[0].category = "HEALTH";
              // finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              // finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              // finalMskData[0].description = mskDescription["HEALTH"];
            } else if (mskData[j].category === "PERFORMANCE") {
              finalMskData[3] = mskData[j];
              finalMskData[3].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "WELLNESS") {
              finalMskData[1] = mskData[j];
              finalMskData[1].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "FITNESS") {
              finalMskData[2] = mskData[j];
              finalMskData[2].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
              finalMskData[4] = mskData[j];
              finalMskData[4].percentage = Math.round(mskData[j].percentage);
            }
          }
        } else {
          finalMskData = [
            {
              "count": 0,
              "percentage": 0,
              "category": "HEALTH"
            },
            {
              "count": 0,
              "category": "WELLNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "FITNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "PERFORMANCE",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "BEHAVIORAL HEALTH",
              "percentage": 0
            }
          ]
        }
        console.log('updated', finalMskData);

        if (req.query.id[i] != "") {
          if (group === "All") {

            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();

                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }
            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();

                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }

            }
          } else {

            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }

            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }
            }
          }
        } else {

          if (req.query.startDate != "") {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            let totalPainCount = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
            totalPainUsers = totalPainUsers + totalPainCount.length;
          } else {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            let totalPainCount = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
            totalPainUsers = totalPainUsers + totalPainCount.length;

          }

        }
        totalMoveprintCount = MpUser.length;
        console.log('mp count', totalMoveprintCount);
        finalMpCount = finalMpCount + totalMoveprintCount;
        if (MpUser.length > 0) {
          if (req.query.id[i] != "") {
            if (group === "All") {

              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              }
            } else {
              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }

              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              }
            }
          } else {

            if (req.query.startDate != "") {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              var focusData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: { $arrayElemAt: ["$focusarea", -1] } } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec()

            } else {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              var focusData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: { $arrayElemAt: ["$focusarea", -1] } } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec()

            }

          }
        } else {
          mptData = [
            {
              "score": 0,
              "title": "TOE TOUCH TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "UPPER BODY MOBILITY TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "ROTATION TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "SQUAT TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "BALANCE & REACH TEST",
              "percentage": 0
            }
          ]
        }

        if (req.query.id[i] != "") {
          finalJson.push({
            "id": req.query.id[i],
            "organisationName": parent_org.organisationName,
            "parentOrgId": parent_org.parentOrgId,
            "mskdata": finalMskData,
            "totalUsers": totalMSKCount,
            "mptdata": mptData.slice(0, 5)
          })
        } else {
          finalJson.push({
            "id": req.query.id[i],
            "organisationName": "",
            "parentOrgId": "",
            "mskdata": finalMskData,
            "totalUsers": (totalMSKCount > 0) ? totalMSKCount : totalMoveprintCount,
            "mptdata": mptData.slice(0, 5)
          })
        }

        if (req.query.id[i] != "" && parent_org.parentOrgId === "NA") {
          combinedOutput.id = req.query.id[i];
          combinedOutput.organisationName = parent_org.organisationName;
          combinedOutput.parentOrgId = "";
          combinedOutput.logo = parent_org.logo;
        }
        if (focusData != undefined) {
          focusData.forEach(f => {
            focusArray[f.focus] = focusArray[f.focus] + f.count;
          })
        }

        combinedOutput.mskdata[0].count = combinedOutput.mskdata[0].count + finalMskData[0].count + finalMskData[4].count;
        combinedOutput.mskdata[1].count = combinedOutput.mskdata[1].count + finalMskData[1].count;
        combinedOutput.mskdata[2].count = combinedOutput.mskdata[2].count + finalMskData[2].count;
        combinedOutput.mskdata[3].count = combinedOutput.mskdata[3].count + finalMskData[3].count;
        bhealthCount = finalMskData[4].count + bhealthCount;
        bhealthPercentage = finalMskData[4].percentage + bhealthPercentage;
        healthCount = finalMskData[0].count + healthCount;
        healthPercentage = finalMskData[0].percentage + healthPercentage;
        combinedOutput.mskdata[0].percentage = combinedOutput.mskdata[0].percentage + finalMskData[0].percentage + finalMskData[4].percentage;
        combinedOutput.mskdata[1].percentage = combinedOutput.mskdata[1].percentage + finalMskData[1].percentage;
        combinedOutput.mskdata[2].percentage = combinedOutput.mskdata[2].percentage + finalMskData[2].percentage;
        combinedOutput.mskdata[3].percentage = combinedOutput.mskdata[3].percentage + finalMskData[3].percentage;

        combinedOutput.mptdata[0].percentage = Math.round(combinedOutput.mptdata[0].percentage) + Math.round(mptData[0].percentage);
        combinedOutput.mptdata[1].percentage = Math.round(combinedOutput.mptdata[1].percentage) + Math.round(mptData[1].percentage);
        combinedOutput.mptdata[2].percentage = Math.round(combinedOutput.mptdata[2].percentage) + Math.round(mptData[2].percentage);
        combinedOutput.mptdata[3].percentage = Math.round(combinedOutput.mptdata[3].percentage) + Math.round(mptData[3].percentage);
        combinedOutput.mptdata[4].percentage = Math.round(combinedOutput.mptdata[4].percentage) + Math.round(mptData[4].percentage);

        combinedOutput.mptdata[0].score = combinedOutput.mptdata[0].score + mptData[0].score;
        combinedOutput.mptdata[1].score = combinedOutput.mptdata[1].score + mptData[1].score;
        combinedOutput.mptdata[2].score = combinedOutput.mptdata[2].score + mptData[2].score;
        combinedOutput.mptdata[3].score = combinedOutput.mptdata[3].score + mptData[3].score;
        combinedOutput.mptdata[4].score = combinedOutput.mptdata[4].score + mptData[4].score;
        // finalMpCount = finalMpCount + mptData[0].score + mptData[1].score + mptData[2].score + mptData[3].score + mptData[4].score
        finalMskCount = finalMskCount + finalMskData[0].count + finalMskData[1].count + finalMskData[2].count + finalMskData[3].count + finalMskData[4].count;

      }
      console.log(finalJson.length, req.query.id.length, req.query.id[0], finalMpCount)
      if ((combinedOutput.organisationName == "") && (finalJson.length > 0) ) {
        root_org_exists = true;
        let maxCount = 0;
        finalJson.forEach(a => {
          if (a.totalUsers > maxCount)
          combinedOutput.organisationName = a.organisationName;
        })
      }
      if (finalJson.length === req.query.id.length) {

        if (req.query.id[0] != '') {
          combinedOutput.mskdata.forEach(a => {
            if (finalMskCount > 0)
              a.percentage = (a.count / finalMskCount) * 100;
            else
              a.percentage = 0;
          })
        }
        if (inputOrgLength === true) {
          combinedOutput.mptdata.forEach(a => {
            if (finalMskCount > 0)
              a.percentage = (a.score / finalMpCount);
            else
              a.percentage = 0;
          })
        }
        let max = 0;
        for (var key in focusArray) {
          console.log(max, focusArray[key])
          if ((focusArray[key] > orgFocusCount) && (max < 4)) {
            orgFocusCount = focusArray[key];
            orgFocus = key;
            max = max + 1;
          }
        }
        console.log('org focus', orgFocus, orgFocusCount)
        function setProgress(per) {
          //  return '<svg xmlns="http://www.w3.org/2000/svg" width="300.752" height="40.391" viewBox="0 0 300.752 40.391">   <g id="Rectangle_1995" data-name="Rectangle 1995" stroke="#ebebeb" stroke-width="1">     <rect width="100%" height="60"  fill="#ffffff" stroke="none"/>     <rect x="0"  width="' + per + '%" height="60" fill="#414141"/>   </g> </svg>'

          return '<svg viewBox="0 0 300.751 40.391" width="300.751" height="40.391" xmlns="http://www.w3.org/2000/svg"> <rect width="100%" height="60"  style="fill:#ffffff;stroke-width:2;stroke:#ebebeb"/><rect x="0" width="' + per + '%" height="60" rx="2" fill="#414141" /></svg>'
        }
        var fonts = {
          Roboto: {
            bolditalics: 'fonts/Roboto-MediumItalic.ttf',
            normal: 'fonts/SukhumvitSet-Text.ttf',
            bold: 'fonts/SukhumvitSet-Bold.ttf',
            italics: 'fonts/HelveticaNeueItalic.ttf',
            //bolditalics: 'fonts/Roboto-MediumItalic.ttf'
          }
        };

        //var PdfPrinter = require('pdfmake');
        var printer = new pdfMakePrinter(fonts);
        var docDefinition = {
          footer: [
            {
              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>',
              margin: [40, 0, 0, 0]
            },
            [{
              alignment: 'justify',
              columns: [
                {

                  svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                  width: 19.4,
                  height: 24.3,
                  margin: [40, 5, 0, 0],
                  alignment: 'left'
                },
                {

                  // text: [
                  //   {
                  svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                  width: 100,
                  height: 30,
                  margin: [45, 3, 0, 0],
                  alignment: 'left'
                }
              ]
            }
            ]
          ],
          content: [
            {
              layout: 'noBorders', // optional
              table: {
                // headers are automatically repeated if the table spans over multiple pages
                // you can declare how many rows should be treated as headers
                headerRows: 4,
                widths: ['95%'],

                body: [
                  [
                    {
                      alignment: 'justify',
                      columns: [
                        {

                          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                          width: 19.4,
                          height: 24.3,
                          margin: [0, 5, 0, 0],
                          alignment: 'left'
                        },
                        {

                          // text: [
                          //   {
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                          width: 100,
                          height: 30,
                          margin: [5, 3, 0, 0],
                          alignment: 'left'
                          //text: '   moveprint',
                          // style: {
                          //   fontSize: 35,
                          //   //bold: true,
                          //   color: organisationColor,
                          //   margin: [0.5, 0, 0, 0],
                          //   alignment: 'left'
                          // }
                        },
                        {
                          text: 'Musculoskeletal Health Management',
                          width: 'auto',
                          italics: true,
                          margin: [13, 15, 13.5, 0],
                          style: {
                            fontSize: 11,
                            color: '#313133',
                            // margin: [13, 37, 13.5, 6]
                            //alignment: 'center'
                          }
                        }

                        //]
                        // }
                      ]
                    }
                  ],
                  [
                    {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                    }
                  ],
                  [
                    {
                      columns:
                        [
                          [{
                            text: [
                              { text: 'ORGANIZATION NAME: ', style: 'label' },
                              { text: combinedOutput.organisationName + '\n', style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'GROUP:', style: 'label' },
                              { text: '                           N/A', style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'TOTAL USERS:', style: 'label' },
                              { text: '                ' + totalUsers, style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'DATE:', style: 'label' },
                              //{ text: moment(new Date()).format('DD/MM/YYYY hh:mm A'), style: 'date' }
                              { bold: false, text: '                              ' + moment(new Date()).format('MM/DD/YYYY') + '\n', style: 'value' }
                            ]
                          }

                          ],
                          {
                            columns: [
                              logo != "" ? {
                                image: logo,
                                width: 100,
                                margin: [130, 10, 0, 0],
                                height: 47,
                              } : ""
                            ]
                          }
                        ]
                    }
                  ],
                  [
                    {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                    }
                  ],
                  // ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ?
                  [
                    {
                      layout: 'noBorders',
                      table: {
                        headerRows: 0,
                        widths: ['*', 300],
                        body: [
                          [
                            {
                              layout: 'noBorders',
                              margin: [8, 10, 10, 0],
                              table: {
                                heights: 50,
                                widths: [230],
                                body: [
                                  [{
                                    text: [{ text: 'MSK ORGANIZATON SUMMARY\n', fontSize: 9, bold: true }, '  ', { text: 'The chart below represents a summary of the current musculoskeletal health status of your entire organization.\n', fontSize: 8, color: '#707070' }],
                                    // fillColor: '#eeff00',       
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'HEALTH CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: 'Users in this category exhibit multiple or significant musculoskeletal health risk factors and need to seek a professional referral to a healthcare provider or a behavioral health specialist.\n', fontSize: 8, color: '#707070' }],
                                    // fillColor: '#00ff00',
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'WELLNESS CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: 'Users in this category exhibit manageable musculoskeletal health risk factors and may need to be under the supervision of fitness, healthcare or nutritional specialists while improving their movement quality.', fontSize: 8, color: '#707070' }],
                                    //fillColor: '#ff0000',
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'FITNESS CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: 'Users in this category exhibit minimal musculoskeletal health risk factors, do not currently require professional guidance and should follow Moveprint suggestions to progress toward individualized goals. \n', fontSize: 8, color: '#707070' }],
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'PERFORMANCE CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: ' Users in this category exhibit no current musculoskeletal health risk factors and should be encouraged to continue to monitor their health and wellness.\n', fontSize: 8, color: '#707070' }],
                                    //fillColor: '#feddee',
                                    height: 35
                                  }]
                                ]
                              }
                            },
                            [
                              [{
                                height: 260,
                                width: 200,
                                alignment: 'left',
                                margin: [30, 0, 0, 0],
                                svg: generateDonutChart(combinedOutput.mskdata[0].percentage, combinedOutput.mskdata[3].percentage, combinedOutput.mskdata[1].percentage, combinedOutput.mskdata[2].percentage)
                              }],
                              [{
                                layout: 'noBorders',
                                table: {
                                  //columnGap: 5,
                                  //: [25, 10, 0, 0],
                                  widths: [38, 10, 37, 10, 38, 10, 45],
                                  //heights: [40, 40, 40, 40, 40, 40, 43],
                                  body: [
                                    [{
                                      text: combinedOutput.mskdata[0].count,
                                      bold: true,
                                      color: '#ffffff',
                                      fontSize: 20,
                                      margin: [5, 5, 5, 5],
                                      fillColor: '#EE93A1',
                                      alignment: 'center'
                                    },
                                    {
                                      text: '',
                                      width: 13
                                    },
                                    {
                                      text: combinedOutput.mskdata[1].count,
                                      bold: true,
                                      color: '#ffffff',
                                      margin: [5, 5, 5, 5],
                                      fillColor: '#FBC698',
                                      fontSize: 20,
                                      alignment: 'center'
                                    },
                                    {
                                      text: '',
                                      width: 13
                                    },
                                    {
                                      text: combinedOutput.mskdata[2].count,
                                      bold: true,
                                      color: '#ffffff',
                                      margin: [5, 5, 5, 5],
                                      fillColor: '#FCD783',
                                      fontSize: 20,
                                      alignment: 'center'
                                    },
                                    {
                                      text: '',
                                      width: 13
                                    },
                                    {
                                      text: combinedOutput.mskdata[3].count,
                                      bold: true,
                                      color: '#ffffff',
                                      margin: [5, 5, 5, 5],
                                      fontSize: 20,
                                      fillColor: '#BED6A7',
                                      alignment: 'center'
                                    }],
                                    [{ text: 'HEALTH', alignment: 'center', bold: true, fontSize: 7 }, '', { text: 'WELLNESS', fontSize: 7, bold: true, alignment: 'center' }, '', { text: 'FITNESS', bold: true, fontSize: 7, alignment: 'center' }, '', { text: 'PERFORMANCE', fontSize: 6, bold: true, alignment: 'left' }]
                                  ]
                                }
                              }
                              ]
                            ]
                          ]
                        ]
                        // body: [
                        //   [
                        //     [{
                        //     svg: generateDonutChart(combinedOutput.mskdata[0].percentage, combinedOutput.mskdata[3].percentage, combinedOutput.mskdata[1].percentage, combinedOutput.mskdata[2].percentage),

                        //     colSpan: 4
                        //   }
                        //   ],
                        //   [
                        //   [
                        //   [{
                        //     margin: [15, 10, 0, 0],
                        //   text: [
                        //     {
                        //       text: '      ' + combinedOutput.mskdata[0].count + ' (' + Math.round(parseFloat(combinedOutput.mskdata[0].percentage)) + '%)',
                        //       bold: true, color: '#EE93A1'
                        //     },
                        //     { text: (Math.round(parseFloat(combinedOutput.mskdata[0].percentage)).toString().length === 2 ? '            HEALTH CATEGORY' : (Math.round(parseFloat(combinedOutput.mskdata[0].percentage)).toString().length === 1 ? '              HEALTH CATEGORY' : '         HEALTH CATEGORY')), bold: true }
                        //   ]
                        // },
                        //   {
                        //     text: ' '
                        //   },
                        //   {
                        //     svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

                        //   },
                        //   {
                        //     text: ' '
                        //   }
                        //   ]
                        //   ],
                        //   [
                        //     {
                        //       text: ' ',
                        //       rowSpan: 4
                        //     },
                        //     [{
                        //       margin: [15, 0, 0, 0],
                        //       text: [
                        //         { text: '      ' + combinedOutput.mskdata[1].count + ' (' + Math.round(parseFloat(combinedOutput.mskdata[1].percentage)) + '%)', bold: true, color: '#FBC698' },
                        //         { text: (Math.round(parseFloat(combinedOutput.mskdata[1].percentage)).toString().length === 2 ? '           WELLNESS CATEGORY' : (Math.round(parseFloat(combinedOutput.mskdata[1].percentage)).toString().length === 1 ? '             WELLNESS CATEGORY' : '        WELLNESS CATEGORY')), bold: true }
                        //       ]
                        //     },
                        //     {
                        //       text: ' '
                        //     },
                        //     {
                        //       svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

                        //     },
                        //     {
                        //       text: ' '
                        //     }
                        //     ],
                        //   ],
                        //   [
                        //     {
                        //       text: ' ',
                        //       rowSpan: 4
                        //     },
                        //     [{
                        //       margin: [15, 0, 0, 0],
                        //       text: [
                        //         { text: '      ' + combinedOutput.mskdata[2].count + ' (' + Math.round(parseFloat(combinedOutput.mskdata[2].percentage)) + '%)', bold: true, color: '#FCD783' },
                        //         { text: (Math.round(parseFloat(combinedOutput.mskdata[2].percentage)).toString().length === 2 ? '            FITNESS CATEGORY' : (Math.round(parseFloat(combinedOutput.mskdata[2].percentage)).toString().length === 1 ? '             FITNESS CATEGORY' : '            FITNESS CATEGORY')), bold: true }
                        //       ]
                        //     },
                        //     {
                        //       text: ' '
                        //     },
                        //     {
                        //       svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'

                        //     },
                        //     {
                        //       text: ' '
                        //     }
                        //     ]
                        //   ]
                        //   ,
                        //   [
                        //     {
                        //       text: ' ',
                        //       rowSpan: 4
                        //     },
                        //     [{
                        //       margin: [15, 0, 0, 10],
                        //       text: [
                        //         { text: '      ' + combinedOutput.mskdata[3].count + ' (' + Math.round(parseFloat(combinedOutput.mskdata[3].percentage)) + '%)', bold: true, color: '#BED6A7' },
                        //         { text: (Math.round(parseFloat(combinedOutput.mskdata[3].percentage)).toString().length === 2 ? '           PERFORMANCE CATEGORY' : (Math.round(parseFloat(combinedOutput.mskdata[3].percentage)).toString().length === 1 ? '            PERFORMANCE CATEGORY' : '        PERFORMANCE CATEGORY')), bold: true }
                        //       ]
                        //     },
                        //     {
                        //       text: ' '
                        //     },
                        //     {
                        //       svg: '<svg xmlns="http://www.w3.org/2000/svg" width="275" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                        //     },
                        //     {
                        //       text: ' '
                        //     }]
                        //   ]
                        //   ]
                        // ]
                        // ]
                      }
                    }
                  ]
                  // : [{
                  //   text: ''
                  // }]
                  ,
                  [{
                    text: ' '
                  }],
                  // [{
                  //   text: 'MOVEPRINT ORGANISATION SUMMARY',
                  //   bold: true,
                  //   fontSize: 10
                  // }],

                  [{
                    fillColor: '#f9f9f9',
                    widths: [275],
                    //margin: [2, 0, 0, 0],
                    layout: {

                      hLineColor: function (i, node) {
                        return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
                      },
                      vLineColor: function (i, node) {
                        return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
                      }
                    },
                    //layout: 'noBorders',
                    table: {
                      body: [
                        [{
                          border: [true, true, true, false],
                          text: 'MOVEPRINT ORGANIZATION SUMMARY',
                          bold: true,
                          fontSize: 10,
                          margin: [0, 2, 0, 0]
                        }
                        ],
                        [
                          {
                            border: [true, false, true, false],
                            columns: [
                              {
                                text: 'The chart below represents a summary of the average MovePrint scores\n for each test in organization.',
                                width: 268,
                                fontSize: 7,
                                color: '#707070',
                                margin: [5, 10, 0, 0]
                              },
                              {
                                text: 'ORGANIZATIONS FOCUS',
                                bold: true,
                                fontSize: 7,
                                width: 130,
                                margin: [0, 15, 0, 0]
                              },
                              {
                                text: 'USERS INDICATED PAIN',
                                bold: true,
                                fontSize: 7,
                                width: 95,
                                margin: [0, 15, 0, 0]
                              }
                            ]
                          }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            // {
                            //   text: ' ',
                            //   width: 270,
                            //   fontSize: 7,
                            //   color: '#707070',
                            //   margin: [5, 5, 0, 0]
                            // },
                            { text: 'TOE TOUCH', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 7, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                              width: 150,
                              height: 19,
                              margin: [0, 4, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 65, margin: [0, 7, 0, 0], style: 'per' },
                            {
                              width: 140,
                              text: orgFocus,
                              bold: true,
                              fontSize: 9,
                              color: '#959595',
                              alignment: 'left',
                              margin: [15, 6, 0, 0],
                              // columns: [
                              //   //await getFocusImage(orgFocus),
                              //   {
                              //     text: orgFocus, bold: true,
                              //     fontSize: 9,
                              //     color: '#959595'
                              //   }
                              // ]
                            },
                            { text: totalPainUsers, fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }
                            // { text: '10', fontSize: 18, margin: [15, 0, 0, 0], width: 40, bold: true, color: '#414141' },
                            // {
                            //   text: 'USERS',  bold: true,
                            //   fontSize: 7, color: '#959595',
                            //   margin: [0, 8, 0, 0],
                            // }
                            // {

                            //   text: [ {
                            //     text: 'USERS', margin: [0, 15, 0, 5], bold: true,
                            //     fontSize: 7, color: '#959595'
                            //   }],
                            //  // width: 100
                            // }
                          ]
                        }],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            // { text: 'TOE TOUCH', fontSize: 8, width: 50 },
                            // {
                            //   svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                            //   width: 180
                            // },
                            // { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 48, style: 'per' },
                            { text: 'UB MOBILITY', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 4, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                              width: 150,
                              height: 19
                              //margin: [0, 4, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', width: 65, margin: [0, 5, 0, 0], style: 'per' },
                            {
                              text: 'FOCUS  TOE TOUCH',
                              bold: true,
                              fontSize: 7,
                              width: 130,
                              margin: [10, 5, 0, 0]
                            },
                            {
                              text: 'FOCUS  UB MOBILITY',
                              bold: true,
                              fontSize: 7,
                              width: 80,
                              margin: [10, 5, 0, 0]
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            { text: 'ROTATION', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[2].percentage)),
                              width: 150,
                              height: 19,
                              margin: [0, 2, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', width: 65, margin: [0, 6, 0, 0], style: 'per' },

                            { text: focusArray['TOE TOUCH'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              width: 95,
                              margin: [0, 8, 0, 0],
                            },
                            { text: focusArray['UPPER BODY MOBILITY'], fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }

                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            // { text: 'TOE TOUCH', fontSize: 8, width: 50 },
                            // {
                            //   svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                            //   width: 180
                            // },
                            // { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 48, style: 'per' },
                            { text: 'SQUAT', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 4, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                              width: 150,
                              height: 19
                              // margin: [0, 4, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 65, margin: [0, 5, 0, 0], style: 'per' },

                            {
                              text: 'FOCUS  ROTATION',
                              bold: true,
                              fontSize: 7,
                              width: 130,
                              margin: [10, 5, 0, 0]
                            },
                            {
                              text: 'FOCUS  SQUAT',
                              bold: true,
                              fontSize: 7,
                              width: 80,
                              margin: [10, 5, 0, 0]
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            { text: 'BALANCE', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 6, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                              width: 150,
                              height: 19,
                              margin: [0, 3, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 65, margin: [0, 6, 0, 0], style: 'per' },

                            { text: focusArray['ROTATION'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              width: 95,
                              margin: [0, 8, 0, 0],
                            },
                            { text: focusArray['SQUAT'], fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [

                            { text: '', fontSize: 7, width: 260, color: '#707070', margin: [2, 5, 0, 3] },
                            {
                              text: 'FOCUS  BALANCE',
                              bold: true,
                              fontSize: 7,
                              width: 140,
                              margin: [10, 5, 0, 0]
                            },
                            {
                              text: '',
                              bold: true,
                              fontSize: 7,
                              width: 80,
                              margin: [10, 5, 0, 0]
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, true],
                          columns: [
                            { text: '', fontSize: 7, width: 260, color: '#707070', margin: [2, 5, 0, 3] },


                            { text: focusArray['BALANCE & REACH'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              width: 100,
                              margin: [0, 8, 0, 5],
                            }
                          ]
                        }
                        ]
                        // [{
                        //   columns: [
                        //     { text: 'UB MOBILITY', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: [{ text: focusArray['TOE TOUCH'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 150

                        //     },
                        //     {
                        //       text: [{ text: focusArray['UPPER BODY MOBILITY'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 100
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     { text: 'ROTATION', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[2].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: 'FOCUS  ROTATION',
                        //       bold: true,
                        //       fontSize: 7,
                        //       width: 150
                        //     },
                        //     {
                        //       text: 'FOCUS  SQUAT',
                        //       bold: true,
                        //       fontSize: 7,
                        //       width: 100
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     { text: 'SQUAT', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[3].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[3].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: [{ text: focusArray['ROTATION'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 150

                        //     },
                        //     {
                        //       text: [{ text: focusArray['SQUAT'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 100

                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     { text: 'BALANCE', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: 'FOCUS   BALANCE',
                        //       bold: true,
                        //       fontSize: 7,
                        //       width: 150
                        //     },
                        //     {
                        //       text: '',
                        //       bold: true,
                        //       fontSize: 9,
                        //       width: 100
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     {
                        //       text: '',
                        //       width: 280
                        //     },
                        //     {
                        //       text: [{ text: focusArray['BALANCE & REACH'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       //margin: [10, 0, 0, 0],
                        //       width: 100

                        //     }
                        //   ]
                        // }
                        // ]
                      ]
                    }
                  }],
                  // [{
                  //   columns: [
                  //     {
                  //       text: 'The chart below represents a summary of the average MovePrint scores\n for each test in organization.',
                  //       width: 270,
                  //       fontSize: 8,
                  //       color: '#707070'
                  //     },
                  //     {
                  //       text: 'ORGANISATIONS FOCUS',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 150,
                  //       margin: [10, 0, 0, 0]
                  //     },
                  //     {
                  //       text: 'USERS INDICATED PAIN',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 100
                  //     }
                  //   ]
                  // }],
                  // [{
                  //   columns: [
                  //     {
                  //       text: '',
                  //       width: 280,
                  //       fontSize: 8,
                  //     },
                  //     {
                  //       width: 150,
                  //       text: orgFocus,
                  //       bold: true,
                  //       fontSize: 9,
                  //       color: '#959595'
                  //       // columns: [
                  //       //   //await getFocusImage(orgFocus),
                  //       //   {
                  //       //     text: orgFocus, bold: true,
                  //       //     fontSize: 9,
                  //       //     color: '#959595'
                  //       //   }
                  //       // ]
                  //     },
                  //     {
                  //       text: [{ text: totalPainUsers, fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true,
                  //         fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 100
                  //     }
                  //   ]
                  // }],
                  // [{
                  //   columns: [
                  //     { text: 'TOE TOUCH', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: 'FOCUS  TOE TOUCH',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 145
                  //     },
                  //     {
                  //       text: 'FOCUS  UB MOBILITY',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'UB MOBILITY', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: [{ text: focusArray['TOE TOUCH'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 150

                  //     },
                  //     {
                  //       text: [{ text: focusArray['UPPER BODY MOBILITY'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'ROTATION', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[2].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: 'FOCUS  ROTATION',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 150
                  //     },
                  //     {
                  //       text: 'FOCUS  SQUAT',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'SQUAT', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[3].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[3].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: [{ text: focusArray['ROTATION'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 150

                  //     },
                  //     {
                  //       text: [{ text: focusArray['SQUAT'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 100

                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'BALANCE', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: 'FOCUS   BALANCE',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 150
                  //     },
                  //     {
                  //       text: '',
                  //       bold: true,
                  //       fontSize: 9,
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     {
                  //       text: '',
                  //       width: 280
                  //     },
                  //     {
                  //       text: [{ text: focusArray['BALANCE & REACH'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       //margin: [10, 0, 0, 0],
                  //       width: 100

                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   table: {
                  //     widths: [270, 250],
                  //     heights: [200, 200],
                  //     body: [
                  //       [{
                  //         fillColor: "#eeeeee", text: [

                  //             {text: 'MSK SUMMARY ', fontSize: 15, bold: true},
                  //         '\n You can declare how many rows should be treated as a header\n',
                  //         {
                  //           alignment: 'justify',
                  //           columns: [
                  //             {text: 'Toe Touch', fontSize: 8},
                  //               {
                  //               svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //               width: 50
                  //             },
                  //             { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%' , style: 'value' }
                  //           ]
                  //         },
                  //           // {
                  //           //   text: [
                  //           //     {text: 'Toe Touch', fontSize: 8},
                  //           //     {
                  //           //     svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //           //     width: 50
                  //           //   },
                  //           //   { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%' , style: 'value' }
                  //           //   ]
                  //           // },
                  //            {
                  //             text: ' ohiu'
                  //           }
                  //         ]
                  //       },
                  //       { fillColor: "#eeeeee", text: 'TOE TOUCH', style: 'value' }]
                  //     ]
                  //   }
                  // }],
                  // [{ text: 'TOE TOUCH', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'UPPER BODY MOBILITY', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'ROTATION', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(combinedOutput.mptdata[2].percentage),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'SQUAT', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(combinedOutput.mptdata[3].percentage),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[3].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'BALANCE & REACH', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(combinedOutput.mptdata[4].percentage),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  [{
                    //fillColor: organisationColor,
                    //layout: 'noBorders',
                    pageBreak: 'before',
                    text: {
                      text: '',
                      style: 'header'
                    }
                  }],
                  [{
                    text: 'ORGANIZATION SUMMARY',
                    bold: true,
                    fontSize: 10
                  }],
                  [{
                    text: 'The data below represents a summary of the current musculoskeletal health status of your primary organization and each of your sub-organizations. It displays the users in each MSK category by total number and percentage. Your organization can use this data to identify and monitor users in the high musculoskeletal risk categories and drive decision making regarding professional referrals.',
                    fontSize: 8,
                    color: '#707070',
                    // width: 500,
                    margin: [5, 0, 0, 10]
                  }],
                  [{
                    text: ''
                  }],
                  [{
                    text: ''
                  }],
                  (root_org_exists == false)?[{

                    //layout: 'noBorders',
                    //fillColor: '#ebebeb',
                    table: {
                      widths: [150, 66, 66, 66, 66, 58],
                      headerRows: 1,
                      heights: [20, 19, 25],
                      body: [
                        [{ text: 'PRIMARY ORGANIZATION', border: [false, false, true, true], alignment: 'left', fillColor: '#ffffff', bold: true, fontSize: 10 }, { text: 'B-HEALTH', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'HEALTH', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'WELLNESS', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'FITNESS', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'PERFORMANCE', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }],

                        [{ text: combinedOutput.organisationName.toUpperCase(), border: [true, true, true, false], margin: [3, 15, 0, 0], alignment: 'left', fillColor: '#f9f9f9', bold: true, fontSize: 8 }, { text: Math.round(bhealthPercentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(healthPercentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(combinedOutput.mskdata[1].percentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(combinedOutput.mskdata[2].percentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(combinedOutput.mskdata[3].percentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }],

                        [{ fillColor: '#f9f9f9', margin: [0, 7, 0, 5], border: [true, false, true, true], text: [{ text: 'USERS  ', fontSize: 7, color: '#959595', alignment: 'right', bold: true }, { text: finalMskCount, style: 'userdata' }] }, { text: bhealthCount, margin: [0, 7, 0, 5], style: 'healthdata' }, { text: healthCount, margin: [0, 7, 0, 5], style: 'healthdata' }, { text: combinedOutput.mskdata[1].count, margin: [0, 7, 0, 5], style: 'wellnessdata' }, { text: combinedOutput.mskdata[2].count, margin: [0, 7, 0, 5], style: 'fitnessdata' }, { text: combinedOutput.mskdata[3].count, margin: [0, 7, 0, 5], style: 'performancedata' }]
                      ]
                    },
                    layout: {
                      hLineColor: function (i, node) {
                        return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
                      },
                      vLineColor: function (i, node) {
                        return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
                      }
                    }
                  }]:  [{ text: '' }],
                  [{
                    text: ''
                  }],
                  [{
                    text: ''
                  }],
                  [{
                    text: 'SUB-ORGANIZATIONS',
                    fontSize: 10,
                    bold: true
                  }],
                  (req.query.id.length > 0) ? await orgResult(finalJson) : [{ text: '' }]
                ]
              }
            }
          ],
          styles: {
            header: {
              fontSize: 18,
              bold: true,
              alignment: 'center',
              color: '#ffffff'
            },
            subheader: {
              fontSize: 15,
              color: organisationColor
            },
            quote: {
              italics: true
            },
            small: {
              fontSize: 8
            },
            label: {
              fontSize: 10,
              bold: true,
              color: '#414141',
              margin: [0, 2]
            },
            value: {
              fontSize: 10,
              color: '#414141',
              bold: true,
              //margin: [0, 2]
            },
            headerrow: {
              fontSize: 7,
              bold: true,
              color: '#000000',
              alignment: 'center'
            },
            tablerow: {
              fontSize: 7,
              fillColor: '#ebebeb',
              bold: true,
              color: '#959595',
              alignment: 'center'
            },
            userdata: {
              fontSize: 7,
              bold: true,
              alignment: 'right'
            },
            healthdata: {
              fontSize: 7,
              bold: true,
              fillColor: '#EE93A1',
              alignment: 'center'
            },
            wellnessdata: {
              fontSize: 7,
              bold: true,
              fillColor: '#FBC698',
              alignment: 'center'
            },
            fitnessdata: {
              fontSize: 7,
              bold: true,
              fillColor: '#FCD783',
              alignment: 'center'
            },
            performancedata: {
              fontSize: 7,
              bold: true,
              fillColor: '#bed6a7',
              alignment: 'center'
            },
            date: {
              fontSize: 8,
              alignment: 'left'
            },
            per: {
              fontSize: 8,
              margin: [5, 0]
            },
            category: {
              fontSize: 8,
              color: organisationColor,
              margin: [5, 0]
            }
          }
        };
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=pdfmake.pdf');
        var pdfDoc = printer.createPdfKitDocument(docDefinition);
        pdfDoc.pipe(res);
        pdfDoc.end();
        // return res.status(200).json({
        //   status: 200,
        //   message: finalJson,
        //   combinedop: combinedOutput
        // })
      }
    } catch (e) {
      console.log(e)
      return res.status(210).json({
        status: 210,
        message: e
      })
    }

  },

    // groupmskWeb
  groupMskReportweb: async (req, res) => {
    if (!["0", "3", "2"].includes(req.query.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    console.log(' before parsed ', req.query)
    let df = JSON.parse(req.query.params)
    let root_org_exists = false;
    console.log('parsed content', df, df.id, df.group)
    req.query.id = df.id;
    req.query.group = df.group;
    req.query.prolist = df.prolist;
    console.log('query params');
    var mskDescription = {
      "HEALTH": "Users in this category exhibit multiple or significant musculoskeletal health risk factors and need to seek a professional referral to a healthcare provider or a behavioral health specialist.  ",
      "WELLNESS": "Users in this category exhibit manageable musculoskeletal health risk factors and may need to be under the supervision of fitness, healthcare or nutritional specialists while improving their movement quality.",
      "FITNESS": "Users in this category exhibit minimal musculoskeletal health risk factors, do not currently require professional guidance and should follow Moveprint suggestions to progress toward individualized goals. ",
      "PERFORMANCE": "Users in this category exhibit no current musculoskeletal health risk factors and should be encouraged to continue to monitor their health and wellness. ",
      "BEHAVIORAL HEALTH": "Individuals in this category have demonstrated they need specific health professional intervention and advice in order to improve their current health status. Without seeking advice from a professional they risk having more significant health related issues in the future."
    }
    async function orgResult(inputjson) {
      let r = [];
      r.push([]);
      for (let i = 0; i < inputjson.length; i++) {
        console.log(inputjson[i].organisationName, inputjson[i].parentOrgId)
        if (inputjson[i].parentOrgId != "NA") {
          r[0].push([{
            //layout: 'noBorders',
            layout: {
              hLineColor: function (i, node) {
                return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
              },
              vLineColor: function (i, node) {
                return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
              }
            },
            table: {
              widths: [150, 66, 66, 66, 66, 58],
              heights: [19, 25],
              body: [
                [{ text: inputjson[i].organisationName.toUpperCase(), border: [true, true, true, false], margin: [3, 15, 0, 0], alignment: 'left', fillColor: '#f9f9f9', bold: true, fontSize: 8 }, { text: Math.round(inputjson[i].mskdata[4].percentage) + '%', margin: [0, 10, 0, 5], border: [true, true, true, true], fillColor: "#f9f9f9", style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[0].percentage) + '%', border: [true, true, true, true], margin: [0, 10, 0, 5], fillColor: "#f9f9f9", style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[1].percentage) + '%', fillColor: "#f9f9f9", border: [true, true, true, true], margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[2].percentage) + '%', border: [true, true, true, true], fillColor: "#f9f9f9", margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(inputjson[i].mskdata[3].percentage) + '%', fillColor: "#f9f9f9", border: [true, true, true, true], margin: [0, 10, 0, 5], style: 'tablerow' }],
  
  
                [{ fillColor: '#f9f9f9', margin: [0, 6, 0, 5], border: [true, false, true, true], text: [{ text: 'USERS  ', fontSize: 7, color: '#959595', alignment: 'right', bold: true }, { text: inputjson[i].totalUsers, style: 'userdata' }] }, { text: inputjson[i].mskdata[4].count, margin: [0, 10, 0, 5], style: 'healthdata' }, { text: inputjson[i].mskdata[0].count, margin: [0, 10, 0, 5], style: 'healthdata' }, { text: inputjson[i].mskdata[1].count, margin: [0, 10, 0, 5], style: 'wellnessdata' }, { text: inputjson[i].mskdata[2].count, margin: [0, 10, 0, 5], style: 'fitnessdata' }, { text: inputjson[i].mskdata[3].count, margin: [0, 10, 0, 5], style: 'performancedata' }]
              ]
            }
          }]);
          r[0].push([{ text: '\n' }]);
        }
      }
      console.log("r")
      return r;
    }
    var combinedOutput = {
      "id": "",
      "organisationName": "",
      "parentOrgId": "",
      "logo": "",
      "mskdata": [
        {
          "count": 0,
          "percentage": 0,
          "category": "HEALTH"
        },
        {
          "count": 0,
          "category": "WELLNESS",
          "percentage": 0
        },
        {
          "count": 0,
          "category": "FITNESS",
          "percentage": 0
        },
        {
          "count": 0,
          "category": "PERFORMANCE",
          "percentage": 0
        }
      ],
      "mptdata": [
        {
          "score": 0,
          "title": "TOE TOUCH TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "UPPER BODY MOBILITY TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "ROTATION TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "SQUAT TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "BALANCE & REACH TEST",
          "percentage": 0
        },
        {
          "score": 0,
          "title": "PASS",
          "percentage": 0
        }
      ]
    };
    let logo = '';
    let inputOrgLength = false;
    if (req.query.id.length > 0) {
      inputOrgLength = true;
      var organisationSettings = await Organisation.findOne({ _id: ObjectId(req.query.id[0]) }, { settings: 1, isMskEnabled: 1, categoryDescription: 1, "theme.color": 1, logo: 1, organisationName: 1, categoryDescription: 1, reportContact: 1, reportName: 1, reportLogo: 1, reportOrganisationName: 1 }).exec();
      organisationColor = organisationSettings.theme.color;
      logo = organisationSettings.logo;
      if (organisationSettings.reportLogo != '') {
        logo = organisationSettings.reportLogo;
      }
      mskDescription = {
        "HEALTH": organisationSettings.categoryDescription[0].mskDescription,
        "WELLNESS": organisationSettings.categoryDescription[1].mskDescription,
        "FITNESS": organisationSettings.categoryDescription[2].mskDescription,
        "PERFORMANCE": organisationSettings.categoryDescription[3].mskDescription,
        "BEHAVIORAL HEALTH": organisationSettings.categoryDescription[4].mskDescription
      };
    }
    const mskCategories = ["HEALTH", "BEHAVIORAL HEALTH", "FITNESS", "PERFORMANCE", "WELLNESS"]
    let { type, startDate, endDate } = req.query;
    if (type === undefined && startDate == undefined && endDate == undefined) {
      type = "7days";
    } else if ((type === undefined || type === "undefined") && (startDate != undefined || startDate != "")) {
      type = "";
    }
    console.log('final dates', startDate, endDate);
    var group = '';
    let g = [];
    var finalMskData = [];
    var finalJson = [];
    var mskData = [];
    var result = [];
    let focusArray = {
      'TOE TOUCH': 0,
      'UPPER BODY MOBILITY': 0,
      'ROTATION': 0,
      'SQUAT': 0,
      'BALANCE & REACH': 0,
      'SHOULDER CLEARING': 0,
      'SPINE CLEARING': 0,
      'SYMMETRY': 0,
      'PAIN FLOW': 0
    };
    var orgFocus = "";
    var bhealthCount = 0;
    var bhealthPercentage = 0;
    var healthCount = 0;
    var healthPercentage = 0;
    var orgFocusCount = 0;
    var totalPainUsers = 0;
    var pass=0
    let finalMpCount = 0;
    let finalMskCount = 0;
    if (req.query.group != undefined) {
      if (req.query.group[0] === '0' || req.query.group[0] === '-1' || req.query.group[0] === -1) {
        console.log('ent')
        group = 'All';
      } else {
        for (let i = 0; i < req.query.group.length; i++) {
          g.push(parseInt(req.query.group[i]))
        }
      }
    }
    if (type != "") {
      if (type === "7days") {
        console.log('in 7days');
        startDate = moment().utc().subtract(7, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "1month") {
        console.log('in 1 month');
        startDate = moment().utc().subtract(30, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "3months") {
        console.log('in 3 months');
        startDate = moment().utc().subtract(90, 'days').endOf('day').format('MM/DD/YYYY');
        endDate = moment(Date.now()).utc().format('MM/DD/YYYY');
      } else if (type === "today") {
        console.log('in today');
        endDate = moment().utc().format('MM/DD/YYYY');
        startDate = moment(Date.now()).utc().startOf('day').format('MM/DD/YYYY');
      }
    } else if (req.query.startDate != "") {
      startDate = moment(req.query.startDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
      endDate = moment(req.query.endDate, 'YYYY-MM-DD').utc().format('MM/DD/YYYY');
      console.log('before', startDate, endDate)
    }
  
    if (type === 'today') {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment().utc().format();
  
    } else if (startDate != "") {
      startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
      endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
  
    }
  
    console.log("final", startDate, endDate, req.query.id[0]);
  
    try {
      let referralCode = '';
      let organisationName = "";
      let organisationColor = "#642683";
      console.log("grp", group, 'kk', req.query.group, 'ppp', g);
      let totalUsers = 0;
      if (req.query.id.length === 0) {
        req.query.id[0] = "";
      }
      for (let i = 0; i < req.query.id.length; i++) {
        finalMskData = [];
        mskData = [];
        mptData = [];
        if (req.query.id != '') {
          var parent_org = await Organisation.findOne({ _id: ObjectId(req.query.id[i]) }, { parentOrgId: 1, logo: 1, organisationName: 1 }).exec();
        }
        if (req.query.id[i] != '' && organisationSettings.isMskEnabled === true) {
          if (group === "All") {
  
            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  
              }
  
            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              }
  
            }
          } else {
  
            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              }
  
            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(req.query.id[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              } else {
                var result = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.org_id": { $eq: ObjectId(req.query.id[i]) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
              }
  
            }
          }
        } else if (req.query.id[i] === '') {
  
          if (req.query.startDate != "") {
  
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  
  
          } else {
            var result = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }]).exec();
  
          }
        }
        if (Array.isArray(result))
          totalMSKCount = await result.length;
        console.log('msk', totalMSKCount);
        totalUsers = totalUsers + result.length;
        if (result.length > 0) {
          if (req.query.id[i] != '' && organisationSettings.isMskEnabled === true) {
            if (group === "All") {
  
              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
                else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
  
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                } else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
  
              }
            } else {
  
              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                } else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null }, "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
  
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                } else {
                  var mskData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.query.id[i]), "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskcategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: 1 } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
                }
              }
            }
          } else if (req.query.id[i] === '') {
  
            if (req.query.startDate != "") {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskdate": { $gte: new Date(startDate), $lte: new Date(endDate) }, "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  
  
            } else {
              var mskData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $match: { "mskresult.mskCategory": { $exists: true, $ne: null } } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", mskscore: { "$first": "$mskresult.mskCategory" } } }, { $project: { _id: 1, mskcategory: { $arrayElemAt: ["$mskscore", -1] } } }, { $group: { _id: "$mskcategory", count: { $sum: 1 } } }, { $project: { "_id": 0, "count": 1, "category": "$_id", percentage: { "$multiply": [{ "$divide": [100, totalMSKCount] }, "$count"] } } }, { $sort: { category: 1 } }]).exec();
  
            }
  
          }
        }
        if (mskData.length > 0) {
          let categoryExists = false;
          for (let i = 0; i < mskCategories.length; i++) {
            for (var categoryData of mskData) {
              if (mskCategories[i] === categoryData.category) {
                //categoryData.description = mskDescription[categoryData.category];
                categoryExists = true;
                break;
              }
            }
            if (!categoryExists) {
              mskData.push({ "count": 0, "category": mskCategories[i], "percentage": 0 })
            }
            categoryExists = false;
          }
  
          finalMskData[0] = {};
          finalMskData[0].count = 0;
          finalMskData[0].percentage = 0;
          for (let j = 0; j <= 4; j++) {
            if (mskData[j].category === "HEALTH") {
              finalMskData[0] = mskData[j];
              finalMskData[0].percentage = Math.round(mskData[j].percentage);
              // finalMskData[0].category = "HEALTH";
              // finalMskData[0].count = finalMskData[0].count + mskData[j].count;
              // finalMskData[0].percentage = Math.round(finalMskData[0].percentage + mskData[j].percentage);
              // finalMskData[0].description = mskDescription["HEALTH"];
            } else if (mskData[j].category === "PERFORMANCE") {
              finalMskData[3] = mskData[j];
              finalMskData[3].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "WELLNESS") {
              finalMskData[1] = mskData[j];
              finalMskData[1].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "FITNESS") {
              finalMskData[2] = mskData[j];
              finalMskData[2].percentage = Math.round(mskData[j].percentage);
            } else if (mskData[j].category === "BEHAVIORAL HEALTH") {
              finalMskData[4] = mskData[j];
              finalMskData[4].percentage = Math.round(mskData[j].percentage);
            }
          }
        } else {
          finalMskData = [
            {
              "count": 0,
              "percentage": 0,
              "category": "HEALTH"
            },
            {
              "count": 0,
              "category": "WELLNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "FITNESS",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "PERFORMANCE",
              "percentage": 0
            },
            {
              "count": 0,
              "category": "BEHAVIORAL HEALTH",
              "percentage": 0
            }
          ]
        }
        console.log('updated', finalMskData);
  
        if (req.query.id[i] != "") {
          if (group === "All") {
  
            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
  
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }
            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
  
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }
  
            }
          } else {
  
            if (req.query.startDate != "") {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }
  
            } else {
              if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              } else {
                var MpUser = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
                let totalPainCount = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
                totalPainUsers = totalPainUsers + totalPainCount.length;
              }
            }
          }
        } else {
  
          if (req.query.startDate != "") {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            let totalPainCount = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
            totalPainUsers = totalPainUsers + totalPainCount.length;
          } else {
            var MpUser = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }]).exec();
            let totalPainCount = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", pain: { "$first": "$result.pain" } } }, { $match: { pain: true } }]).exec();
            totalPainUsers = totalPainUsers + totalPainCount.length;
  
          }
  
        }
        totalMoveprintCount = MpUser.length;
        console.log('mp count', totalMoveprintCount);
        finalMpCount = finalMpCount + totalMoveprintCount;
        if (MpUser.length > 0) {
          if (req.query.id[i] != "") {
            if (group === "All") {
  
              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, isDeleted: false, "roles.pro_id": { "$in": req.query.prolist }, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              }
            } else {
              if (req.query.startDate != "") {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]), "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
  
              } else {
                if (req.query.prolist == undefined || (req.query.prolist != undefined && req.query.prolist.length === 0)) {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                } else {
                  var mptData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", movementscore: { "$first": "$result.movementscore" }, focus: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: 1, focus: 1, mptdate: 1 } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
                  var focusData = await User.aggregate([{ $match: { "roles.org_id": { $eq: ObjectId(req.query.id[i]) }, "roles.groupId": { "$in": g }, "roles.pro_id": { "$in": req.query.prolist }, isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.query.id[i]) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focus: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: 1 } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec();
                }
              }
            }
          } else {
  
            if (req.query.startDate != "") {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              var focusData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $match: { "result.mptdate": { $gte: new Date(startDate), $lte: new Date(endDate) } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: { $arrayElemAt: ["$focusarea", -1] } } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec()
  
            } else {
              var mptData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", mptscore: { "$first": "$result.movementscore" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $project: { _id: 1, movementscore: { $arrayElemAt: ["$mptscore", -1] }, focus: { $arrayElemAt: ["$focusarea", -1] }, mptdate: { $arrayElemAt: ["$mptdate", -1] } } }, { $unwind: "$movementscore" }, { $group: { _id: "$movementscore.title", score: { $sum: "$movementscore.score" } } }, { $project: { _id: 0, "score": 1, "title": "$_id", "percentage": { "$multiply": [{ "$divide": ["$score", (100 * MpUser.length)] }, 100] } } }]).exec();
              var focusData = await User.aggregate([{ $match: { isDeleted: false, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $project: { _id: 1, focus: { $arrayElemAt: ["$focusarea", -1] } } }, { $group: { _id: "$focus", count: { $sum: 1 } } }, { $project: { focus: "$_id", _id: 0, count: 1 } }]).exec()
  
            }
  
          }
        } else {
          mptData = [
            {
              "score": 0,
              "title": "TOE TOUCH TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "UPPER BODY MOBILITY TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "ROTATION TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "SQUAT TEST",
              "percentage": 0
            },
            {
              "score": 0,
              "title": "BALANCE & REACH TEST",
              "percentage": 0
            }
          ]
        }
  
        if (req.query.id[i] != "") {
          finalJson.push({
            "id": req.query.id[i],
            "organisationName": parent_org.organisationName,
            "parentOrgId": parent_org.parentOrgId,
            "mskdata": finalMskData,
            "totalUsers": totalMSKCount,
            "mptdata": mptData.slice(0, 5)
          })
        } else {
          finalJson.push({
            "id": req.query.id[i],
            "organisationName": "",
            "parentOrgId": "",
            "mskdata": finalMskData,
            "totalUsers": (totalMSKCount > 0) ? totalMSKCount : totalMoveprintCount,
            "mptdata": mptData.slice(0, 5)
          })
        }
  
        if (req.query.id[i] != "" && parent_org.parentOrgId === "NA") {
          combinedOutput.id = req.query.id[i];
          combinedOutput.organisationName = parent_org.organisationName;
          combinedOutput.parentOrgId = "";
          combinedOutput.logo = parent_org.logo;
          console.log(combinedOutput.organisationName)
        }
        if (focusData != undefined) {
          focusData.forEach( f => {
            focusArray[f.focus] = focusArray[f.focus] + f.count;
            if (f.focus == 'SYMMETRY'){
              console.log('shova',combinedOutput.mptdata[5])
              console.log('shova',finalMpCount)
              pass=f.count
                    combinedOutput.mptdata[5].percentage =  Math.round((f.count*finalMpCount)/100);
                      console.log('SYMMETRYSYMMETRY',pass)
            }
          })
        }
  
        combinedOutput.mskdata[0].count = combinedOutput.mskdata[0].count + finalMskData[0].count + finalMskData[4].count;
        combinedOutput.mskdata[1].count = combinedOutput.mskdata[1].count + finalMskData[1].count;
        combinedOutput.mskdata[2].count = combinedOutput.mskdata[2].count + finalMskData[2].count;
        combinedOutput.mskdata[3].count = combinedOutput.mskdata[3].count + finalMskData[3].count;
        bhealthCount = finalMskData[4].count + bhealthCount;
        bhealthPercentage = finalMskData[4].percentage + bhealthPercentage;
        healthCount = finalMskData[0].count + healthCount;
        healthPercentage = finalMskData[0].percentage + healthPercentage;
        combinedOutput.mskdata[0].percentage = combinedOutput.mskdata[0].percentage + finalMskData[0].percentage + finalMskData[4].percentage;
        combinedOutput.mskdata[1].percentage = combinedOutput.mskdata[1].percentage + finalMskData[1].percentage;
        combinedOutput.mskdata[2].percentage = combinedOutput.mskdata[2].percentage + finalMskData[2].percentage;
        combinedOutput.mskdata[3].percentage = combinedOutput.mskdata[3].percentage + finalMskData[3].percentage;
  
        combinedOutput.mptdata[0].percentage = Math.round(combinedOutput.mptdata[0].percentage) + Math.round(mptData[0].percentage);
        combinedOutput.mptdata[1].percentage = Math.round(combinedOutput.mptdata[1].percentage) + Math.round(mptData[1].percentage);
        combinedOutput.mptdata[2].percentage = Math.round(combinedOutput.mptdata[2].percentage) + Math.round(mptData[2].percentage);
        combinedOutput.mptdata[3].percentage = Math.round(combinedOutput.mptdata[3].percentage) + Math.round(mptData[3].percentage);
        combinedOutput.mptdata[4].percentage = Math.round(combinedOutput.mptdata[4].percentage) + Math.round(mptData[4].percentage);
  
        combinedOutput.mptdata[0].score = combinedOutput.mptdata[0].score + mptData[0].score;
        combinedOutput.mptdata[1].score = combinedOutput.mptdata[1].score + mptData[1].score;
        combinedOutput.mptdata[2].score = combinedOutput.mptdata[2].score + mptData[2].score;
        combinedOutput.mptdata[3].score = combinedOutput.mptdata[3].score + mptData[3].score;
        combinedOutput.mptdata[4].score = combinedOutput.mptdata[4].score + mptData[4].score;
        // finalMpCount = finalMpCount + mptData[0].score + mptData[1].score + mptData[2].score + mptData[3].score + mptData[4].score
        finalMskCount = finalMskCount + finalMskData[0].count + finalMskData[1].count + finalMskData[2].count + finalMskData[3].count + finalMskData[4].count;
          // combinedOutput.mptdata[5].percentage =Math.round((f.count *finalMpCount)/100);
         console.log('focusDatacombinedOutput.mptdata[5].percentage ',combinedOutput.mptdata[5].percentage )
          // if (focusData != undefined) {
          //   focusData.forEach(async f => {
          //     console.log(f)
      
          //   })
          // }
      }
      console.log(finalJson.length, req.query.id.length, req.query.id[0], focusArray, finalMpCount, combinedOutput.mptdata)
      if ((combinedOutput.organisationName == "") && (finalJson.length > 0) ) {
        root_org_exists = true;
        let maxCount = 0;
        finalJson.forEach(a => {
          if (a.totalUsers > maxCount)
          combinedOutput.organisationName = a.organisationName;
        })
      }
      if (finalJson.length === req.query.id.length) {
  
        if (req.query.id[0] != '') {
          combinedOutput.mskdata.forEach(a => {
            if (finalMskCount > 0)
              a.percentage = (a.count / finalMskCount) * 100;
            else
              a.percentage = 0;
          })
        }
        if (inputOrgLength === true) {
          combinedOutput.mptdata.forEach(a => {
            if (finalMskCount > 0)
              a.percentage = (a.score / finalMpCount);
            else
              a.percentage = 0;
          })
        }
        let max = 0;
        for (var key in focusArray) {
          console.log(max, focusArray[key])
          if ((focusArray[key] > orgFocusCount) && (max < 4)) {
            orgFocusCount = focusArray[key];
            orgFocus = key;
            max = max + 1;
          }
        }
        console.log('org focus', orgFocus, orgFocusCount, combinedOutput.mptdata)
        function setProgress(per) {
          //  return '<svg xmlns="http://www.w3.org/2000/svg" width="300.752" height="40.391" viewBox="0 0 300.752 40.391">   <g id="Rectangle_1995" data-name="Rectangle 1995" stroke="#ebebeb" stroke-width="1">     <rect width="100%" height="60"  fill="#ffffff" stroke="none"/>     <rect x="0"  width="' + per + '%" height="60" fill="#414141"/>   </g> </svg>'
  
          return '<svg viewBox="0 0 300.751 40.391" width="300.751" height="40.391" xmlns="http://www.w3.org/2000/svg"> <rect width="100%" height="60"  style="fill:#ffffff;stroke-width:2;stroke:#ebebeb"/><rect x="0" width="' + per + '%" height="60" rx="2" fill="#414141" /></svg>'
        }
        var fonts = {
          Roboto: {
            bolditalics: 'fonts/Roboto-MediumItalic.ttf',
            normal: 'fonts/SukhumvitSet-Text.ttf',
            bold: 'fonts/SukhumvitSet-Bold.ttf',
            italics: 'fonts/HelveticaNeueItalic.ttf',
            //bolditalics: 'fonts/Roboto-MediumItalic.ttf'
          }
        };
  
        //var PdfPrinter = require('pdfmake');
        var printer = new pdfMakePrinter(fonts);
        var docDefinition = {
          footer: [
            {
              svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>',
              margin: [40, 0, 0, 0]
            },
            [{
              alignment: 'justify',
              columns: [
                {
  
                  svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                  width: 19.4,
                  height: 24.3,
                  margin: [40, 5, 0, 0],
                  alignment: 'left'
                },
                {
  
                  // text: [
                  //   {
                  svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                  width: 100,
                  height: 30,
                  margin: [45, 3, 0, 0],
                  alignment: 'left'
                }
              ]
            }
            ]
          ],
          content: [
            {
              layout: 'noBorders', // optional
              table: {
                // headers are automatically repeated if the table spans over multiple pages
                // you can declare how many rows should be treated as headers
                headerRows: 4,
                widths: ['95%'],
  
                body: [
                  [
                    {
                      alignment: 'justify',
                      columns: [
                        {
  
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64.36 75.83"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M60.64,8.22a53.38,53.38,0,0,0-56.92,0A53.43,53.43,0,0,0,32.18,76.83a53.39,53.39,0,0,0,32.18-49A53.23,53.23,0,0,0,60.64,8.22ZM32.18,69.76A43.59,43.59,0,0,1,9,13.77a43.59,43.59,0,0,1,46.44,0,43.59,43.59,0,0,1-23.22,56Z"/><path class="cls-1" d="M50.74,18.65a34.63,34.63,0,0,0-13-4.92l-5.54,3.78-5.54-3.78a34.57,34.57,0,0,0-13,4.92,34.83,34.83,0,0,0,9.11,38.68V25l4.54,35.8v0a36.62,36.62,0,0,0,4.91,2.62,36.62,36.62,0,0,0,4.91-2.62v0L41.63,25V57.33a34.83,34.83,0,0,0,9.11-38.68Z"/></g></g></svg>',
                          width: 19.4,
                          height: 24.3,
                          margin: [0, 5, 0, 0],
                          alignment: 'left'
                        },
                        {
  
                          // text: [
                          //   {
                          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115.77 25.97"><defs><style>.cls-1{fill:#231f20;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M16.59,10.63c0-3.1-1.07-4-3.78-4A8.5,8.5,0,0,0,9,7.61a6.28,6.28,0,0,1,.53,2.9v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V10.63c0-3.1-.94-4-3.69-4a6.68,6.68,0,0,0-3.45,1V18.45A.58.58,0,0,1,.59,19,.58.58,0,0,1,0,18.45V6.26a.57.57,0,0,1,.56-.59.55.55,0,0,1,.56.59v.35A7.43,7.43,0,0,1,4.84,5.49c1.74,0,2.92.38,3.66,1.24A8.94,8.94,0,0,1,13,5.49c3.3,0,4.75,1.33,4.75,5v7.94a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59Z"/><path class="cls-1" d="M46.14,5.67a.52.52,0,0,1,.56.56,1.94,1.94,0,0,1-.15.59C46.05,8.26,43.28,16,42,18.33A1.14,1.14,0,0,1,41,19a1.15,1.15,0,0,1-1.07-.71c-1.26-2.36-4-10.07-4.54-11.51a1.9,1.9,0,0,1-.15-.62.52.52,0,0,1,.56-.53.59.59,0,0,1,.59.44c.39,1.15,2.95,8.47,4.61,11.75,1.65-3.28,4.22-10.6,4.6-11.75A.57.57,0,0,1,46.14,5.67Z"/><path class="cls-1" d="M54.71,5.49c3,0,4.73,2.07,4.73,3.72,0,3.19-3.6,3.92-9.39,3.95.12,2.66,1.8,4.9,4.49,4.9a10.12,10.12,0,0,0,4-1,1.36,1.36,0,0,1,.5-.15.56.56,0,0,1,.54.56.7.7,0,0,1-.45.59,10.9,10.9,0,0,1-4.54,1.15c-3.43,0-5.76-2.74-5.76-6.81C48.78,8.18,51.11,5.49,54.71,5.49Zm0,1.15C52,6.64,50.08,8.53,50,12.07c6,0,8.24-.85,8.24-2.86C58.23,8.12,57,6.64,54.71,6.64Z"/><path class="cls-1" d="M63.36,6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.29a6.8,6.8,0,0,1,3.6-1.06c3.6,0,6,2.69,6,6.79s-2.71,6.93-6.43,6.93a6.94,6.94,0,0,1-3.13-.94v7.11a.59.59,0,1,1-1.18,0ZM64.54,17a6.3,6.3,0,0,0,3.13,1c3.07,0,5.22-2.56,5.22-5.78,0-3.43-1.89-5.64-4.81-5.64a6.94,6.94,0,0,0-3.54,1Z"/><path class="cls-1" d="M83.18,5.49a4.61,4.61,0,0,1,1.35.15c.42.1.58.31.58.6a.59.59,0,0,1-.59.59c-.32,0-.77-.19-1.27-.19-1.27,0-4.13.68-4.13,6.32v5.49a.58.58,0,0,1-.59.59.57.57,0,0,1-.59-.59V6.26a.59.59,0,0,1,1.18,0v2.3A4.07,4.07,0,0,1,83.18,5.49Z"/><path class="cls-1" d="M88.09.59a.59.59,0,1,1,1.18,0V1.65a.59.59,0,1,1-1.18,0Zm0,5.67a.59.59,0,1,1,1.18,0V18.45a.59.59,0,1,1-1.18,0Z"/><path class="cls-1" d="M102.64,10.63c0-3.1-.94-4-3.84-4a7.55,7.55,0,0,0-3.63,1V18.45a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59V6.26a.57.57,0,0,1,.56-.59.54.54,0,0,1,.56.59v.35A7.9,7.9,0,0,1,99,5.49c3.51,0,4.81,1.36,4.81,5v7.94a.57.57,0,0,1-.59.59.58.58,0,0,1-.59-.59Z"/><path class="cls-1" d="M108.81,6.82h-1.66a.59.59,0,0,1-.62-.59.57.57,0,0,1,.62-.56h1.66V2.07a.59.59,0,1,1,1.18,0v3.6h4a.57.57,0,0,1,.62.56.58.58,0,0,1-.62.59h-4V14.2c0,3.42,1.77,3.86,3.19,3.86a4.15,4.15,0,0,0,1.29-.2,2.71,2.71,0,0,1,.77-.24.51.51,0,0,1,.53.53c0,.25-.15.44-.47.62a4.21,4.21,0,0,1-2.1.44c-2.06,0-4.39-.65-4.39-5Z"/><path class="cls-1" d="M32.34,6.38a10.42,10.42,0,0,0-11.13,0,10.43,10.43,0,0,0,5.56,13.41A10.43,10.43,0,0,0,32.34,6.38Zm-5.57,12A8.54,8.54,0,0,1,22.23,7.46a8.54,8.54,0,0,1,9.09,0,8.54,8.54,0,0,1-4.55,11Z"/></g></g></svg>',
                          width: 100,
                          height: 30,
                          margin: [5, 3, 0, 0],
                          alignment: 'left'
                          //text: '   moveprint',
                          // style: {
                          //   fontSize: 35,
                          //   //bold: true,
                          //   color: organisationColor,
                          //   margin: [0.5, 0, 0, 0],
                          //   alignment: 'left'
                          // }
                        },
                        {
                          text: 'Musculoskeletal Health Management',
                          width: 'auto',
                          italics: true,
                          margin: [13, 15, 13.5, 0],
                          style: {
                            fontSize: 11,
                            color: '#313133',
                            // margin: [13, 37, 13.5, 6]
                            //alignment: 'center'
                          }
                        }
  
                        //]
                        // }
                      ]
                    }
                  ],
                  [
                    {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                    }
                  ],
                  [
                    {
                      columns:
                        [
                          [{
                            text: [
                              { text: 'ORGANIZATION NAME: ', style: 'label' },
                              { text: combinedOutput.organisationName + '\n', style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'GROUP:', style: 'label' },
                              { text: '                           N/A', style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'TOTAL USERS:', style: 'label' },
                              { text: '                ' + totalUsers, style: 'value', bold: false }
                            ]
                          },
                          {
                            text: [
                              { text: 'DATE:', style: 'label' },
                              //{ text: moment(new Date()).format('DD/MM/YYYY hh:mm A'), style: 'date' }
                              { bold: false, text: '                              ' + moment(new Date()).format('MM/DD/YYYY') + '\n', style: 'value' }
                            ]
                          }
  
                          ],
                          {
                            columns: [
                              logo != "" ? {
                                image: logo,
                                width: 100,
                                margin: [130, 10, 0, 0],
                                height: 47,
                              } : ""
                            ]
                          }
                        ]
                    }
                  ],
                  [
                    {
                      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="520.793" height="1" viewBox="0 0 532.793 1"><line id="Line_4" data-name="Line 4" x2="532.793" transform="translate(0 0.5)" fill="none" stroke="#000" stroke-width="1"/></svg>'
                    }
                  ],
                  // ((req.query.id != "" && organisationSettings.isMskEnabled === true) || req.query.id === "") ?
                  [
                    {
                      layout: 'noBorders',
                      table: {
                        headerRows: 0,
                        widths: ['*', 300],
                        body: [
                          [
                            {
                              layout: 'noBorders',
                              margin: [8, 10, 10, 0],
                              table: {
                                heights: 50,
                                widths: [230],
                                body: [
                                  [{
                                    text: [{ text: 'MSK ORGANIZATON SUMMARY\n', fontSize: 9, bold: true }, '  ', { text: 'The chart below represents a summary of the current musculoskeletal health status of your entire organization.\n', fontSize: 8, color: '#707070' }],
                                    // fillColor: '#eeff00',       
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'HEALTH CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: 'Users in this category exhibit multiple or significant musculoskeletal health risk factors and need to seek a professional referral to a healthcare provider or a behavioral health specialist.\n', fontSize: 8, color: '#707070' }],
                                    // fillColor: '#00ff00',
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'WELLNESS CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: 'Users in this category exhibit manageable musculoskeletal health risk factors and may need to be under the supervision of fitness, healthcare or nutritional specialists while improving their movement quality.', fontSize: 8, color: '#707070' }],
                                    //fillColor: '#ff0000',
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'FITNESS CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: 'Users in this category exhibit minimal musculoskeletal health risk factors, do not currently require professional guidance and should follow Moveprint suggestions to progress toward individualized goals. \n', fontSize: 8, color: '#707070' }],
                                    height: 35
                                  }],
                                  [{
                                    text: [{ text: 'PERFORMANCE CATEGORY\n', fontSize: 9, bold: true }, '  ', { text: ' Users in this category exhibit no current musculoskeletal health risk factors and should be encouraged to continue to monitor their health and wellness.\n', fontSize: 8, color: '#707070' }],
                                    //fillColor: '#feddee',
                                    height: 35
                                  }]
                                ]
                              }
                            },
                            [
                              [{
                                height: 260,
                                width: 200,
                                alignment: 'left',
                                margin: [30, 0, 0, 0],
                                svg: generateDonutChart(combinedOutput.mskdata[0].percentage, combinedOutput.mskdata[3].percentage, combinedOutput.mskdata[1].percentage, combinedOutput.mskdata[2].percentage)
                              }],
                              [{
                                layout: 'noBorders',
                                table: {
                                  //columnGap: 5,
                                  //: [25, 10, 0, 0],
                                  widths: [38, 10, 37, 10, 38, 10, 45],
                                  //heights: [40, 40, 40, 40, 40, 40, 43],
                                  body: [
                                    [{
                                      text: combinedOutput.mskdata[0].count,
                                      bold: true,
                                      color: '#ffffff',
                                      fontSize: 20,
                                      margin: [5, 5, 5, 5],
                                      fillColor: '#EE93A1',
                                      alignment: 'center'
                                    },
                                    {
                                      text: '',
                                      width: 13
                                    },
                                    {
                                      text: combinedOutput.mskdata[1].count,
                                      bold: true,
                                      color: '#ffffff',
                                      margin: [5, 5, 5, 5],
                                      fillColor: '#FBC698',
                                      fontSize: 20,
                                      alignment: 'center'
                                    },
                                    {
                                      text: '',
                                      width: 13
                                    },
                                    {
                                      text: combinedOutput.mskdata[2].count,
                                      bold: true,
                                      color: '#ffffff',
                                      margin: [5, 5, 5, 5],
                                      fillColor: '#FCD783',
                                      fontSize: 20,
                                      alignment: 'center'
                                    },
                                    {
                                      text: '',
                                      width: 13
                                    },
                                    {
                                      text: combinedOutput.mskdata[3].count,
                                      bold: true,
                                      color: '#ffffff',
                                      margin: [5, 5, 5, 5],
                                      fontSize: 20,
                                      fillColor: '#BED6A7',
                                      alignment: 'center'
                                    }],
                                    [{ text: 'HEALTH', alignment: 'center', bold: true, fontSize: 7 }, '', { text: 'WELLNESS', fontSize: 7, bold: true, alignment: 'center' }, '', { text: 'FITNESS', bold: true, fontSize: 7, alignment: 'center' }, '', { text: 'PERFORMANCE', fontSize: 6, bold: true, alignment: 'left' }]
                                  ]
                                }
                              }
                              ]
                            ]
                          ]
                        ]
                        
                      }
                    }
                  ]
                  // : [{
                  //   text: ''
                  // }]
                  ,
                  [{
                    text: ' '
                  }],
                  // [{
                  //   text: 'MOVEPRINT ORGANISATION SUMMARY',
                  //   bold: true,
                  //   fontSize: 10
                  // }],
  
                  [{
                    fillColor: '#f9f9f9',
                    widths: [275],
                    //margin: [2, 0, 0, 0],
                    layout: {
  
                      hLineColor: function (i, node) {
                        return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
                      },
                      vLineColor: function (i, node) {
                        return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
                      }
                    },
                    //layout: 'noBorders',
                    table: {
                      body: [
                        [{
                          border: [true, true, true, false],
                          text: 'MOVEPRINT ORGANIZATION SUMMARY',
                          bold: true,
                          fontSize: 10,
                          margin: [0, 2, 0, 0]
                        }
                        ],
                        [
                          {
                            border: [true, false, true, false],
                            columns: [
                              {
                                text: 'The chart below represents a summary of the average MovePrint scores\n for each test in organization.',
                                width: 268,
                                fontSize: 7,
                                color: '#707070',
                                margin: [5, 10, 0, 0]
                              },
                              {
                                text: 'ORGANIZATIONS FOCUS',
                                bold: true,
                                fontSize: 7,
                                width: 130,
                                margin: [0, 15, 0, 0]
                              },
                              {
                                text: 'USERS INDICATED PAIN',
                                bold: true,
                                fontSize: 7,
                                width: 95,
                                margin: [0, 15, 0, 0]
                              }
                            ]
                          }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            // {
                            //   text: ' ',
                            //   width: 270,
                            //   fontSize: 7,
                            //   color: '#707070',
                            //   margin: [5, 5, 0, 0]
                            // },
                            { text: 'TOE TOUCH', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 7, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                              width: 150,
                              height: 19,
                              margin: [0, 4, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 65, margin: [0, 7, 0, 0], style: 'per' },
                            {
                              width: 140,
                              text: orgFocus,
                              bold: true,
                              fontSize: 9,
                              color: '#959595',
                              alignment: 'left',
                              margin: [15, 6, 0, 0],
                              // columns: [
                              //   //await getFocusImage(orgFocus),
                              //   {
                              //     text: orgFocus, bold: true,
                              //     fontSize: 9,
                              //     color: '#959595'
                              //   }
                              // ]
                            },
                            { text: totalPainUsers, fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }
                            // { text: '10', fontSize: 18, margin: [15, 0, 0, 0], width: 40, bold: true, color: '#414141' },
                            // {
                            //   text: 'USERS',  bold: true,
                            //   fontSize: 7, color: '#959595',
                            //   margin: [0, 8, 0, 0],
                            // }
                            // {
  
                            //   text: [ {
                            //     text: 'USERS', margin: [0, 15, 0, 5], bold: true,
                            //     fontSize: 7, color: '#959595'
                            //   }],
                            //  // width: 100
                            // }
                          ]
                        }],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            // { text: 'TOE TOUCH', fontSize: 8, width: 50 },
                            // {
                            //   svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                            //   width: 180
                            // },
                            // { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 48, style: 'per' },
                            { text: 'UB MOBILITY', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 4, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                              width: 150,
                              height: 19
                              //margin: [0, 4, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', width: 65, margin: [0, 5, 0, 0], style: 'per' },
                            {
                              text: 'FOCUS  TOE TOUCH',
                              bold: true,
                              fontSize: 7,
                              width: 130,
                              margin: [10, 5, 0, 0]
                            },
                            {
                              text: 'FOCUS  UB MOBILITY',
                              bold: true,
                              fontSize: 7,
                              width: 80,
                              margin: [10, 5, 0, 0]
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            { text: 'ROTATION', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 5, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[2].percentage)),
                              width: 150,
                              height: 19,
                              margin: [0, 2, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', width: 65, margin: [0, 6, 0, 0], style: 'per' },
  
                            { text: focusArray['TOE TOUCH'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              width: 95,
                              margin: [0, 8, 0, 0],
                            },
                            { text: focusArray['UPPER BODY MOBILITY'], fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }
  
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            // { text: 'TOE TOUCH', fontSize: 8, width: 50 },
                            // {
                            //   svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                            //   width: 180
                            // },
                            // { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 48, style: 'per' },
                            { text: 'SQUAT', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 4, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                              width: 150,
                              height: 19
                              // margin: [0, 4, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 65, margin: [0, 5, 0, 0], style: 'per' },
  
                            {
                              text: 'FOCUS  ROTATION',
                              bold: true,
                              fontSize: 7,
                              width: 130,
                              margin: [10, 5, 0, 0]
                            },
                            {
                              text: 'FOCUS  SQUAT',
                              bold: true,
                              fontSize: 7,
                              width: 80,
                              margin: [10, 5, 0, 0]
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            { text: 'BALANCE', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 6, 0, 3] },
                            {
                              svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                              width: 150,
                              height: 19,
                              margin: [0, 3, 0, 0]
                            },
                            { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 65, margin: [0, 6, 0, 0], style: 'per' },
  
                            { text: focusArray['ROTATION'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              width: 95,
                              margin: [0, 8, 0, 0],
                            },
                            { text: focusArray['SQUAT'], fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, false],
                          columns: [
                            { text: 'PASS', fontSize: 7, width: 45, color: '#707070', bold: true, alignment: 'center', margin: [2, 6, 0, 3] },
                            {
                              svg: setProgress(Math.round((pass*finalMpCount)/100)),
                              width: 150,
                              height: 19,
                              // margin: [0, 3, 0, 0]
                            },
                            { text: Math.round(Math.round((pass*finalMpCount)/100)) + '%', width: 65, margin: [0, 6, 0, 0], style: 'per' },
                            // { text: '', fontSize: 7, width: 260, color: '#707070', margin: [2, 5, 0, 3] },
                            {
                              text: 'FOCUS  BALANCE',
                              bold: true,
                              fontSize: 7,
                              width: 130,
                              margin: [10, 5, 0, 0]
                            },
                            {
                              text: 'FOCUS  PASS',
                              bold: true,
                              fontSize: 7,
                              width: 80,
                              margin: [10, 5, 0, 0]
                            }
                          ]
                        }
                        ],
                        [{
                          border: [true, false, true, true],
                          columns: [
                            { text: '', fontSize: 7, width: 260, color: '#707070', margin: [2, 5, 0, 3] },
                            { text:  focusArray['BALANCE & REACH'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              width: 95,
                              margin: [0, 8, 0, 0],
                            },
                            { text: focusArray['SYMMETRY'], fontSize: 15, margin: [10, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            {
                              text: 'USERS', bold: true,
                              fontSize: 7, color: '#959595',
                              margin: [0, 8, 0, 0],
                            }
  
                            // { text: focusArray['BALANCE & REACH'], fontSize: 15, margin: [15, 0, 0, 2], width: 45, bold: true, color: '#414141' },
                            // {
                            //   text: 'USERS', bold: true,
                            //   fontSize: 7, color: '#959595',
                            //   width: 100,
                            //   margin: [0, 8, 0, 5],
                            // }
                          ]
                        }
                        ]
                        // [{
                        //   columns: [
                        //     { text: 'UB MOBILITY', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: [{ text: focusArray['TOE TOUCH'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 150
  
                        //     },
                        //     {
                        //       text: [{ text: focusArray['UPPER BODY MOBILITY'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 100
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     { text: 'ROTATION', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[2].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: 'FOCUS  ROTATION',
                        //       bold: true,
                        //       fontSize: 7,
                        //       width: 150
                        //     },
                        //     {
                        //       text: 'FOCUS  SQUAT',
                        //       bold: true,
                        //       fontSize: 7,
                        //       width: 100
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     { text: 'SQUAT', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[3].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[3].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: [{ text: focusArray['ROTATION'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 150
  
                        //     },
                        //     {
                        //       text: [{ text: focusArray['SQUAT'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       width: 100
  
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     { text: 'BALANCE', fontSize: 8, width: 50 },
                        //     {
                        //       svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                        //       width: 180
                        //     },
                        //     { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 48, style: 'per' },
                        //     {
                        //       text: 'FOCUS   BALANCE',
                        //       bold: true,
                        //       fontSize: 7,
                        //       width: 150
                        //     },
                        //     {
                        //       text: '',
                        //       bold: true,
                        //       fontSize: 9,
                        //       width: 100
                        //     }
                        //   ]
                        // }
                        // ],
                        // [{
                        //   columns: [
                        //     {
                        //       text: '',
                        //       width: 280
                        //     },
                        //     {
                        //       text: [{ text: focusArray['BALANCE & REACH'], fontSize: 18, bold: true, color: '#414141' }, {
                        //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                        //       }],
                        //       //margin: [10, 0, 0, 0],
                        //       width: 100
  
                        //     }
                        //   ]
                        // }
                        // ]
                      ]
                    }
                  }],
                  // [{
                  //   columns: [
                  //     {
                  //       text: 'The chart below represents a summary of the average MovePrint scores\n for each test in organization.',
                  //       width: 270,
                  //       fontSize: 8,
                  //       color: '#707070'
                  //     },
                  //     {
                  //       text: 'ORGANISATIONS FOCUS',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 150,
                  //       margin: [10, 0, 0, 0]
                  //     },
                  //     {
                  //       text: 'USERS INDICATED PAIN',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 100
                  //     }
                  //   ]
                  // }],
                  // [{
                  //   columns: [
                  //     {
                  //       text: '',
                  //       width: 280,
                  //       fontSize: 8,
                  //     },
                  //     {
                  //       width: 150,
                  //       text: orgFocus,
                  //       bold: true,
                  //       fontSize: 9,
                  //       color: '#959595'
                  //       // columns: [
                  //       //   //await getFocusImage(orgFocus),
                  //       //   {
                  //       //     text: orgFocus, bold: true,
                  //       //     fontSize: 9,
                  //       //     color: '#959595'
                  //       //   }
                  //       // ]
                  //     },
                  //     {
                  //       text: [{ text: totalPainUsers, fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true,
                  //         fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 100
                  //     }
                  //   ]
                  // }],
                  // [{
                  //   columns: [
                  //     { text: 'TOE TOUCH', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: 'FOCUS  TOE TOUCH',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 145
                  //     },
                  //     {
                  //       text: 'FOCUS  UB MOBILITY',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'UB MOBILITY', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: [{ text: focusArray['TOE TOUCH'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 150
  
                  //     },
                  //     {
                  //       text: [{ text: focusArray['UPPER BODY MOBILITY'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'ROTATION', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[2].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: 'FOCUS  ROTATION',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 150
                  //     },
                  //     {
                  //       text: 'FOCUS  SQUAT',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'SQUAT', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[3].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[3].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: [{ text: focusArray['ROTATION'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 150
  
                  //     },
                  //     {
                  //       text: [{ text: focusArray['SQUAT'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       width: 100
  
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     { text: 'BALANCE', fontSize: 8, width: 50 },
                  //     {
                  //       svg: setProgress(parseInt(combinedOutput.mptdata[4].percentage)),
                  //       width: 180
                  //     },
                  //     { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', width: 48, style: 'per' },
                  //     {
                  //       text: 'FOCUS   BALANCE',
                  //       bold: true,
                  //       fontSize: 7,
                  //       width: 150
                  //     },
                  //     {
                  //       text: '',
                  //       bold: true,
                  //       fontSize: 9,
                  //       width: 100
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   columns: [
                  //     {
                  //       text: '',
                  //       width: 280
                  //     },
                  //     {
                  //       text: [{ text: focusArray['BALANCE & REACH'], fontSize: 18, bold: true, color: '#414141' }, {
                  //         text: '   USERS', bold: true, fontSize: 9, color: '#959595'
                  //       }],
                  //       //margin: [10, 0, 0, 0],
                  //       width: 100
  
                  //     }
                  //   ]
                  // }
                  // ],
                  // [{
                  //   table: {
                  //     widths: [270, 250],
                  //     heights: [200, 200],
                  //     body: [
                  //       [{
                  //         fillColor: "#eeeeee", text: [
  
                  //             {text: 'MSK SUMMARY ', fontSize: 15, bold: true},
                  //         '\n You can declare how many rows should be treated as a header\n',
                  //         {
                  //           alignment: 'justify',
                  //           columns: [
                  //             {text: 'Toe Touch', fontSize: 8},
                  //               {
                  //               svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //               width: 50
                  //             },
                  //             { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%' , style: 'value' }
                  //           ]
                  //         },
                  //           // {
                  //           //   text: [
                  //           //     {text: 'Toe Touch', fontSize: 8},
                  //           //     {
                  //           //     svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //           //     width: 50
                  //           //   },
                  //           //   { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%' , style: 'value' }
                  //           //   ]
                  //           // },
                  //            {
                  //             text: ' ohiu'
                  //           }
                  //         ]
                  //       },
                  //       { fillColor: "#eeeeee", text: 'TOE TOUCH', style: 'value' }]
                  //     ]
                  //   }
                  // }],
                  // [{ text: 'TOE TOUCH', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(parseInt(combinedOutput.mptdata[0].percentage)),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[0].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'UPPER BODY MOBILITY', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(parseInt(combinedOutput.mptdata[1].percentage)),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[1].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'ROTATION', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(combinedOutput.mptdata[2].percentage),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[2].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'SQUAT', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(combinedOutput.mptdata[3].percentage),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[3].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  // [{ text: 'BALANCE & REACH', style: 'value' }],
                  // [{
                  //   columns: [{
                  //     svg: setProgress(combinedOutput.mptdata[4].percentage),
                  //     width: 450
                  //   },
                  //   { text: Math.round(parseFloat(combinedOutput.mptdata[4].percentage)) + '%', style: 'per' }
                  //   ]
                  // }],
                  [{
                    //fillColor: organisationColor,
                    //layout: 'noBorders',
                    pageBreak: 'before',
                    text: {
                      text: '',
                      style: 'header'
                    }
                  }],
                  [{
                    text: 'ORGANIZATION SUMMARY',
                    bold: true,
                    fontSize: 10
                  }],
                  [{
                    text: 'The data below represents a summary of the current musculoskeletal health status of your primary organization and each of your sub-organizations. It displays the users in each MSK category by total number and percentage. Your organization can use this data to identify and monitor users in the high musculoskeletal risk categories and drive decision making regarding professional referrals.',
                    fontSize: 8,
                    color: '#707070',
                    // width: 500,
                    margin: [5, 0, 0, 10]
                  }],
                  [{
                    text: ''
                  }],
                  [{
                    text: ''
                  }],
                  (root_org_exists == false)?[{
  
                    //layout: 'noBorders',
                    //fillColor: '#ebebeb',
                    table: {
                      widths: [150, 66, 66, 66, 66, 58],
                      headerRows: 1,
                      heights: [20, 19, 25],
                      body: [
                        [{ text: 'PRIMARY ORGANIZATION', border: [false, false, true, true], alignment: 'left', fillColor: '#ffffff', bold: true, fontSize: 10 }, { text: 'B-HEALTH', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'HEALTH', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'WELLNESS', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'FITNESS', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }, { text: 'PERFORMANCE', fillColor: '#f9f9f9', margin: [0, 5, 0, 5], style: 'headerrow' }],
  
                        [{ text: combinedOutput.organisationName.toUpperCase(), border: [true, true, true, false], margin: [3, 15, 0, 0], alignment: 'left', fillColor: '#f9f9f9', bold: true, fontSize: 8 }, { text: Math.round(bhealthPercentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(healthPercentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(combinedOutput.mskdata[1].percentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(combinedOutput.mskdata[2].percentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }, { text: Math.round(combinedOutput.mskdata[3].percentage) + '%', fillColor: '#f9f9f9', margin: [0, 10, 0, 5], style: 'tablerow' }],
  
                        [{ fillColor: '#f9f9f9', margin: [0, 7, 0, 5], border: [true, false, true, true], text: [{ text: 'USERS  ', fontSize: 7, color: '#959595', alignment: 'right', bold: true }, { text: finalMskCount, style: 'userdata' }] }, { text: bhealthCount, margin: [0, 7, 0, 5], style: 'healthdata' }, { text: healthCount, margin: [0, 7, 0, 5], style: 'healthdata' }, { text: combinedOutput.mskdata[1].count, margin: [0, 7, 0, 5], style: 'wellnessdata' }, { text: combinedOutput.mskdata[2].count, margin: [0, 7, 0, 5], style: 'fitnessdata' }, { text: combinedOutput.mskdata[3].count, margin: [0, 7, 0, 5], style: 'performancedata' }]
                      ]
                    },
                    layout: {
                      hLineColor: function (i, node) {
                        return (i === 0 || i === node.table.body.length) ? '#ebebeb' : '#ebebeb';
                      },
                      vLineColor: function (i, node) {
                        return (i === 0 || i === node.table.widths.length) ? '#ebebeb' : '#ebebeb';
                      }
                    }
                  }]: [{
                    text: ''
                  }],
                  [{
                    text: ''
                  }],
                  [{
                    text: ''
                  }],
                  [{
                    text: 'SUB-ORGANIZATIONS',
                    fontSize: 10,
                    bold: true
                  }],
                  (req.query.id.length > 0 && combinedOutput.organisationName != "") ? await orgResult(finalJson) : [{ text: '' }]
                ]
              }
            }
          ],
          styles: {
            header: {
              fontSize: 18,
              bold: true,
              alignment: 'center',
              color: '#ffffff'
            },
            subheader: {
              fontSize: 15,
              color: organisationColor
            },
            quote: {
              italics: true
            },
            small: {
              fontSize: 8
            },
            label: {
              fontSize: 10,
              bold: true,
              color: '#414141',
              margin: [0, 2]
            },
            value: {
              fontSize: 10,
              color: '#414141',
              bold: true,
              //margin: [0, 2]
            },
            headerrow: {
              fontSize: 7,
              bold: true,
              color: '#000000',
              alignment: 'center'
            },
            tablerow: {
              fontSize: 7,
              fillColor: '#ebebeb',
              bold: true,
              color: '#959595',
              alignment: 'center'
            },
            userdata: {
              fontSize: 7,
              bold: true,
              alignment: 'right'
            },
            healthdata: {
              fontSize: 7,
              bold: true,
              fillColor: '#EE93A1',
              alignment: 'center'
            },
            wellnessdata: {
              fontSize: 7,
              bold: true,
              fillColor: '#FBC698',
              alignment: 'center'
            },
            fitnessdata: {
              fontSize: 7,
              bold: true,
              fillColor: '#FCD783',
              alignment: 'center'
            },
            performancedata: {
              fontSize: 7,
              bold: true,
              fillColor: '#bed6a7',
              alignment: 'center'
            },
            date: {
              fontSize: 8,
              alignment: 'left'
            },
            per: {
              fontSize: 8,
              margin: [5, 0]
            },
            category: {
              fontSize: 8,
              color: organisationColor,
              margin: [5, 0]
            }
          }
        };
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=pdfmake.pdf');
        var pdfDoc = printer.createPdfKitDocument(docDefinition);
        pdfDoc.pipe(res);
        pdfDoc.end();
        // return res.status(200).json({
        //   status: 200,
        //   message: finalJson,
        //   combinedop: combinedOutput
        // })
      }
    } catch (e) {
      console.log(e)
      return res.status(210).json({
        status: 210,
        message: e
      })
    }
  
  },
  // groumaskWeb end
  organisationUserResultsData: async (req, res) => {

    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    let result = [];
    const recordsPerPage = 20; // recordss per page
    const currentPage = parseInt(req.body.page) || 1; // Page 
    var totalUsers = [];
    console.log("org users results", req.body)
    if (req.body.category != "") {
      if (req.body.focusarea != "") {

        totalUsers = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", org_id: { "$first": "$mskresult.org_id" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": req.body.category } }, { $project: { mskCategory: 1, _id: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $match: { "focusarea": req.body.focusarea } }]).exec();
      } else {

        totalUsers = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", org_id: { "$first": "$mskresult.org_id" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": req.body.category } }, { $project: { mskCategory: 1, _id: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id" } }]).exec();
      }
    } else {
      if (req.body.focusarea != "") {

        totalUsers = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", org_id: { "$first": "$mskresult.org_id" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { org_id: 1, mskCategory: 1, _id: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" } } }, { $match: { "focusarea": req.body.focusarea } }]).exec();

      } else {

        totalUsers = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), "roles.role_id": "1", isDeleted: false } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: { path: "$result", preserveNullAndEmptyArrays: true } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", org_id: { "$first": "$result.org_id" }, userid: { "$first": "$_id" }, email: { "$first": "$email" } } }, { $project: { email: 1, org_id: 1, _id: "$userid" } }]).exec();

      }
    }
    console.log("org total users", totalUsers.length)
    let totalPages = Math.ceil((totalUsers.length) / recordsPerPage);
    if (currentPage < 0 || currentPage === 0) {
      return res.status(200).json({
        status: 200,
        message: "invalid page number, should start with 1",
        users: [],
        totalUsers: totalUsers.length,
        totalpages: totalPages,
        currentpage: req.body.page
      })
    } else {
      if (req.body.category != "") {
        if (req.body.focusarea != "") {

          result = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskCategory: { "$first": "$mskresult.mskCategory" }, mskdate: { "$first": "$mskresult.mskdate" } } }, { $match: { "mskCategory": req.body.category } }, { $project: { email: 1, first: 1, last: 1, org_id: 1, mskdate: 1, mskCategory: 1, _id: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, mskCategory: { "$first": "$mskCategory" }, mptdate: { "$first": "$result.mptdate" }, org_id: { "$first": "$result.org_id" }, focusarea: { "$first": "$result.focusarea" } } }, { $match: { "focusarea": req.body.focusarea } }, { $sort: { _id: 1 } }, { $skip: (recordsPerPage * (currentPage - 1)) }, { $limit: recordsPerPage }, { $project: { email: 1, mptdate: 1, first: 1, last: 1, org_id: 1, mskCategory: 1, focusarea: 1, mskdate: 1, _id: 1 } }, { $sort: { first: 1 } }]).exec();

        } else {

          result = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $match: { "mskCategory": req.body.category } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, mskCategory: 1, _id: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, focusarea: { "$first": "$result.focusarea" }, mptdate: { "$first": "$result.mptdate" } } }, { $sort: { _id: 1 } }, { $skip: (recordsPerPage * (currentPage - 1)) }, { $limit: recordsPerPage }, { $project: { email: 1, first: 1, last: 1, org_id: 1, mskCategory: 1, focusarea: 1, mskdate: 1, mptdate: 1, _id: 1 } }, { $sort: { first: 1 } }]).exec();

        }
      } else {
        if (req.body.focusarea != "") {

          result = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), isDeleted: false, "roles.isMovementDone": true, "roles.isMSKDone": true } }, { $lookup: { from: "msk_result", localField: "_id", foreignField: "user_id", as: "mskresult" } }, { $unwind: "$mskresult" }, { $match: { "mskresult.org_id": ObjectId(req.body.id) } }, { $sort: { "mskresult.mskdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, org_id: { "$first": "$mskresult.org_id" }, mskdate: { "$first": "$mskresult.mskdate" }, mskCategory: { "$first": "$mskresult.mskCategory" } } }, { $project: { email: 1, first: 1, last: 1, mskdate: 1, org_id: 1, mskCategory: 1, _id: 1 } }, { "$lookup": { "from": "results", localField: "_id", foreignField: "user_id", "as": "result" } }, { $unwind: "$result" }, { $match: { "result.org_id": ObjectId(req.body.id) } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", email: { "$first": "$email" }, first: { "$first": "$first" }, last: { "$first": "$last" }, mskdate: { "$first": "$mskdate" }, mskCategory: { "$first": "$mskCategory" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, focusarea: { "$first": "$result.focusarea" } } }, { $match: { "focusarea": req.body.focusarea } }, { $sort: { _id: 1 } }, { $skip: (recordsPerPage * (currentPage - 1)) }, { $limit: recordsPerPage }, { $project: { email: 1, mskdate: 1, first: 1, last: 1, org_id: 1, focusarea: 1, mskCategory: 1, mptdate: 1, _id: 1 } }, { $sort: { first: 1 } }]).exec();

        } else {

          result = await User.aggregate([{ $match: { "roles.org_id": ObjectId(req.body.id), "roles.role_id": "1", isDeleted: false } }, { $skip: (recordsPerPage * (currentPage - 1)) }, { $limit: recordsPerPage }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: { path: "$result", preserveNullAndEmptyArrays: true } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", focusarea: { "$first": "$result.focusarea" }, org_id: { "$first": "$result.org_id" }, mptdate: { "$first": "$result.mptdate" }, first: { "$first": "$first" }, userid: { "$first": "$_id" }, email: { "$first": "$email" }, last: { "$first": "$last" } } }, { $sort: { _id: 1 } }, { $project: { first: 1, last: 1, email: 1, _id: "$userid", focusarea: 1, org_id: 1, mptdate: 1, mskCategory: "", mskdate: "" } }, { $sort: { first: 1 } }]).exec();

        }
      }
    }
    let finalResult = [];
    if (result.length > 0) {
      for (let i = 0; i < result.length; i++) {
        if (result[i].first === undefined || result[i].first === null) {
          finalResult.push({
            "userid": result[i]._id,
            "email": result[i].email,
            "name": result[i].email,
            "org_id": result[i].org_id,
            "mskdate": result[i].mskdate,
            "mptdate": result[i].mptdate,
            "focusarea": ((ObjectId(result[i].org_id).valueOf().toString() === req.body.id && result[i].focusarea != "") ? result[i].focusarea : "N/A"),
            "mskcategory": result[i].mskCategory || "N/A"
          })
        } else {
          finalResult.push({
            "userid": result[i]._id,
            "email": result[i].email,
            "name": result[i].first + ' ' + result[i].last,
            "mskdate": result[i].mskdate,
            "mptdate": result[i].mptdate,
            "org_id": result[i].org_id,
            "focusarea": ((ObjectId(result[i].org_id).valueOf().toString() === req.body.id && result[i].focusarea != "") ? result[i].focusarea : "N/A"),
            "mskcategory": result[i].mskCategory || "N/A"
          })
        }
      }
      return res.status(200).json({
        status: 200,
        message: "Organisation Clients",
        users: finalResult,
        totalUsers: totalUsers.length,
        totalpages: totalPages,
        currentpage: req.body.page
      })
    } else {
      return res.status(200).json({
        status: 200,
        message: "Organisation Clients",
        users: [],
        totalUsers: totalUsers.length,
        totalpages: totalPages,
        currentpage: req.body.page
      })
    }
  },
  checkMPStatus: async (req, res) => {
    Result.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err || !result) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        let isMpRecent = false;
        let mskExpired = false;
        let mskresult = await MskResult.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ mskdate: -1 }).limit(1).exec();
        if (mskresult.length > 0) {
          var activitydate = new Date(mskresult[0].mskdate);
          var now = new Date();
          now = moment(now).utc();
          activitydate = moment(activitydate).utc();
          let mskDays = now.diff(activitydate, 'days');
          console.log(mskDays);
          mskExpired = mskDays >= 45 ? true : false;
        }
        if (result.length > 0) {
          let activitydate = new Date(result[0].mptdate);
          let now = new Date();
          now = moment(now).utc();
          activitydate = moment(activitydate).utc();
          days = now.diff(activitydate, 'days');
          if (days <= 7 || !mskExpired) {
            isMpRecent = false;
          }
          else {
            isMpRecent = true;
          }
        } else {
          isMpRecent = true;
        }
        return res.status(200).json({
          status: 200,
          message: 'Moveprint status',
          isMpRecent: isMpRecent
        })
      }
    })
  },
  todayExercises: async (req, res) => {

    console.log('input org id', req.body);
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err || !result) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        let week1Exercises = [];
        let week2Exercises = [];
        if (result[0].recommended_exercises.length == 0) {
          result[0].recommended_exercises = await correctiveExercises(result[0].movementscore, '1');
          result[0].recommended_exercises = result[0].recommended_exercises.concat(await correctiveExercises(result[0].movementscore, '2'));
        }
        result[0].recommended_exercises.filter(r => {
          if (r.week === "1") {
            week1Exercises.push(r);
          } else {
            week2Exercises.push(r);
          }
        })
        console.log(week2Exercises.length, week1Exercises.length)
        let preresult = [];
        let finalresult = [];
        if (result[0].exercises.length === 0) {
          return res.status(200).json({
            status: 200,
            exercises: week1Exercises
          })
        } else {
          let uniqueDates = [];
          result[0].exercises.forEach(r => {
            if (!(uniqueDates.find(item => { return item === r.exercisedate }) || []).length > 0)
              uniqueDates.push(r.exercisedate);
          })
          let temp = []
          // let count = 0;
          // let weekNumber = '';
          // let progress = 0;
          // uniqueDates.forEach(d => {
          // 	result[0].exercises.filter(r => {
          // 		if (r.exercisedate === d) {
          // 			weekNumber = r.week;
          // 			count = count + 1;
          // 		}
          // 	})
          // 	console.log('count', count);
          // 	if (weekNumber === "1") {
          // 		if (count >= Math.round(week1Exercises.length / 2))
          // 			progress = progress + 1;
          // 	} else {
          // 		if (count >= Math.round(week2Exercises.length / 2))
          // 			progress = progress + 1;
          // 	}
          // 	count = 0;
          // })
          // console.log('progress', progress)
          result[0].exercises.filter(r => {
            if (r.exercisedate === uniqueDates[uniqueDates.length - 1]) {
              temp.push({
                "week": r.week,
                "name": r.name,
                "title": r.title,
                "status": r.status,
                "exercisedate": r.exercisedate
              });
            }
          })
          if (temp[0].week === "1") {
            console.log(moment(Date.now()).utc().format('YYYY-MM-DD').toString(), temp[0].exercisedate)
            if (moment(Date.now()).utc().format('YYYY-MM-DD').toString() === temp[0].exercisedate) {
              preresult = week1Exercises;
            }
            else {
              if (temp.length >= Math.round(week1Exercises.length / 2)) {
                preresult = week2Exercises;
              } else {
                preresult = week1Exercises;
              }
            }
          } else {
            if (moment(Date.now()).utc().format('YYYY-MM-DD').toString() === temp[0].exercisedate) {
              preresult = week2Exercises;
            }
            else {
              if (temp.length >= Math.round(week2Exercises.length / 2)) {
                preresult = week1Exercises;
              } else {
                preresult = week2Exercises;
              }
            }
          }
          return res.status(200).json({
            status: 200,
            exercises: preresult
          })
        }
      }
    });
  },
  saveTodayExercise: async (req, res) => {
    let totalLength = 0;
    let completedAll = false;
    console.log('save today ex', req.body);
    Result.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }, { exercises: 1, mptdate: 1 }).sort({ _id: -1 }).limit(1).exec(async (err, mpData) => {
      if (err) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        if (mpData[0].exercises.length > 0) {
          for (let i = 0; i < mpData[0].exercises.length; i++) {
            console.log(req.body.exercisedate, mpData[0].exercises[i].exercisedate)
            if (req.body.exercisedate === mpData[0].exercises[i].exercisedate) {
              totalLength = totalLength + 1;
            }
          }
        }
        if (req.body.type === "repeat") {
          Result.updateOne({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id), mptdate: mpData[0].mptdate }, {
            $pull: {
              "exercises": {
                "name": req.body.name,
                "title": req.body.title,
                "exercisedate": req.body.exercisedate
              }
            }
          }).exec(err, r => {
            if (err) {
              console.log('aff', err)
            } else {
              console.log('f', r)
              let doc = {
                "name": req.body.name,
                "title": req.body.title,
                "status": req.body.status,
                "exercisedate": req.body.exercisedate
              }
              Result.updateOne({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id), mptdate: mpData[0].mptdate }, { $push: { exercises: doc } }, (err, u) => {
                if (err) {
                  console.log(err)
                  return res.status(210).json({
                    status: 210,
                    message: err
                  })
                } else {
                  console.log(totalLength, u);
                  if (mpData[0].exercises.length > 0) {
                    if (req.body.type === "start") {
                      if ((totalLength + 1) === req.body.totalExercises) {
                        completedAll = true;
                      }
                    } else {
                      if (totalLength === req.body.totalExercises) {
                        completedAll = true;
                      }
                    }
                  } else if (req.body.totalExercises === 1) {
                    completedAll = true;
                  }
                  console.log('completion status', completedAll)
                  return res.status(200).json({
                    status: 200,
                    message: "Saved today's exercise",
                    completionStatus: false
                  })
                }
              })
            }
          });
        } else {
          let doc = {
            "name": req.body.name,
            "title": req.body.title,
            "status": req.body.status,
            "exercisedate": req.body.exercisedate
          }
          Result.updateOne({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id), mptdate: mpData[0].mptdate }, { $push: { exercises: doc } }, (err, u) => {
            if (err) {
              console.log(err)
              return res.status(210).json({
                status: 210,
                message: err
              })
            } else {
              console.log(totalLength, u);
              if (mpData[0].exercises.length > 0) {
                if (req.body.type === "start") {
                  if ((totalLength + 1) === req.body.totalExercises) {
                    completedAll = true;
                  }
                }
              } else if (req.body.totalExercises === 1) {
                completedAll = true;
              }
              console.log('completion status', completedAll)
              return res.status(200).json({
                status: 200,
                message: "Saved today's exercise",
                completionStatus: completedAll
              })
            }
          })
        }
      }
    });
  },
  recommendedExerciseDetails: async (req, res) => {
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    await Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err) {
        return res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        let exerciseDetails = [];
        let previousDay = false;
        let nextDay = false;
        let uniqueDates = [];
        result[0].exercises.forEach(r => {
          if (!(uniqueDates.find(item => { return item === r.exercisedate }) || []).length > 0)
            uniqueDates.push(r.exercisedate);
        })
        uniqueDates.forEach(r => {
          let previousDate = moment(req.body.exercisedate, 'YYYY-MM-DD').utc().subtract(1, 'days').format('YYYY-MM-DD');
          let nextDate = moment(req.body.exercisedate, 'YYYY-MM-DD').utc().add(1, 'days').format('YYYY-MM-DD');
          console.log(previousDate, nextDate)
          if (r === previousDate)
            previousDay = true;
          if (r === nextDate)
            nextDay = true;

        })
        result[0].exercises.forEach(r => {
          if (r.exercisedate === req.body.exercisedate)
            exerciseDetails.push({
              "name": r.name,
              "status": r.status
            });
        })
        return res.status(200).json({
          status: 200,
          message: "Recommended Exercises History",
          exerciseDetails: exerciseDetails,
          previousDayPerformed: previousDay,
          nextDayPerformed: nextDay
        })
      }
    });
  },
  sendNewMskNotification: async () => {
    let userList = [];
    let userDeviceIds = [];
    let userIds = [];
    userList = await NotificationQueue.aggregate([{ $match: { message_type: "MSK", status: false, schedule_date: { $lte: moment(Date.now()).utc().format('MM/DD/YYYY') } } }, { $lookup: { from: "users", localField: "user_id", foreignField: "_id", as: "user" } }, { $match: { "user.settings.enablePushNotifications": true } }, { $project: { deviceId: 1, user_id: 1 } }]).exec();
    userList.forEach(u => {
      userDeviceIds.push(u.deviceId);
      userIds.push(u.user_id);
    })
    console.log('in msk', moment(Date.now()).utc().format('MM/DD/YYYY'))
    // if (userDeviceIds.length > 0){
    //   await util.subscribeTopic("multi", userDeviceIds, "MSK");
    // }
    let fcmdata = {
      title: 'Moveprint',
      navigationType: "NEWMSK",
      body: "Let's take a closer look at your wellness progress. Log in now and answer your lifestyle questions to check your new category.",
      notification_type: "g",
      group_name: "MSK",
      user_ids: await userList
    };
    let fcmStatus = await util.pushnotification(fcmdata, " ", "group", userDeviceIds);
    console.log('fcm status', fcmStatus);
    // if (userDeviceIds.length > 0){
    //   await util.unsubscribeTopic("multi", userDeviceIds, "MSK");
    // }
  },
  sendDailyExerciseNotifications: async () => {
    let userList = [];
    let userDeviceIds = [];
    let userIds = [];
    userList = await User.aggregate([{ $match: { deviceId: { $ne: null }, isDeleted: false, "settings.enablePushNotifications": true, "roles.isMovementDone": true } }, { $lookup: { from: "results", localField: "_id", foreignField: "user_id", as: "result" } }, { $unwind: "$result" }, { $match: { "result.focusarea": { $ne: null }, "result.progress": { $lt: 12 } } }, { $sort: { "result.mptdate": -1 } }, { $group: { _id: "$_id", user_id: { "$first": "$_id" }, email: { "$first": "$email" }, deviceId: { "$first": "$deviceId" } } }, { $project: { email: 1, user_id: 1, deviceId: 1, _id: 0 } }]).exec();
    console.log('daily users userlist')
    userList.forEach(u => {
      userDeviceIds.push(u.deviceId);
      userIds.push(u.user_id);
    })
    let fcmdata = {
      title: 'Moveprint',
      navigationType: "NEWRECOMENDED",
      body: "Remember to complete your Moveprint exercises today to stay on target. Would you like to start now?",
      "notification_type": "g",
      "group_name": "DER",
      "user_ids": userList
    };
    let fcmStatus = await util.pushnotification(fcmdata, "", "group", userDeviceIds);
    console.log('fcm status', fcmStatus);
  },
  sendNewMPNotification: async () => {
    let userList = [];
    let userDeviceIds = [];
    let userIds = [];
    //userList = await NotificationQueue.find({ message_type: "MPR", status: false, schedule_date: { $lte: moment(Date.now()).utc().format('MM/DD/YYYY') } }, { deviceId: 1, user_id: 1 }).exec();
    userList = await NotificationQueue.aggregate([{ $match: { message_type: "MPR", status: false, schedule_date: { $lte: moment(Date.now()).utc().format('MM/DD/YYYY') } } }, { $lookup: { from: "users", localField: "user_id", foreignField: "_id", as: "user" } }, { $match: { "user.settings.enablePushNotifications": true } }, { $project: { deviceId: 1, user_id: 1 } }]).exec();
    console.log(userList)
    userList.forEach(u => {
      userDeviceIds.push(u.deviceId);
      userIds.push(u.user_id);
    })
    console.log('in mpr', moment(Date.now()).utc().format('MM/DD/YYYY'))
    // if (userDeviceIds.length > 0){
    //   await util.subscribeTopic("multi", userDeviceIds, "MSK");
    // }
    let fcmdata = {
      title: 'Heads up!',
      navigationType: "NEWMPT",
      body: "It's time to check your progress and complete a new Moveprint.",
      notification_type: "g",
      group_name: "MPR",
      user_ids: await userList
    };
    let fcmStatus = await util.pushnotification(fcmdata, " ", "group", userDeviceIds);
    console.log('fcm status', fcmStatus);
    // if (userDeviceIds.length > 0){
    //   await util.unsubscribeTopic("multi", userDeviceIds, "MSK");
    // }
  },
  proClientDetails: async (req, res) => {
    let resultVideos = {
      "TOE TOUCH": "uMkVZ9JN",
      "UPPER BODY MOBILITY": "Fhkqj62Y",
      "ROTATION": "h9UPUHxp",
      "SQUAT": "nUJuy4tk",
      "BALANCE & REACH": "UTqnCXQ3",
      "SYMMETRY": "ATplVchh",
      "PAIN FLOW": "hNv77IWq",
      "SHOULDER CLEARING": "",
      "SPINE CLEARING": ""
    }
    let resultHostid = '';
    let focusarea_description = '';
    let focusarea_features = '';
    let focusArea = '';
    let mskDetails = {};
    let resultDetails = {};
    let exercisesscore = 0;
    let previousMovementScore = [];
    let isMovementDone, isMSKDone, isRecommendedExercisesDone, passAll, isWeekThird, painResult, shoulderclearingflag;
    isMovementDone = isMSKDone = isRecommendedExercisesDone = passAll = isWeekThird = painResult = shoulderclearingflag = false;
    console.log('pro client details')
    let organisationSettings = await Organisation.findOne({ _id: ObjectId(req.body.id) }, { isMskEnabled: 1, categoryDescription: 1, _id: 0 }).exec();
    const info = "Steer clear of these types of exercises because they could negatively impact your progress, cause additional problems and increase your risk of injury."
    const categoryInfo = "The MSK report combines a variety of important health measures to create an overall rating of your musculoskeletal health at any given time. This enables you to monitor your current status and provides you an actionable next best step to promote musculoskeletal health and longevity."

    const newMskTitle = "It's time to update your MSK category.";
    const newMskDescription = "You're on your way! Now, let's check your progress.It's time to answer the wellness questionnaire and re-assess your wellness category.";
    const firstMskTitle = "DISCOVER YOUR CLIENTS HEALTH & WELLNESS CATEGORY";
    const firstMskDescription = "ID your clients greatest movement health opportunity.\nKnow where they are: Discover thier health risk category.\nGet a plan for lifelong movement health built just for them.";
    const firstMoveprintTitle = "START YOUR MOVEMENT JOURNEY";
    const firstMoveprintDescription = "Perform a Moveprint to generate a specific movement flow program designed to target your clients greatest opportunity for improvement and long-term health and vitality.";
    let lookupdata = await Lookup.findOne({}, { sleep: 1, smoking: 1, bmi: 1, _id: 0 }).exec();
    let activeflag = await User.findOne({ _id: ObjectId(req.body.userid) }, { is_active: 1, profileimage: 1 }).exec();
    Result.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ _id: -1 }).limit(2).exec(async (err, result) => {
      if (err || !result) {
        res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        if (result.length > 1) {
          let previousScore = [];
          result[1].movementscore.forEach(ex => {
            if (ex.groupid < 6) {
              ex.isDisplay = true; previousScore.push(ex)
            }
            else if ((ex.groupid === 6) && (ex.pain === "yes")) {
              shoulderclearingflag = true;
              ex.isDisplay = true;
              previousScore.push(ex)
            } else if (ex.groupid === 7) {
              if ((shoulderclearingflag == false) && (ex.pain === "yes")) {
                ex.isDisplay = true; previousScore.push(ex)
              } else {
                ex.isDisplay = false; previousScore.push(ex)
              }
            }
            else {
              ex.isDisplay = false; previousScore.push(ex)
            }
          })
          // result[1].movementscore.filter(ex => { if (ex.groupid < 6) { ex.isDisplay = true; previousScore.push(ex) } })
          previousMovementScore = previousScore;
        } else
          previousMovementScore = [];
        user = result[0];
        let completedRecommendedExercises = 0;
        console.log('results', result.length, req.body);
        if (user == undefined) {
          return res.status(200).json({
            status: 200,
            message: "User didn't perform Movement exercises",
            isMovementDone: isMovementDone,
            isActive: activeflag.is_active,
            firstMskTitle: firstMskTitle,
            firstMskDescription: firstMskDescription,
            firstMoveprintTitle: firstMoveprintTitle,
            firstMoveprintDescription: firstMoveprintDescription,
            isRecommendedExercisesDone: isRecommendedExercisesDone,
            isMSKDone: isMSKDone,
            isMskEnabled: organisationSettings.isMskEnabled,
            previousMovementScore: [],
            passAll: passAll,
            focusArea: '',
            role: resultDetails.role,
            recommendedExercises: [],
            previousDayPerformed: false,
            nextDayPerformed: false,
            moveprintResult: [],
            movementscore: [{
              "groupid": 1,
              "title": "TOE TOUCH TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 2,
              "title": "UPPER BODY MOBILITY TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 3,
              "title": "ROTATION TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 4,
              "title": "SQUAT TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 5,
              "title": "BALANCE & REACH TEST",
              "pain": "true",
              "score": 0,
              "isDisplay": true,
              "description": ""
            }],
            profileimage: activeflag.profileimage,
            progress: 0,
            totalSessions: 0,
            isWeekThird: false,
            week: '',
            info: info,
            info_category: categoryInfo,
            mptdate: '',
            completedRecommendedExercises: 0,
            recommendedImage: '',
            exercises: [],
            description: '',
            mpFeatures: '',
            mskresult: {
              mskdate: '',
              isMskExpired: false,
              newMskDescription: "",
              newMskTitle: "",
              bmi: '',
              bmiCategory: '',
              pqsiStatus: false,
              mskCategory: '',
              pqsiscore: 0,
              smokingStatus: false,
              mskDescription: '',
              mskFeatures: '',
              bmiFeatures: '',
              bmiDescription: '',
              smokingHeading: '',
              smokingSummary: '',
              smokingFeatures: '',
              smokingSummary2: '',
              pqsiHeading: '',
              pqsiSummary: '',
              pqsiFeatures: '',
              pqsiSummary2: ''
            }
          })
        } if ((result[0].recommended_exercises === undefined) || (result[0].recommended_exercises.length === 0) || (["1", "2"].includes(result[0].recommended_exercises[0].week))) {
          console.log('new MP path')
          User.findOne({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { profileimage: 1, isMovementDone: 1, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } }, isMSKDone: 1, _id: 1, deviceId: 1, first: 1, last: 1, email: 1, profileimage: 1 }).exec(async (err, userdetail) => {
            if (err) {
              return res.status(210).json({
                status: 210,
                message: 'User not found'
              })
            } else {
              console.log(userdetail.roles[0].isRecommendedExercisesDone)
              isRecommendedExercisesDone = userdetail.roles[0].isRecommendedExercisesDone;
              notificationCount = await Notification.find({
                $or: [{ user_id: req.userid, notification_type: "i", "message.readStatus": false }]

              }).countDocuments().exec();
              console.log("unread count", notificationCount)
              isMovementDone = await userdetail.roles[0].isMovementDone;
              isMSKDone = await userdetail.roles[0].isMSKDone;
              if (result[0].focusarea === "SYMMETRY")
                passAll = true;
              if (userdetail.roles[0].isMSKDone) {
                MskResult.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ mskdate: -1 }).limit(1).exec(async (err, mskresult) => {
                  if (err) {
                    return res.status(210).json({
                      status: 210,
                      message: err
                    })
                  } else {
                    mskDetails = mskresult[0];
                    var activitydate = new Date(mskresult[0].mskdate);
                    var now = new Date();
                    now = moment(now).utc();
                    activitydate = moment(activitydate).utc();
                    days = now.diff(activitydate, 'days');
                    console.log(days);
                    focusarea_description = proClientSessionsCompleteDescription;
                    return res.status(200).json({
                      status: 200,
                      message: "Client results",
                      moveprintResult: result[0].groups,
                      name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
                      profileimage: userdetail.profileimage,
                      userid: userdetail._id,
                      deviceId: userdetail.deviceId,
                      org_id: req.body.id,
                      isMovementDone: isMovementDone,
                      passAll: passAll,
                      progress: 12,
                      totalSessions: 12,
                      isWeekThird: true,
                      isActive: true,
                      recommendedImage: '',
                      firstMskTitle: firstMskTitle,
                      firstMskDescription: firstMskDescription,
                      resultHostid: resultHostid,
                      firstMoveprintTitle: firstMoveprintTitle,
                      firstMoveprintDescription: firstMoveprintDescription,
                      info: info,
                      info_category: categoryInfo,
                      focusArea: result[0].focusarea,
                      previousDayPerformed: false,
                      nextDayPerformed: false,
                      role: userdetail.roles[0],
                      notificationCount: notificationCount,
                      isRecommendedExercisesDone: false,
                      previousMovementScore: [],
                      movementscore: await util.moveprintDescription(result[0].movementscore),
                      completedRecommendedExercises: [],
                      recommendedExercises: result[0].exercises,
                      isMSKDone: userdetail.roles[0].isMSKDone,
                      isMskEnabled: organisationSettings.isMskEnabled,
                      week: "3",
                      exercises: [],
                      description: focusarea_description || '',
                      mpFeatures: focusarea_features || '',
                      mskresult: {
                        mskdate: mskresult[0].mskdate,
                        isMskExpired: days >= 45 ? true : false,
                        newMskDescription: newMskDescription,
                        newMskTitle: newMskTitle,
                        bmi: mskresult[0].bmi || '',
                        bmiCategory: mskresult[0].bmiCategory || '',
                        pqsiStatus: mskresult[0].pqsiStatus || false,
                        mskCategory: mskresult[0].mskCategory || '',
                        pqsiscore: mskresult[0].pqsiscore || 0,
                        smokingStatus: mskresult[0].smokingStatus || false,
                        mskDescription: promskDescription[mskresult[0].mskCategory] || '',
                        mskFeatures: promskFeatures[mskresult[0].mskCategory] || '',
                        bmiDescription: lookupdata.bmi.summary || '',
                        bmiFeatures: lookupdata.bmi.features || '',
                        smokingHeading: lookupdata.smoking.heading,
                        smokingSummary: lookupdata.smoking.summary,
                        smokingFeatures: lookupdata.smoking.features,
                        smokingSummary2: lookupdata.smoking.summary2,
                        pqsiHeading: lookupdata.sleep.heading,
                        pqsiSummary: lookupdata.sleep.summary,
                        pqsiFeatures: lookupdata.sleep.features,
                        pqsiSummary2: lookupdata.sleep.summary2
                      }
                    })
                  }
                });
              } else {
                focusarea_description = proClientSessionsCompleteDescription;
                return res.status(200).json({
                  status: 200,
                  message: "Client results",
                  moveprintResult: result[0].groups,
                  name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
                  profileimage: userdetail.profileimage,
                  userid: userdetail._id,
                  deviceId: userdetail.deviceId,
                  org_id: req.body.id,
                  isMovementDone: isMovementDone,
                  passAll: passAll,
                  progress: 12,
                  totalSessions: 12,
                  isActive: true,
                  isWeekThird: true,
                  recommendedImage: '',
                  firstMskTitle: firstMskTitle,
                  firstMskDescription: firstMskDescription,
                  resultHostid: resultHostid,
                  firstMoveprintTitle: firstMoveprintTitle,
                  firstMoveprintDescription: firstMoveprintDescription,
                  info: info,
                  info_category: categoryInfo,
                  role: userdetail.roles[0],
                  previousDayPerformed: false,
                  nextDayPerformed: false,
                  notificationCount: notificationCount,
                  isRecommendedExercisesDone: false,
                  previousMovementScore: previousMovementScore,
                  completedRecommendedExercises: completedRecommendedExercises,
                  recommendedExercises: result[0].exercises,
                  movementscore: await util.moveprintDescription(result[0].movementscore),
                  isMSKDone: isMSKDone,
                  isMskEnabled: organisationSettings.isMskEnabled,
                  focusArea: result[0].focusarea,
                  week: "1",
                  exercises: [],
                  description: focusarea_description || '',
                  mpFeatures: focusarea_features || '',
                  mskresult: {
                    mskdate: '',
                    isMskExpired: false,
                    newMskDescription: "",
                    newMskTitle: "",
                    bmi: '',
                    bmiCategory: '',
                    pqsiStatus: false,
                    mskCategory: '',
                    pqsiscore: 0,
                    smokingStatus: false,
                    mskDescription: '',
                    mskFeatures: '',
                    bmiFeatures: '',
                    bmiDescription: '',
                    smokingHeading: '',
                    smokingSummary: '',
                    smokingFeatures: '',
                    smokingSummary2: '',
                    pqsiHeading: '',
                    pqsiSummary: '',
                    pqsiFeatures: '',
                    pqsiSummary2: ''
                  }
                });
              }
            }
          });
        }
        else {
          for (let i = 0; i < 5; i++) {
            if (user.movementscore[i].score === 100) {
              exercisesscore = exercisesscore + 1;
            }
          }
          completedRecommendedExercises = result[0].exercises.length;
          console.log('completed exercises', completedRecommendedExercises)
          focusArea = user.focusarea;
          let activitydate = new Date(user.mptdate);
          let now = new Date();
          now = moment(now).utc();
          activitydate = moment(activitydate).utc();
          days = now.diff(activitydate, 'days');
          let finalScore = [];
          finalScore = result[0].groups;
          if (days <= 7)
            week = '1'
          else if (days <= 14)
            week = '2'
          else if (days > 14) {
            week = '3';
            isWeekThird = true;
          }

          let currentScore = [];
          focusArea = await util.focusedexercise(user.movementscore);
          focusarea_description = mpDescription[focusArea.replace('TEST', '').trim()];
          focusarea_features = mpFeatures[focusArea.replace('TEST', '').trim()];
          user.movementscore.forEach(ex => {
            if (ex.groupid < 6) {
              ex.isDisplay = true; currentScore.push(ex)
            }
            else if ((ex.groupid === 6) && (ex.pain === "yes")) {
              ex.isDisplay = true; currentScore.push(ex)
            } else if ((ex.groupid === 7) && (ex.pain === "yes")) {
              ex.isDisplay = true; currentScore.push(ex)
            }
            else {
              ex.isDisplay = false; currentScore.push(ex)
            }
          })
          if (!["SPINE CLEARING", "SHOULDER CLEARING"].includes(focusArea)) {
            for (var i = 0; i < 5; i++) {
              if (user.movementscore[i].pain === "true") {
                painResult = true;
                focusarea_description = mpDescription["Pain " + user.movementscore[i].title.replace('TEST', '').trim()];
                focusarea_features = mpFeatures["Pain " + user.movementscore[i].title.replace('TEST', '').trim()];
                focusArea = user.movementscore[i].title.replace('TEST', '').trim();
                break;
              }
            }
          }
          focusArea = focusArea.replace('TEST', '').trim();
          if (focusArea === "SYMMETRY")
            passAll = true;
          if (painResult === true) {
            resultHostid = resultVideos["PAIN FLOW"];
          } else {
            resultHostid = resultVideos[focusArea];
          }
          await User.findOne({ _id: ObjectId(req.body.userid), roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } } }, { profileimage: 1, isMovementDone: 1, roles: { $elemMatch: { org_id: ObjectId(req.body.id), role_id: "1" } }, isMSKDone: 1, _id: 1, first: 1, last: 1, profileimage: 1, email: 1, deviceId: 1 }).exec(async (err, userdetail) => {
            if (err) {
              return res.status(210).json({
                status: 210,
                message: 'User not found'
              })
            } else {
              console.log(days, user.day, userdetail.roles[0].isRecommendedExercisesDone)
              isRecommendedExercisesDone = userdetail.roles[0].isRecommendedExercisesDone;
              isMovementDone = await userdetail.roles[0].isMovementDone;
              isMSKDone = await userdetail.roles[0].isMSKDone;
              if (userdetail.roles[0].isMSKDone) {
                MskResult.find({ user_id: ObjectId(req.body.userid), org_id: ObjectId(req.body.id) }).sort({ mskdate: -1 }).limit(1).exec(async (err, mskresult) => {
                  if (err) {
                    return res.status(210).json({
                      status: 210,
                      message: err
                    })
                  } else {
                    mskDetails = mskresult[0];
                    var activitydate = new Date(mskresult[0].mskdate);
                    var now = new Date();
                    now = moment(now).utc();
                    activitydate = moment(activitydate).utc();
                    days = now.diff(activitydate, 'days');
                    console.log(days)
                    resultDetails = {
                      name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
                      profileimage: userdetail.profileimage,
                      userid: userdetail._id,
                      deviceId: userdetail.deviceId,
                      org_id: req.body.id,
                      isMovementDone: isMovementDone,
                      passAll: passAll,
                      isActive: activeflag.is_active,
                      focusArea: focusArea,
                      role_id: req.body.role_id,
                      role: userdetail.roles[0],
                      isRecommendedExercisesDone: (days !== result[0].day) ? false : userdetail.roles[0].isRecommendedExercisesDone,
                      previousMovementScore: previousMovementScore,
                      firstMskTitle: firstMskTitle,
                      firstMskDescription: firstMskDescription,
                      resultHostid: resultHostid,
                      firstMoveprintTitle: firstMoveprintTitle,
                      firstMoveprintDescription: firstMoveprintDescription,
                      movementscore: await util.moveprintDescription(user.movementscore),
                      completedRecommendedExercises: completedRecommendedExercises,
                      recommendedExercises: result[0].exercises,
                      isMSKDone: userdetail.roles[0].isMSKDone,
                      isMskEnabled: organisationSettings.isMskEnabled,
                      isWeekThird: isWeekThird,
                      week: week,
                      mptdate: result[0].mptdate,
                      moveprintResult: finalScore,
                      profileimage: userdetail.profileimage,
                      description: focusarea_description || '',
                      mpFeatures: focusarea_features || '',
                      info: info,
                      info_category: categoryInfo,
                      mskresult: {
                        mskdate: mskresult[0].mskdate,
                        isMskExpired: days >= 45 ? true : false,
                        newMskDescription: newMskDescription,
                        newMskTitle: newMskTitle,
                        bmi: mskresult[0].bmi || '',
                        bmiCategory: mskresult[0].bmiCategory || '',
                        pqsiStatus: mskresult[0].pqsiStatus || false,
                        mskCategory: mskresult[0].mskCategory || '',
                        pqsiscore: mskresult[0].pqsiscore || 0,
                        smokingStatus: mskresult[0].smokingStatus || false,
                        mskDescription: promskDescription[mskresult[0].mskCategory] || '',
                        mskFeatures: promskFeatures[mskresult[0].mskCategory] || '',
                        bmiDescription: lookupdata.bmi.summary || '',
                        bmiFeatures: lookupdata.bmi.features || '',
                        smokingHeading: lookupdata.smoking.heading,
                        smokingSummary: lookupdata.smoking.summary,
                        smokingFeatures: lookupdata.smoking.features,
                        smokingSummary2: lookupdata.smoking.summary2,
                        pqsiHeading: lookupdata.sleep.heading,
                        pqsiSummary: lookupdata.sleep.summary,
                        pqsiFeatures: lookupdata.sleep.features,
                        pqsiSummary2: lookupdata.sleep.summary2
                      }
                    };
                  }
                  //userController.recommendedExerciseImage(user.movementscore, res, resultDetails);
                  //userController.todayExercisesThumbnails(user, res, resultDetails);
                  userController.latestRecommendedxercisesThumbnails(user, res, resultDetails);
                });
              } else {
                let resultDetails = {
                  name: userdetail.first != undefined ? (userdetail.first + " " + userdetail.last) : userdetail.email,
                  profileimage: userdetail.profileimage,
                  userid: userdetail._id,
                  deviceId: userdetail.deviceId,
                  org_id: req.body.id,
                  isMovementDone: isMovementDone,
                  passAll: passAll,
                  isActive: activeflag.is_active,
                  focusArea: focusArea,
                  role: userdetail.roles[0],
                  role_id: req.body.role_id,
                  isRecommendedExercisesDone: (days !== result[0].day) ? false : userdetail.roles[0].isRecommendedExercisesDone,
                  previousMovementScore: previousMovementScore,
                  firstMskTitle: firstMskTitle,
                  firstMskDescription: firstMskDescription,
                  firstMoveprintTitle: firstMoveprintTitle,
                  firstMoveprintDescription: firstMoveprintDescription,
                  completedRecommendedExercises: completedRecommendedExercises,
                  recommendedExercises: result[0].exercises,
                  movementscore: await util.moveprintDescription(user.movementscore),
                  info: info,
                  info_category: categoryInfo,
                  resultHostid: resultHostid,
                  profileimage: userdetail.profileimage,
                  mptdate: result[0].mptdate,
                  isMSKDone: isMSKDone,
                  isMskEnabled: organisationSettings.isMskEnabled,
                  isWeekThird: isWeekThird,
                  week: week,
                  moveprintResult: finalScore,
                  description: focusarea_description || '',
                  mpFeatures: focusarea_features || '',
                  mskresult: {
                    mskdate: '',
                    isMskExpired: false,
                    newMskDescription: "",
                    newMskTitle: "",
                    bmi: '',
                    bmiCategory: '',
                    pqsiStatus: false,
                    mskCategory: '',
                    pqsiscore: 0,
                    smokingStatus: false,
                    mskDescription: '',
                    mskFeatures: '',
                    bmiFeatures: '',
                    bmiDescription: '',
                    smokingHeading: '',
                    smokingSummary: '',
                    smokingFeatures: '',
                    smokingSummary2: '',
                    pqsiHeading: '',
                    pqsiSummary: '',
                    pqsiFeatures: '',
                    pqsiSummary2: ''
                  }
                };
                //userController.recommendedExerciseImage(user.movementscore, res, resultDetails);
                //userController.todayExercisesThumbnails(user, res, resultDetails);
                userController.latestRecommendedxercisesThumbnails(user, res, resultDetails);
              }
            }
          });
        }
      }
    });
  },
  clientMoveprintHistory: async (req, res) => {
    if (!["0", "3", "2"].includes(req.body.role_id)) {
      return res.status(210).json({
        status: 210,
        message: 'You are not Authorized'
      })
    }
    let userId = await User.findOne({ email: req.body.email }, { _id: 1 }).exec();
    startDate = moment(req.body.mptdate, 'YYYY-MM-DD').format('MM/DD/YYYY');
    endDate = moment(req.body.mptdate, 'YYYY-MM-DD').format('MM/DD/YYYY');
    console.log("modified input format", startDate, endDate);
    startDate = moment(startDate, 'MM/DD/YYYY').utc().startOf('day').format();
    endDate = moment(endDate, 'MM/DD/YYYY').utc().endOf('day').format();
    // let convertdates = await util.convertDates(startDate, endDate);
    // startDate = convertdates.startDate;
    // endDate = convertdates.endDate;
    console.log("modified input", startDate, endDate);
    Result.find({ user_id: ObjectId(userId._id), org_id: ObjectId(req.body.id), mptdate: { $gte: new Date(startDate), $lte: new Date(endDate) } }, { _id: 0, focusarea: 1, mptdate: 1, movementscore: 1, groups: 1 }).sort({ _id: -1 }).limit(1).exec(async (err, result) => {
      if (err || !result) {
        res.status(210).json({
          status: 210,
          message: err
        })
      } else {
        if (result.length === 0) {
          return res.status(200).json({
            status: 200,
            message: 'Client Moveprint details',
            email: req.body.email,
            moveprintResult: [],
            movementscore: [{
              "groupid": 1,
              "title": "TOE TOUCH TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 2,
              "title": "UPPER BODY MOBILITY TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 3,
              "title": "ROTATION TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 4,
              "title": "SQUAT TEST",
              "pain": "false",
              "score": 0,
              "isDisplay": true,
              "description": ""
            },
            {
              "groupid": 5,
              "title": "BALANCE & REACH TEST",
              "pain": "true",
              "score": 0,
              "isDisplay": true,
              "description": ""
            }],
          })
        } else {
          let finalScore = [];
          for (let i = 0; i < 5; i++) {
            finalScore.push(result[0].groups[i]);
          }
          return res.status(200).json({
            status: 200,
            message: 'Client Moveprint details',
            email: req.body.email,
            moveprintResult: finalScore,
            movementscore: await util.moveprintDescription(result[0].movementscore)
          })
        }
      }
    })
  },
  monthlyMsk_Dashboard: async (req, res) => {
    console.log('rq', req.body)
    const mskFeatures = [{
      mskCategory: 'HEALTH',
      count: []
    }, {
      mskCategory: 'WELLNESS',
      count: []
    },
    {
      mskCategory: 'FITNESS',
      count: []
    }, {
      mskCategory: 'PERFORMANCE',
      count: []
    }
    ]
    if (req.body.id.length) {
    } else {
      console.log('rq', req.body);
      //   let data = await MskResult.aggregate([{ $match: { 'mskdate': {
      //     $gte: new Date( req.body.startDate),
      //     $lt:  new Date( req.body.endDate)
      // } }},{ $project:  { mskCategory: 1, org_id: 1, user_id: 1, mskdate: 1 } }]).exec();
      let data = await MskResult.find({
        mskdate: {
          $gte: new Date( req.body.startDate),
          $lt:  new Date( req.body.endDate)
      }
      }, { mskCategory: 1, org_id: 1, user_id: 1, mskdate: 1 }).exec()
      for(let msk of mskFeatures){
        for(let count of data){
          if(msk.mskCategory == count.mskCategory){
          // console.log( new Date( count.mskdate).getMonth()+1)
          // if(new Date( count.mskdate).getMonth()+1 == )
            msk.count.push(count)
          }
        }
      }
      return res.status(200).json({
        status: 200,
        message: 'Client Moveprint details',
        mskResults: mskFeatures
      })
    }
  }
}
